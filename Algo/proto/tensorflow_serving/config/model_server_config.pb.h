// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: tensorflow_serving/config/model_server_config.proto
// Protobuf C++ Version: 5.29.0

#ifndef tensorflow_5fserving_2fconfig_2fmodel_5fserver_5fconfig_2eproto_2epb_2eh
#define tensorflow_5fserving_2fconfig_2fmodel_5fserver_5fconfig_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/map.h"  // IWYU pragma: export
#include "google/protobuf/map_entry.h"
#include "google/protobuf/map_field_inl.h"
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "google/protobuf/any.pb.h"
#include "tensorflow_serving/config/file_system_storage_path_source.pb.h"
#include "tensorflow_serving/config/logging_config.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_tensorflow_5fserving_2fconfig_2fmodel_5fserver_5fconfig_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_tensorflow_5fserving_2fconfig_2fmodel_5fserver_5fconfig_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_tensorflow_5fserving_2fconfig_2fmodel_5fserver_5fconfig_2eproto;
namespace tensorflow {
namespace serving {
class ModelConfig;
struct ModelConfigDefaultTypeInternal;
extern ModelConfigDefaultTypeInternal _ModelConfig_default_instance_;
class ModelConfigList;
struct ModelConfigListDefaultTypeInternal;
extern ModelConfigListDefaultTypeInternal _ModelConfigList_default_instance_;
class ModelConfig_VersionLabelsEntry_DoNotUse;
struct ModelConfig_VersionLabelsEntry_DoNotUseDefaultTypeInternal;
extern ModelConfig_VersionLabelsEntry_DoNotUseDefaultTypeInternal _ModelConfig_VersionLabelsEntry_DoNotUse_default_instance_;
class ModelServerConfig;
struct ModelServerConfigDefaultTypeInternal;
extern ModelServerConfigDefaultTypeInternal _ModelServerConfig_default_instance_;
}  // namespace serving
}  // namespace tensorflow
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace tensorflow {
namespace serving {
enum ModelType : int {
  MODEL_TYPE_UNSPECIFIED [[deprecated]] = 0,
  TENSORFLOW [[deprecated]] = 1,
  OTHER [[deprecated]] = 2,
  ModelType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  ModelType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool ModelType_IsValid(int value);
extern const uint32_t ModelType_internal_data_[];
constexpr ModelType ModelType_MIN = static_cast<ModelType>(0);
constexpr ModelType ModelType_MAX = static_cast<ModelType>(2);
constexpr int ModelType_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
ModelType_descriptor();
template <typename T>
const std::string& ModelType_Name(T value) {
  static_assert(std::is_same<T, ModelType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to ModelType_Name().");
  return ModelType_Name(static_cast<ModelType>(value));
}
template <>
inline const std::string& ModelType_Name(ModelType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<ModelType_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool ModelType_Parse(absl::string_view name, ModelType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ModelType>(
      ModelType_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class ModelConfig_VersionLabelsEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, ::int64_t,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_INT64> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, ::int64_t,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_INT64>;
  ModelConfig_VersionLabelsEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ModelConfig_VersionLabelsEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit ModelConfig_VersionLabelsEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const ModelConfig_VersionLabelsEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const ModelConfig_VersionLabelsEntry_DoNotUse*>(
        &_ModelConfig_VersionLabelsEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_tensorflow_5fserving_2fconfig_2fmodel_5fserver_5fconfig_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      61, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class ModelConfig final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tensorflow.serving.ModelConfig) */ {
 public:
  inline ModelConfig() : ModelConfig(nullptr) {}
  ~ModelConfig() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ModelConfig* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ModelConfig));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ModelConfig(
      ::google::protobuf::internal::ConstantInitialized);

  inline ModelConfig(const ModelConfig& from) : ModelConfig(nullptr, from) {}
  inline ModelConfig(ModelConfig&& from) noexcept
      : ModelConfig(nullptr, std::move(from)) {}
  inline ModelConfig& operator=(const ModelConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModelConfig& operator=(ModelConfig&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModelConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModelConfig* internal_default_instance() {
    return reinterpret_cast<const ModelConfig*>(
        &_ModelConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(ModelConfig& a, ModelConfig& b) { a.Swap(&b); }
  inline void Swap(ModelConfig* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModelConfig* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModelConfig* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ModelConfig>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ModelConfig& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ModelConfig& from) { ModelConfig::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ModelConfig* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tensorflow.serving.ModelConfig"; }

 protected:
  explicit ModelConfig(::google::protobuf::Arena* arena);
  ModelConfig(::google::protobuf::Arena* arena, const ModelConfig& from);
  ModelConfig(::google::protobuf::Arena* arena, ModelConfig&& from) noexcept
      : ModelConfig(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kVersionLabelsFieldNumber = 8,
    kNameFieldNumber = 1,
    kBasePathFieldNumber = 2,
    kModelPlatformFieldNumber = 4,
    kLoggingConfigFieldNumber = 6,
    kModelVersionPolicyFieldNumber = 7,
    kModelTypeFieldNumber = 3,
  };
  // map<string, int64> version_labels = 8;
  int version_labels_size() const;
  private:
  int _internal_version_labels_size() const;

  public:
  void clear_version_labels() ;
  const ::google::protobuf::Map<std::string, ::int64_t>& version_labels() const;
  ::google::protobuf::Map<std::string, ::int64_t>* mutable_version_labels();

  private:
  const ::google::protobuf::Map<std::string, ::int64_t>& _internal_version_labels() const;
  ::google::protobuf::Map<std::string, ::int64_t>* _internal_mutable_version_labels();

  public:
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string base_path = 2;
  void clear_base_path() ;
  const std::string& base_path() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_base_path(Arg_&& arg, Args_... args);
  std::string* mutable_base_path();
  PROTOBUF_NODISCARD std::string* release_base_path();
  void set_allocated_base_path(std::string* value);

  private:
  const std::string& _internal_base_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_base_path(
      const std::string& value);
  std::string* _internal_mutable_base_path();

  public:
  // string model_platform = 4;
  void clear_model_platform() ;
  const std::string& model_platform() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_model_platform(Arg_&& arg, Args_... args);
  std::string* mutable_model_platform();
  PROTOBUF_NODISCARD std::string* release_model_platform();
  void set_allocated_model_platform(std::string* value);

  private:
  const std::string& _internal_model_platform() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_model_platform(
      const std::string& value);
  std::string* _internal_mutable_model_platform();

  public:
  // .tensorflow.serving.LoggingConfig logging_config = 6;
  bool has_logging_config() const;
  void clear_logging_config() ;
  const ::tensorflow::serving::LoggingConfig& logging_config() const;
  PROTOBUF_NODISCARD ::tensorflow::serving::LoggingConfig* release_logging_config();
  ::tensorflow::serving::LoggingConfig* mutable_logging_config();
  void set_allocated_logging_config(::tensorflow::serving::LoggingConfig* value);
  void unsafe_arena_set_allocated_logging_config(::tensorflow::serving::LoggingConfig* value);
  ::tensorflow::serving::LoggingConfig* unsafe_arena_release_logging_config();

  private:
  const ::tensorflow::serving::LoggingConfig& _internal_logging_config() const;
  ::tensorflow::serving::LoggingConfig* _internal_mutable_logging_config();

  public:
  // .tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy model_version_policy = 7;
  bool has_model_version_policy() const;
  void clear_model_version_policy() ;
  const ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy& model_version_policy() const;
  PROTOBUF_NODISCARD ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy* release_model_version_policy();
  ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy* mutable_model_version_policy();
  void set_allocated_model_version_policy(::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy* value);
  void unsafe_arena_set_allocated_model_version_policy(::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy* value);
  ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy* unsafe_arena_release_model_version_policy();

  private:
  const ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy& _internal_model_version_policy() const;
  ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy* _internal_mutable_model_version_policy();

  public:
  // .tensorflow.serving.ModelType model_type = 3 [deprecated = true];
  [[deprecated]]  void clear_model_type() ;
  [[deprecated]] ::tensorflow::serving::ModelType model_type() const;
  [[deprecated]] void set_model_type(::tensorflow::serving::ModelType value);

  private:
  ::tensorflow::serving::ModelType _internal_model_type() const;
  void _internal_set_model_type(::tensorflow::serving::ModelType value);

  public:
  // @@protoc_insertion_point(class_scope:tensorflow.serving.ModelConfig)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 7, 3,
      80, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ModelConfig& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::MapField<ModelConfig_VersionLabelsEntry_DoNotUse, std::string, ::int64_t,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_INT64>
        version_labels_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr base_path_;
    ::google::protobuf::internal::ArenaStringPtr model_platform_;
    ::tensorflow::serving::LoggingConfig* logging_config_;
    ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy* model_version_policy_;
    int model_type_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_5fserving_2fconfig_2fmodel_5fserver_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class ModelConfigList final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tensorflow.serving.ModelConfigList) */ {
 public:
  inline ModelConfigList() : ModelConfigList(nullptr) {}
  ~ModelConfigList() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ModelConfigList* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ModelConfigList));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ModelConfigList(
      ::google::protobuf::internal::ConstantInitialized);

  inline ModelConfigList(const ModelConfigList& from) : ModelConfigList(nullptr, from) {}
  inline ModelConfigList(ModelConfigList&& from) noexcept
      : ModelConfigList(nullptr, std::move(from)) {}
  inline ModelConfigList& operator=(const ModelConfigList& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModelConfigList& operator=(ModelConfigList&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModelConfigList& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModelConfigList* internal_default_instance() {
    return reinterpret_cast<const ModelConfigList*>(
        &_ModelConfigList_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(ModelConfigList& a, ModelConfigList& b) { a.Swap(&b); }
  inline void Swap(ModelConfigList* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModelConfigList* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModelConfigList* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ModelConfigList>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ModelConfigList& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ModelConfigList& from) { ModelConfigList::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ModelConfigList* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tensorflow.serving.ModelConfigList"; }

 protected:
  explicit ModelConfigList(::google::protobuf::Arena* arena);
  ModelConfigList(::google::protobuf::Arena* arena, const ModelConfigList& from);
  ModelConfigList(::google::protobuf::Arena* arena, ModelConfigList&& from) noexcept
      : ModelConfigList(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kConfigFieldNumber = 1,
  };
  // repeated .tensorflow.serving.ModelConfig config = 1;
  int config_size() const;
  private:
  int _internal_config_size() const;

  public:
  void clear_config() ;
  ::tensorflow::serving::ModelConfig* mutable_config(int index);
  ::google::protobuf::RepeatedPtrField<::tensorflow::serving::ModelConfig>* mutable_config();

  private:
  const ::google::protobuf::RepeatedPtrField<::tensorflow::serving::ModelConfig>& _internal_config() const;
  ::google::protobuf::RepeatedPtrField<::tensorflow::serving::ModelConfig>* _internal_mutable_config();
  public:
  const ::tensorflow::serving::ModelConfig& config(int index) const;
  ::tensorflow::serving::ModelConfig* add_config();
  const ::google::protobuf::RepeatedPtrField<::tensorflow::serving::ModelConfig>& config() const;
  // @@protoc_insertion_point(class_scope:tensorflow.serving.ModelConfigList)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ModelConfigList& from_msg);
    ::google::protobuf::RepeatedPtrField< ::tensorflow::serving::ModelConfig > config_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_5fserving_2fconfig_2fmodel_5fserver_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class ModelServerConfig final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tensorflow.serving.ModelServerConfig) */ {
 public:
  inline ModelServerConfig() : ModelServerConfig(nullptr) {}
  ~ModelServerConfig() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ModelServerConfig* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ModelServerConfig));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ModelServerConfig(
      ::google::protobuf::internal::ConstantInitialized);

  inline ModelServerConfig(const ModelServerConfig& from) : ModelServerConfig(nullptr, from) {}
  inline ModelServerConfig(ModelServerConfig&& from) noexcept
      : ModelServerConfig(nullptr, std::move(from)) {}
  inline ModelServerConfig& operator=(const ModelServerConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModelServerConfig& operator=(ModelServerConfig&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModelServerConfig& default_instance() {
    return *internal_default_instance();
  }
  enum ConfigCase {
    kModelConfigList = 1,
    kCustomModelConfig = 2,
    CONFIG_NOT_SET = 0,
  };
  static inline const ModelServerConfig* internal_default_instance() {
    return reinterpret_cast<const ModelServerConfig*>(
        &_ModelServerConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(ModelServerConfig& a, ModelServerConfig& b) { a.Swap(&b); }
  inline void Swap(ModelServerConfig* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModelServerConfig* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModelServerConfig* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ModelServerConfig>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ModelServerConfig& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ModelServerConfig& from) { ModelServerConfig::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ModelServerConfig* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tensorflow.serving.ModelServerConfig"; }

 protected:
  explicit ModelServerConfig(::google::protobuf::Arena* arena);
  ModelServerConfig(::google::protobuf::Arena* arena, const ModelServerConfig& from);
  ModelServerConfig(::google::protobuf::Arena* arena, ModelServerConfig&& from) noexcept
      : ModelServerConfig(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kModelConfigListFieldNumber = 1,
    kCustomModelConfigFieldNumber = 2,
  };
  // .tensorflow.serving.ModelConfigList model_config_list = 1;
  bool has_model_config_list() const;
  private:
  bool _internal_has_model_config_list() const;

  public:
  void clear_model_config_list() ;
  const ::tensorflow::serving::ModelConfigList& model_config_list() const;
  PROTOBUF_NODISCARD ::tensorflow::serving::ModelConfigList* release_model_config_list();
  ::tensorflow::serving::ModelConfigList* mutable_model_config_list();
  void set_allocated_model_config_list(::tensorflow::serving::ModelConfigList* value);
  void unsafe_arena_set_allocated_model_config_list(::tensorflow::serving::ModelConfigList* value);
  ::tensorflow::serving::ModelConfigList* unsafe_arena_release_model_config_list();

  private:
  const ::tensorflow::serving::ModelConfigList& _internal_model_config_list() const;
  ::tensorflow::serving::ModelConfigList* _internal_mutable_model_config_list();

  public:
  // .google.protobuf.Any custom_model_config = 2;
  bool has_custom_model_config() const;
  private:
  bool _internal_has_custom_model_config() const;

  public:
  void clear_custom_model_config() ;
  const ::google::protobuf::Any& custom_model_config() const;
  PROTOBUF_NODISCARD ::google::protobuf::Any* release_custom_model_config();
  ::google::protobuf::Any* mutable_custom_model_config();
  void set_allocated_custom_model_config(::google::protobuf::Any* value);
  void unsafe_arena_set_allocated_custom_model_config(::google::protobuf::Any* value);
  ::google::protobuf::Any* unsafe_arena_release_custom_model_config();

  private:
  const ::google::protobuf::Any& _internal_custom_model_config() const;
  ::google::protobuf::Any* _internal_mutable_custom_model_config();

  public:
  void clear_config();
  ConfigCase config_case() const;
  // @@protoc_insertion_point(class_scope:tensorflow.serving.ModelServerConfig)
 private:
  class _Internal;
  void set_has_model_config_list();
  void set_has_custom_model_config();
  inline bool has_config() const;
  inline void clear_has_config();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 2, 2,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ModelServerConfig& from_msg);
    union ConfigUnion {
      constexpr ConfigUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::tensorflow::serving::ModelConfigList* model_config_list_;
      ::google::protobuf::Any* custom_model_config_;
    } config_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_5fserving_2fconfig_2fmodel_5fserver_5fconfig_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ModelConfig

// string name = 1;
inline void ModelConfig::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& ModelConfig::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.serving.ModelConfig.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ModelConfig::set_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tensorflow.serving.ModelConfig.name)
}
inline std::string* ModelConfig::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.ModelConfig.name)
  return _s;
}
inline const std::string& ModelConfig::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void ModelConfig::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(value, GetArena());
}
inline std::string* ModelConfig::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* ModelConfig::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.serving.ModelConfig.name)
  return _impl_.name_.Release();
}
inline void ModelConfig::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.ModelConfig.name)
}

// string base_path = 2;
inline void ModelConfig::clear_base_path() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.base_path_.ClearToEmpty();
}
inline const std::string& ModelConfig::base_path() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.serving.ModelConfig.base_path)
  return _internal_base_path();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ModelConfig::set_base_path(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.base_path_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tensorflow.serving.ModelConfig.base_path)
}
inline std::string* ModelConfig::mutable_base_path() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_base_path();
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.ModelConfig.base_path)
  return _s;
}
inline const std::string& ModelConfig::_internal_base_path() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.base_path_.Get();
}
inline void ModelConfig::_internal_set_base_path(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.base_path_.Set(value, GetArena());
}
inline std::string* ModelConfig::_internal_mutable_base_path() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.base_path_.Mutable( GetArena());
}
inline std::string* ModelConfig::release_base_path() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.serving.ModelConfig.base_path)
  return _impl_.base_path_.Release();
}
inline void ModelConfig::set_allocated_base_path(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.base_path_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.base_path_.IsDefault()) {
    _impl_.base_path_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.ModelConfig.base_path)
}

// .tensorflow.serving.ModelType model_type = 3 [deprecated = true];
inline void ModelConfig::clear_model_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.model_type_ = 0;
}
inline ::tensorflow::serving::ModelType ModelConfig::model_type() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.ModelConfig.model_type)
  return _internal_model_type();
}
inline void ModelConfig::set_model_type(::tensorflow::serving::ModelType value) {
  _internal_set_model_type(value);
  // @@protoc_insertion_point(field_set:tensorflow.serving.ModelConfig.model_type)
}
inline ::tensorflow::serving::ModelType ModelConfig::_internal_model_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::tensorflow::serving::ModelType>(_impl_.model_type_);
}
inline void ModelConfig::_internal_set_model_type(::tensorflow::serving::ModelType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.model_type_ = value;
}

// string model_platform = 4;
inline void ModelConfig::clear_model_platform() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.model_platform_.ClearToEmpty();
}
inline const std::string& ModelConfig::model_platform() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.serving.ModelConfig.model_platform)
  return _internal_model_platform();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ModelConfig::set_model_platform(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.model_platform_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tensorflow.serving.ModelConfig.model_platform)
}
inline std::string* ModelConfig::mutable_model_platform() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_model_platform();
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.ModelConfig.model_platform)
  return _s;
}
inline const std::string& ModelConfig::_internal_model_platform() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.model_platform_.Get();
}
inline void ModelConfig::_internal_set_model_platform(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.model_platform_.Set(value, GetArena());
}
inline std::string* ModelConfig::_internal_mutable_model_platform() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.model_platform_.Mutable( GetArena());
}
inline std::string* ModelConfig::release_model_platform() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.serving.ModelConfig.model_platform)
  return _impl_.model_platform_.Release();
}
inline void ModelConfig::set_allocated_model_platform(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.model_platform_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.model_platform_.IsDefault()) {
    _impl_.model_platform_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.ModelConfig.model_platform)
}

// .tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy model_version_policy = 7;
inline bool ModelConfig::has_model_version_policy() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.model_version_policy_ != nullptr);
  return value;
}
inline const ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy& ModelConfig::_internal_model_version_policy() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy* p = _impl_.model_version_policy_;
  return p != nullptr ? *p : reinterpret_cast<const ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy&>(::tensorflow::serving::_FileSystemStoragePathSourceConfig_ServableVersionPolicy_default_instance_);
}
inline const ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy& ModelConfig::model_version_policy() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.serving.ModelConfig.model_version_policy)
  return _internal_model_version_policy();
}
inline void ModelConfig::unsafe_arena_set_allocated_model_version_policy(::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.model_version_policy_);
  }
  _impl_.model_version_policy_ = reinterpret_cast<::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.serving.ModelConfig.model_version_policy)
}
inline ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy* ModelConfig::release_model_version_policy() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy* released = _impl_.model_version_policy_;
  _impl_.model_version_policy_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy* ModelConfig::unsafe_arena_release_model_version_policy() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.serving.ModelConfig.model_version_policy)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy* temp = _impl_.model_version_policy_;
  _impl_.model_version_policy_ = nullptr;
  return temp;
}
inline ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy* ModelConfig::_internal_mutable_model_version_policy() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.model_version_policy_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy>(GetArena());
    _impl_.model_version_policy_ = reinterpret_cast<::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy*>(p);
  }
  return _impl_.model_version_policy_;
}
inline ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy* ModelConfig::mutable_model_version_policy() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy* _msg = _internal_mutable_model_version_policy();
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.ModelConfig.model_version_policy)
  return _msg;
}
inline void ModelConfig::set_allocated_model_version_policy(::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.model_version_policy_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.model_version_policy_ = reinterpret_cast<::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy*>(value);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.ModelConfig.model_version_policy)
}

// map<string, int64> version_labels = 8;
inline int ModelConfig::_internal_version_labels_size() const {
  return _internal_version_labels().size();
}
inline int ModelConfig::version_labels_size() const {
  return _internal_version_labels_size();
}
inline void ModelConfig::clear_version_labels() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.version_labels_.Clear();
}
inline const ::google::protobuf::Map<std::string, ::int64_t>& ModelConfig::_internal_version_labels() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.version_labels_.GetMap();
}
inline const ::google::protobuf::Map<std::string, ::int64_t>& ModelConfig::version_labels() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:tensorflow.serving.ModelConfig.version_labels)
  return _internal_version_labels();
}
inline ::google::protobuf::Map<std::string, ::int64_t>* ModelConfig::_internal_mutable_version_labels() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.version_labels_.MutableMap();
}
inline ::google::protobuf::Map<std::string, ::int64_t>* ModelConfig::mutable_version_labels() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:tensorflow.serving.ModelConfig.version_labels)
  return _internal_mutable_version_labels();
}

// .tensorflow.serving.LoggingConfig logging_config = 6;
inline bool ModelConfig::has_logging_config() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.logging_config_ != nullptr);
  return value;
}
inline const ::tensorflow::serving::LoggingConfig& ModelConfig::_internal_logging_config() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tensorflow::serving::LoggingConfig* p = _impl_.logging_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::tensorflow::serving::LoggingConfig&>(::tensorflow::serving::_LoggingConfig_default_instance_);
}
inline const ::tensorflow::serving::LoggingConfig& ModelConfig::logging_config() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.serving.ModelConfig.logging_config)
  return _internal_logging_config();
}
inline void ModelConfig::unsafe_arena_set_allocated_logging_config(::tensorflow::serving::LoggingConfig* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.logging_config_);
  }
  _impl_.logging_config_ = reinterpret_cast<::tensorflow::serving::LoggingConfig*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.serving.ModelConfig.logging_config)
}
inline ::tensorflow::serving::LoggingConfig* ModelConfig::release_logging_config() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tensorflow::serving::LoggingConfig* released = _impl_.logging_config_;
  _impl_.logging_config_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::tensorflow::serving::LoggingConfig* ModelConfig::unsafe_arena_release_logging_config() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.serving.ModelConfig.logging_config)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tensorflow::serving::LoggingConfig* temp = _impl_.logging_config_;
  _impl_.logging_config_ = nullptr;
  return temp;
}
inline ::tensorflow::serving::LoggingConfig* ModelConfig::_internal_mutable_logging_config() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.logging_config_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tensorflow::serving::LoggingConfig>(GetArena());
    _impl_.logging_config_ = reinterpret_cast<::tensorflow::serving::LoggingConfig*>(p);
  }
  return _impl_.logging_config_;
}
inline ::tensorflow::serving::LoggingConfig* ModelConfig::mutable_logging_config() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::tensorflow::serving::LoggingConfig* _msg = _internal_mutable_logging_config();
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.ModelConfig.logging_config)
  return _msg;
}
inline void ModelConfig::set_allocated_logging_config(::tensorflow::serving::LoggingConfig* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.logging_config_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.logging_config_ = reinterpret_cast<::tensorflow::serving::LoggingConfig*>(value);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.ModelConfig.logging_config)
}

// -------------------------------------------------------------------

// ModelConfigList

// repeated .tensorflow.serving.ModelConfig config = 1;
inline int ModelConfigList::_internal_config_size() const {
  return _internal_config().size();
}
inline int ModelConfigList::config_size() const {
  return _internal_config_size();
}
inline void ModelConfigList::clear_config() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.config_.Clear();
}
inline ::tensorflow::serving::ModelConfig* ModelConfigList::mutable_config(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.ModelConfigList.config)
  return _internal_mutable_config()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::tensorflow::serving::ModelConfig>* ModelConfigList::mutable_config()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.serving.ModelConfigList.config)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_config();
}
inline const ::tensorflow::serving::ModelConfig& ModelConfigList::config(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.serving.ModelConfigList.config)
  return _internal_config().Get(index);
}
inline ::tensorflow::serving::ModelConfig* ModelConfigList::add_config() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::tensorflow::serving::ModelConfig* _add = _internal_mutable_config()->Add();
  // @@protoc_insertion_point(field_add:tensorflow.serving.ModelConfigList.config)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::tensorflow::serving::ModelConfig>& ModelConfigList::config() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tensorflow.serving.ModelConfigList.config)
  return _internal_config();
}
inline const ::google::protobuf::RepeatedPtrField<::tensorflow::serving::ModelConfig>&
ModelConfigList::_internal_config() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.config_;
}
inline ::google::protobuf::RepeatedPtrField<::tensorflow::serving::ModelConfig>*
ModelConfigList::_internal_mutable_config() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.config_;
}

// -------------------------------------------------------------------

// ModelServerConfig

// .tensorflow.serving.ModelConfigList model_config_list = 1;
inline bool ModelServerConfig::has_model_config_list() const {
  return config_case() == kModelConfigList;
}
inline bool ModelServerConfig::_internal_has_model_config_list() const {
  return config_case() == kModelConfigList;
}
inline void ModelServerConfig::set_has_model_config_list() {
  _impl_._oneof_case_[0] = kModelConfigList;
}
inline void ModelServerConfig::clear_model_config_list() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (config_case() == kModelConfigList) {
    if (GetArena() == nullptr) {
      delete _impl_.config_.model_config_list_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.config_.model_config_list_);
    }
    clear_has_config();
  }
}
inline ::tensorflow::serving::ModelConfigList* ModelServerConfig::release_model_config_list() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.ModelServerConfig.model_config_list)
  if (config_case() == kModelConfigList) {
    clear_has_config();
    auto* temp = _impl_.config_.model_config_list_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.config_.model_config_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tensorflow::serving::ModelConfigList& ModelServerConfig::_internal_model_config_list() const {
  return config_case() == kModelConfigList ? *_impl_.config_.model_config_list_ : reinterpret_cast<::tensorflow::serving::ModelConfigList&>(::tensorflow::serving::_ModelConfigList_default_instance_);
}
inline const ::tensorflow::serving::ModelConfigList& ModelServerConfig::model_config_list() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.serving.ModelServerConfig.model_config_list)
  return _internal_model_config_list();
}
inline ::tensorflow::serving::ModelConfigList* ModelServerConfig::unsafe_arena_release_model_config_list() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.serving.ModelServerConfig.model_config_list)
  if (config_case() == kModelConfigList) {
    clear_has_config();
    auto* temp = _impl_.config_.model_config_list_;
    _impl_.config_.model_config_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ModelServerConfig::unsafe_arena_set_allocated_model_config_list(::tensorflow::serving::ModelConfigList* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_config();
  if (value) {
    set_has_model_config_list();
    _impl_.config_.model_config_list_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.serving.ModelServerConfig.model_config_list)
}
inline ::tensorflow::serving::ModelConfigList* ModelServerConfig::_internal_mutable_model_config_list() {
  if (config_case() != kModelConfigList) {
    clear_config();
    set_has_model_config_list();
    _impl_.config_.model_config_list_ =
        ::google::protobuf::Message::DefaultConstruct<::tensorflow::serving::ModelConfigList>(GetArena());
  }
  return _impl_.config_.model_config_list_;
}
inline ::tensorflow::serving::ModelConfigList* ModelServerConfig::mutable_model_config_list() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tensorflow::serving::ModelConfigList* _msg = _internal_mutable_model_config_list();
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.ModelServerConfig.model_config_list)
  return _msg;
}

// .google.protobuf.Any custom_model_config = 2;
inline bool ModelServerConfig::has_custom_model_config() const {
  return config_case() == kCustomModelConfig;
}
inline bool ModelServerConfig::_internal_has_custom_model_config() const {
  return config_case() == kCustomModelConfig;
}
inline void ModelServerConfig::set_has_custom_model_config() {
  _impl_._oneof_case_[0] = kCustomModelConfig;
}
inline ::google::protobuf::Any* ModelServerConfig::release_custom_model_config() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.ModelServerConfig.custom_model_config)
  if (config_case() == kCustomModelConfig) {
    clear_has_config();
    auto* temp = _impl_.config_.custom_model_config_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.config_.custom_model_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::protobuf::Any& ModelServerConfig::_internal_custom_model_config() const {
  return config_case() == kCustomModelConfig ? *_impl_.config_.custom_model_config_ : reinterpret_cast<::google::protobuf::Any&>(::google::protobuf::_Any_default_instance_);
}
inline const ::google::protobuf::Any& ModelServerConfig::custom_model_config() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.serving.ModelServerConfig.custom_model_config)
  return _internal_custom_model_config();
}
inline ::google::protobuf::Any* ModelServerConfig::unsafe_arena_release_custom_model_config() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.serving.ModelServerConfig.custom_model_config)
  if (config_case() == kCustomModelConfig) {
    clear_has_config();
    auto* temp = _impl_.config_.custom_model_config_;
    _impl_.config_.custom_model_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ModelServerConfig::unsafe_arena_set_allocated_custom_model_config(::google::protobuf::Any* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_config();
  if (value) {
    set_has_custom_model_config();
    _impl_.config_.custom_model_config_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.serving.ModelServerConfig.custom_model_config)
}
inline ::google::protobuf::Any* ModelServerConfig::_internal_mutable_custom_model_config() {
  if (config_case() != kCustomModelConfig) {
    clear_config();
    set_has_custom_model_config();
    _impl_.config_.custom_model_config_ =
        ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Any>(GetArena());
  }
  return _impl_.config_.custom_model_config_;
}
inline ::google::protobuf::Any* ModelServerConfig::mutable_custom_model_config() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Any* _msg = _internal_mutable_custom_model_config();
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.ModelServerConfig.custom_model_config)
  return _msg;
}

inline bool ModelServerConfig::has_config() const {
  return config_case() != CONFIG_NOT_SET;
}
inline void ModelServerConfig::clear_has_config() {
  _impl_._oneof_case_[0] = CONFIG_NOT_SET;
}
inline ModelServerConfig::ConfigCase ModelServerConfig::config_case() const {
  return ModelServerConfig::ConfigCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace serving
}  // namespace tensorflow


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::tensorflow::serving::ModelType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::tensorflow::serving::ModelType>() {
  return ::tensorflow::serving::ModelType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // tensorflow_5fserving_2fconfig_2fmodel_5fserver_5fconfig_2eproto_2epb_2eh
