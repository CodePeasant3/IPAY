// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: tensorflow_serving/config/file_system_storage_path_source.proto
// Protobuf C++ Version: 5.29.0

#ifndef tensorflow_5fserving_2fconfig_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto_2epb_2eh
#define tensorflow_5fserving_2fconfig_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_tensorflow_5fserving_2fconfig_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_tensorflow_5fserving_2fconfig_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_tensorflow_5fserving_2fconfig_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto;
namespace tensorflow {
namespace serving {
class FileSystemStoragePathSourceConfig;
struct FileSystemStoragePathSourceConfigDefaultTypeInternal;
extern FileSystemStoragePathSourceConfigDefaultTypeInternal _FileSystemStoragePathSourceConfig_default_instance_;
class FileSystemStoragePathSourceConfig_ServableToMonitor;
struct FileSystemStoragePathSourceConfig_ServableToMonitorDefaultTypeInternal;
extern FileSystemStoragePathSourceConfig_ServableToMonitorDefaultTypeInternal _FileSystemStoragePathSourceConfig_ServableToMonitor_default_instance_;
class FileSystemStoragePathSourceConfig_ServableVersionPolicy;
struct FileSystemStoragePathSourceConfig_ServableVersionPolicyDefaultTypeInternal;
extern FileSystemStoragePathSourceConfig_ServableVersionPolicyDefaultTypeInternal _FileSystemStoragePathSourceConfig_ServableVersionPolicy_default_instance_;
class FileSystemStoragePathSourceConfig_ServableVersionPolicy_All;
struct FileSystemStoragePathSourceConfig_ServableVersionPolicy_AllDefaultTypeInternal;
extern FileSystemStoragePathSourceConfig_ServableVersionPolicy_AllDefaultTypeInternal _FileSystemStoragePathSourceConfig_ServableVersionPolicy_All_default_instance_;
class FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest;
struct FileSystemStoragePathSourceConfig_ServableVersionPolicy_LatestDefaultTypeInternal;
extern FileSystemStoragePathSourceConfig_ServableVersionPolicy_LatestDefaultTypeInternal _FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest_default_instance_;
class FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific;
struct FileSystemStoragePathSourceConfig_ServableVersionPolicy_SpecificDefaultTypeInternal;
extern FileSystemStoragePathSourceConfig_ServableVersionPolicy_SpecificDefaultTypeInternal _FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific_default_instance_;
}  // namespace serving
}  // namespace tensorflow
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace tensorflow {
namespace serving {

// ===================================================================


// -------------------------------------------------------------------

class FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Specific) */ {
 public:
  inline FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific() : FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific(nullptr) {}
  ~FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific(
      ::google::protobuf::internal::ConstantInitialized);

  inline FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific(const FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific& from) : FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific(nullptr, from) {}
  inline FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific(FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific&& from) noexcept
      : FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific(nullptr, std::move(from)) {}
  inline FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific& operator=(const FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific& operator=(FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific& default_instance() {
    return *internal_default_instance();
  }
  static inline const FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific* internal_default_instance() {
    return reinterpret_cast<const FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific*>(
        &_FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific& a, FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific& b) { a.Swap(&b); }
  inline void Swap(FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific& from) { FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Specific"; }

 protected:
  explicit FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific(::google::protobuf::Arena* arena);
  FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific(::google::protobuf::Arena* arena, const FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific& from);
  FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific(::google::protobuf::Arena* arena, FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific&& from) noexcept
      : FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kVersionsFieldNumber = 1,
  };
  // repeated int64 versions = 1;
  int versions_size() const;
  private:
  int _internal_versions_size() const;

  public:
  void clear_versions() ;
  ::int64_t versions(int index) const;
  void set_versions(int index, ::int64_t value);
  void add_versions(::int64_t value);
  const ::google::protobuf::RepeatedField<::int64_t>& versions() const;
  ::google::protobuf::RepeatedField<::int64_t>* mutable_versions();

  private:
  const ::google::protobuf::RepeatedField<::int64_t>& _internal_versions() const;
  ::google::protobuf::RepeatedField<::int64_t>* _internal_mutable_versions();

  public:
  // @@protoc_insertion_point(class_scope:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Specific)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific& from_msg);
    ::google::protobuf::RepeatedField<::int64_t> versions_;
    ::google::protobuf::internal::CachedSize _versions_cached_byte_size_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_5fserving_2fconfig_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto;
};
// -------------------------------------------------------------------

class FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Latest) */ {
 public:
  inline FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest() : FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest(nullptr) {}
  ~FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest(
      ::google::protobuf::internal::ConstantInitialized);

  inline FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest(const FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest& from) : FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest(nullptr, from) {}
  inline FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest(FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest&& from) noexcept
      : FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest(nullptr, std::move(from)) {}
  inline FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest& operator=(const FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest& operator=(FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest& default_instance() {
    return *internal_default_instance();
  }
  static inline const FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest* internal_default_instance() {
    return reinterpret_cast<const FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest*>(
        &_FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest& a, FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest& b) { a.Swap(&b); }
  inline void Swap(FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest& from) { FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Latest"; }

 protected:
  explicit FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest(::google::protobuf::Arena* arena);
  FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest(::google::protobuf::Arena* arena, const FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest& from);
  FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest(::google::protobuf::Arena* arena, FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest&& from) noexcept
      : FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNumVersionsFieldNumber = 1,
  };
  // uint32 num_versions = 1;
  void clear_num_versions() ;
  ::uint32_t num_versions() const;
  void set_num_versions(::uint32_t value);

  private:
  ::uint32_t _internal_num_versions() const;
  void _internal_set_num_versions(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Latest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest& from_msg);
    ::uint32_t num_versions_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_5fserving_2fconfig_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto;
};
// -------------------------------------------------------------------

class FileSystemStoragePathSourceConfig_ServableVersionPolicy_All final
    : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.All) */ {
 public:
  inline FileSystemStoragePathSourceConfig_ServableVersionPolicy_All() : FileSystemStoragePathSourceConfig_ServableVersionPolicy_All(nullptr) {}

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(FileSystemStoragePathSourceConfig_ServableVersionPolicy_All* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(FileSystemStoragePathSourceConfig_ServableVersionPolicy_All));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR FileSystemStoragePathSourceConfig_ServableVersionPolicy_All(
      ::google::protobuf::internal::ConstantInitialized);

  inline FileSystemStoragePathSourceConfig_ServableVersionPolicy_All(const FileSystemStoragePathSourceConfig_ServableVersionPolicy_All& from) : FileSystemStoragePathSourceConfig_ServableVersionPolicy_All(nullptr, from) {}
  inline FileSystemStoragePathSourceConfig_ServableVersionPolicy_All(FileSystemStoragePathSourceConfig_ServableVersionPolicy_All&& from) noexcept
      : FileSystemStoragePathSourceConfig_ServableVersionPolicy_All(nullptr, std::move(from)) {}
  inline FileSystemStoragePathSourceConfig_ServableVersionPolicy_All& operator=(const FileSystemStoragePathSourceConfig_ServableVersionPolicy_All& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileSystemStoragePathSourceConfig_ServableVersionPolicy_All& operator=(FileSystemStoragePathSourceConfig_ServableVersionPolicy_All&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FileSystemStoragePathSourceConfig_ServableVersionPolicy_All& default_instance() {
    return *internal_default_instance();
  }
  static inline const FileSystemStoragePathSourceConfig_ServableVersionPolicy_All* internal_default_instance() {
    return reinterpret_cast<const FileSystemStoragePathSourceConfig_ServableVersionPolicy_All*>(
        &_FileSystemStoragePathSourceConfig_ServableVersionPolicy_All_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(FileSystemStoragePathSourceConfig_ServableVersionPolicy_All& a, FileSystemStoragePathSourceConfig_ServableVersionPolicy_All& b) { a.Swap(&b); }
  inline void Swap(FileSystemStoragePathSourceConfig_ServableVersionPolicy_All* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileSystemStoragePathSourceConfig_ServableVersionPolicy_All* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FileSystemStoragePathSourceConfig_ServableVersionPolicy_All* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<FileSystemStoragePathSourceConfig_ServableVersionPolicy_All>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const FileSystemStoragePathSourceConfig_ServableVersionPolicy_All& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const FileSystemStoragePathSourceConfig_ServableVersionPolicy_All& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.All"; }

 protected:
  explicit FileSystemStoragePathSourceConfig_ServableVersionPolicy_All(::google::protobuf::Arena* arena);
  FileSystemStoragePathSourceConfig_ServableVersionPolicy_All(::google::protobuf::Arena* arena, const FileSystemStoragePathSourceConfig_ServableVersionPolicy_All& from);
  FileSystemStoragePathSourceConfig_ServableVersionPolicy_All(::google::protobuf::Arena* arena, FileSystemStoragePathSourceConfig_ServableVersionPolicy_All&& from) noexcept
      : FileSystemStoragePathSourceConfig_ServableVersionPolicy_All(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.All)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const FileSystemStoragePathSourceConfig_ServableVersionPolicy_All& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_tensorflow_5fserving_2fconfig_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto;
};
// -------------------------------------------------------------------

class FileSystemStoragePathSourceConfig_ServableVersionPolicy final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy) */ {
 public:
  inline FileSystemStoragePathSourceConfig_ServableVersionPolicy() : FileSystemStoragePathSourceConfig_ServableVersionPolicy(nullptr) {}
  ~FileSystemStoragePathSourceConfig_ServableVersionPolicy() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(FileSystemStoragePathSourceConfig_ServableVersionPolicy* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(FileSystemStoragePathSourceConfig_ServableVersionPolicy));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR FileSystemStoragePathSourceConfig_ServableVersionPolicy(
      ::google::protobuf::internal::ConstantInitialized);

  inline FileSystemStoragePathSourceConfig_ServableVersionPolicy(const FileSystemStoragePathSourceConfig_ServableVersionPolicy& from) : FileSystemStoragePathSourceConfig_ServableVersionPolicy(nullptr, from) {}
  inline FileSystemStoragePathSourceConfig_ServableVersionPolicy(FileSystemStoragePathSourceConfig_ServableVersionPolicy&& from) noexcept
      : FileSystemStoragePathSourceConfig_ServableVersionPolicy(nullptr, std::move(from)) {}
  inline FileSystemStoragePathSourceConfig_ServableVersionPolicy& operator=(const FileSystemStoragePathSourceConfig_ServableVersionPolicy& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileSystemStoragePathSourceConfig_ServableVersionPolicy& operator=(FileSystemStoragePathSourceConfig_ServableVersionPolicy&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FileSystemStoragePathSourceConfig_ServableVersionPolicy& default_instance() {
    return *internal_default_instance();
  }
  enum PolicyChoiceCase {
    kLatest = 100,
    kAll = 101,
    kSpecific = 102,
    POLICY_CHOICE_NOT_SET = 0,
  };
  static inline const FileSystemStoragePathSourceConfig_ServableVersionPolicy* internal_default_instance() {
    return reinterpret_cast<const FileSystemStoragePathSourceConfig_ServableVersionPolicy*>(
        &_FileSystemStoragePathSourceConfig_ServableVersionPolicy_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(FileSystemStoragePathSourceConfig_ServableVersionPolicy& a, FileSystemStoragePathSourceConfig_ServableVersionPolicy& b) { a.Swap(&b); }
  inline void Swap(FileSystemStoragePathSourceConfig_ServableVersionPolicy* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileSystemStoragePathSourceConfig_ServableVersionPolicy* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FileSystemStoragePathSourceConfig_ServableVersionPolicy* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<FileSystemStoragePathSourceConfig_ServableVersionPolicy>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const FileSystemStoragePathSourceConfig_ServableVersionPolicy& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const FileSystemStoragePathSourceConfig_ServableVersionPolicy& from) { FileSystemStoragePathSourceConfig_ServableVersionPolicy::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(FileSystemStoragePathSourceConfig_ServableVersionPolicy* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy"; }

 protected:
  explicit FileSystemStoragePathSourceConfig_ServableVersionPolicy(::google::protobuf::Arena* arena);
  FileSystemStoragePathSourceConfig_ServableVersionPolicy(::google::protobuf::Arena* arena, const FileSystemStoragePathSourceConfig_ServableVersionPolicy& from);
  FileSystemStoragePathSourceConfig_ServableVersionPolicy(::google::protobuf::Arena* arena, FileSystemStoragePathSourceConfig_ServableVersionPolicy&& from) noexcept
      : FileSystemStoragePathSourceConfig_ServableVersionPolicy(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using Latest = FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest;
  using All = FileSystemStoragePathSourceConfig_ServableVersionPolicy_All;
  using Specific = FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific;

  // accessors -------------------------------------------------------
  enum : int {
    kLatestFieldNumber = 100,
    kAllFieldNumber = 101,
    kSpecificFieldNumber = 102,
  };
  // .tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Latest latest = 100;
  bool has_latest() const;
  private:
  bool _internal_has_latest() const;

  public:
  void clear_latest() ;
  const ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest& latest() const;
  PROTOBUF_NODISCARD ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest* release_latest();
  ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest* mutable_latest();
  void set_allocated_latest(::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest* value);
  void unsafe_arena_set_allocated_latest(::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest* value);
  ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest* unsafe_arena_release_latest();

  private:
  const ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest& _internal_latest() const;
  ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest* _internal_mutable_latest();

  public:
  // .tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.All all = 101;
  bool has_all() const;
  private:
  bool _internal_has_all() const;

  public:
  void clear_all() ;
  const ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_All& all() const;
  PROTOBUF_NODISCARD ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_All* release_all();
  ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_All* mutable_all();
  void set_allocated_all(::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_All* value);
  void unsafe_arena_set_allocated_all(::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_All* value);
  ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_All* unsafe_arena_release_all();

  private:
  const ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_All& _internal_all() const;
  ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_All* _internal_mutable_all();

  public:
  // .tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Specific specific = 102;
  bool has_specific() const;
  private:
  bool _internal_has_specific() const;

  public:
  void clear_specific() ;
  const ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific& specific() const;
  PROTOBUF_NODISCARD ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific* release_specific();
  ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific* mutable_specific();
  void set_allocated_specific(::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific* value);
  void unsafe_arena_set_allocated_specific(::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific* value);
  ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific* unsafe_arena_release_specific();

  private:
  const ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific& _internal_specific() const;
  ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific* _internal_mutable_specific();

  public:
  void clear_policy_choice();
  PolicyChoiceCase policy_choice_case() const;
  // @@protoc_insertion_point(class_scope:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy)
 private:
  class _Internal;
  void set_has_latest();
  void set_has_all();
  void set_has_specific();
  inline bool has_policy_choice() const;
  inline void clear_has_policy_choice();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 3, 3,
      0, 7>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const FileSystemStoragePathSourceConfig_ServableVersionPolicy& from_msg);
    union PolicyChoiceUnion {
      constexpr PolicyChoiceUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest* latest_;
      ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_All* all_;
      ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific* specific_;
    } policy_choice_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_5fserving_2fconfig_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto;
};
// -------------------------------------------------------------------

class FileSystemStoragePathSourceConfig_ServableToMonitor final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor) */ {
 public:
  inline FileSystemStoragePathSourceConfig_ServableToMonitor() : FileSystemStoragePathSourceConfig_ServableToMonitor(nullptr) {}
  ~FileSystemStoragePathSourceConfig_ServableToMonitor() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(FileSystemStoragePathSourceConfig_ServableToMonitor* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(FileSystemStoragePathSourceConfig_ServableToMonitor));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR FileSystemStoragePathSourceConfig_ServableToMonitor(
      ::google::protobuf::internal::ConstantInitialized);

  inline FileSystemStoragePathSourceConfig_ServableToMonitor(const FileSystemStoragePathSourceConfig_ServableToMonitor& from) : FileSystemStoragePathSourceConfig_ServableToMonitor(nullptr, from) {}
  inline FileSystemStoragePathSourceConfig_ServableToMonitor(FileSystemStoragePathSourceConfig_ServableToMonitor&& from) noexcept
      : FileSystemStoragePathSourceConfig_ServableToMonitor(nullptr, std::move(from)) {}
  inline FileSystemStoragePathSourceConfig_ServableToMonitor& operator=(const FileSystemStoragePathSourceConfig_ServableToMonitor& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileSystemStoragePathSourceConfig_ServableToMonitor& operator=(FileSystemStoragePathSourceConfig_ServableToMonitor&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FileSystemStoragePathSourceConfig_ServableToMonitor& default_instance() {
    return *internal_default_instance();
  }
  static inline const FileSystemStoragePathSourceConfig_ServableToMonitor* internal_default_instance() {
    return reinterpret_cast<const FileSystemStoragePathSourceConfig_ServableToMonitor*>(
        &_FileSystemStoragePathSourceConfig_ServableToMonitor_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(FileSystemStoragePathSourceConfig_ServableToMonitor& a, FileSystemStoragePathSourceConfig_ServableToMonitor& b) { a.Swap(&b); }
  inline void Swap(FileSystemStoragePathSourceConfig_ServableToMonitor* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileSystemStoragePathSourceConfig_ServableToMonitor* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FileSystemStoragePathSourceConfig_ServableToMonitor* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<FileSystemStoragePathSourceConfig_ServableToMonitor>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const FileSystemStoragePathSourceConfig_ServableToMonitor& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const FileSystemStoragePathSourceConfig_ServableToMonitor& from) { FileSystemStoragePathSourceConfig_ServableToMonitor::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(FileSystemStoragePathSourceConfig_ServableToMonitor* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor"; }

 protected:
  explicit FileSystemStoragePathSourceConfig_ServableToMonitor(::google::protobuf::Arena* arena);
  FileSystemStoragePathSourceConfig_ServableToMonitor(::google::protobuf::Arena* arena, const FileSystemStoragePathSourceConfig_ServableToMonitor& from);
  FileSystemStoragePathSourceConfig_ServableToMonitor(::google::protobuf::Arena* arena, FileSystemStoragePathSourceConfig_ServableToMonitor&& from) noexcept
      : FileSystemStoragePathSourceConfig_ServableToMonitor(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kServableNameFieldNumber = 1,
    kBasePathFieldNumber = 2,
    kServableVersionPolicyFieldNumber = 4,
  };
  // string servable_name = 1;
  void clear_servable_name() ;
  const std::string& servable_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_servable_name(Arg_&& arg, Args_... args);
  std::string* mutable_servable_name();
  PROTOBUF_NODISCARD std::string* release_servable_name();
  void set_allocated_servable_name(std::string* value);

  private:
  const std::string& _internal_servable_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_servable_name(
      const std::string& value);
  std::string* _internal_mutable_servable_name();

  public:
  // string base_path = 2;
  void clear_base_path() ;
  const std::string& base_path() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_base_path(Arg_&& arg, Args_... args);
  std::string* mutable_base_path();
  PROTOBUF_NODISCARD std::string* release_base_path();
  void set_allocated_base_path(std::string* value);

  private:
  const std::string& _internal_base_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_base_path(
      const std::string& value);
  std::string* _internal_mutable_base_path();

  public:
  // .tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy servable_version_policy = 4;
  bool has_servable_version_policy() const;
  void clear_servable_version_policy() ;
  const ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy& servable_version_policy() const;
  PROTOBUF_NODISCARD ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy* release_servable_version_policy();
  ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy* mutable_servable_version_policy();
  void set_allocated_servable_version_policy(::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy* value);
  void unsafe_arena_set_allocated_servable_version_policy(::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy* value);
  ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy* unsafe_arena_release_servable_version_policy();

  private:
  const ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy& _internal_servable_version_policy() const;
  ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy* _internal_mutable_servable_version_policy();

  public:
  // @@protoc_insertion_point(class_scope:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 1,
      101, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const FileSystemStoragePathSourceConfig_ServableToMonitor& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr servable_name_;
    ::google::protobuf::internal::ArenaStringPtr base_path_;
    ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy* servable_version_policy_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_5fserving_2fconfig_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto;
};
// -------------------------------------------------------------------

class FileSystemStoragePathSourceConfig final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tensorflow.serving.FileSystemStoragePathSourceConfig) */ {
 public:
  inline FileSystemStoragePathSourceConfig() : FileSystemStoragePathSourceConfig(nullptr) {}
  ~FileSystemStoragePathSourceConfig() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(FileSystemStoragePathSourceConfig* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(FileSystemStoragePathSourceConfig));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR FileSystemStoragePathSourceConfig(
      ::google::protobuf::internal::ConstantInitialized);

  inline FileSystemStoragePathSourceConfig(const FileSystemStoragePathSourceConfig& from) : FileSystemStoragePathSourceConfig(nullptr, from) {}
  inline FileSystemStoragePathSourceConfig(FileSystemStoragePathSourceConfig&& from) noexcept
      : FileSystemStoragePathSourceConfig(nullptr, std::move(from)) {}
  inline FileSystemStoragePathSourceConfig& operator=(const FileSystemStoragePathSourceConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileSystemStoragePathSourceConfig& operator=(FileSystemStoragePathSourceConfig&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FileSystemStoragePathSourceConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const FileSystemStoragePathSourceConfig* internal_default_instance() {
    return reinterpret_cast<const FileSystemStoragePathSourceConfig*>(
        &_FileSystemStoragePathSourceConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(FileSystemStoragePathSourceConfig& a, FileSystemStoragePathSourceConfig& b) { a.Swap(&b); }
  inline void Swap(FileSystemStoragePathSourceConfig* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileSystemStoragePathSourceConfig* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FileSystemStoragePathSourceConfig* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<FileSystemStoragePathSourceConfig>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const FileSystemStoragePathSourceConfig& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const FileSystemStoragePathSourceConfig& from) { FileSystemStoragePathSourceConfig::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(FileSystemStoragePathSourceConfig* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tensorflow.serving.FileSystemStoragePathSourceConfig"; }

 protected:
  explicit FileSystemStoragePathSourceConfig(::google::protobuf::Arena* arena);
  FileSystemStoragePathSourceConfig(::google::protobuf::Arena* arena, const FileSystemStoragePathSourceConfig& from);
  FileSystemStoragePathSourceConfig(::google::protobuf::Arena* arena, FileSystemStoragePathSourceConfig&& from) noexcept
      : FileSystemStoragePathSourceConfig(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using ServableVersionPolicy = FileSystemStoragePathSourceConfig_ServableVersionPolicy;
  using ServableToMonitor = FileSystemStoragePathSourceConfig_ServableToMonitor;

  // accessors -------------------------------------------------------
  enum : int {
    kServablesFieldNumber = 5,
    kFileSystemPollWaitSecondsFieldNumber = 3,
    kFailIfZeroVersionsAtStartupFieldNumber = 4,
    kServableVersionsAlwaysPresentFieldNumber = 6,
  };
  // repeated .tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor servables = 5;
  int servables_size() const;
  private:
  int _internal_servables_size() const;

  public:
  void clear_servables() ;
  ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableToMonitor* mutable_servables(int index);
  ::google::protobuf::RepeatedPtrField<::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableToMonitor>* mutable_servables();

  private:
  const ::google::protobuf::RepeatedPtrField<::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableToMonitor>& _internal_servables() const;
  ::google::protobuf::RepeatedPtrField<::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableToMonitor>* _internal_mutable_servables();
  public:
  const ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableToMonitor& servables(int index) const;
  ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableToMonitor* add_servables();
  const ::google::protobuf::RepeatedPtrField<::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableToMonitor>& servables() const;
  // int64 file_system_poll_wait_seconds = 3;
  void clear_file_system_poll_wait_seconds() ;
  ::int64_t file_system_poll_wait_seconds() const;
  void set_file_system_poll_wait_seconds(::int64_t value);

  private:
  ::int64_t _internal_file_system_poll_wait_seconds() const;
  void _internal_set_file_system_poll_wait_seconds(::int64_t value);

  public:
  // bool fail_if_zero_versions_at_startup = 4 [deprecated = true];
  [[deprecated]]  void clear_fail_if_zero_versions_at_startup() ;
  [[deprecated]] bool fail_if_zero_versions_at_startup() const;
  [[deprecated]] void set_fail_if_zero_versions_at_startup(bool value);

  private:
  bool _internal_fail_if_zero_versions_at_startup() const;
  void _internal_set_fail_if_zero_versions_at_startup(bool value);

  public:
  // bool servable_versions_always_present = 6;
  void clear_servable_versions_always_present() ;
  bool servable_versions_always_present() const;
  void set_servable_versions_always_present(bool value);

  private:
  bool _internal_servable_versions_always_present() const;
  void _internal_set_servable_versions_always_present(bool value);

  public:
  // @@protoc_insertion_point(class_scope:tensorflow.serving.FileSystemStoragePathSourceConfig)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const FileSystemStoragePathSourceConfig& from_msg);
    ::google::protobuf::RepeatedPtrField< ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableToMonitor > servables_;
    ::int64_t file_system_poll_wait_seconds_;
    bool fail_if_zero_versions_at_startup_;
    bool servable_versions_always_present_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_5fserving_2fconfig_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest

// uint32 num_versions = 1;
inline void FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest::clear_num_versions() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.num_versions_ = 0u;
}
inline ::uint32_t FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest::num_versions() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Latest.num_versions)
  return _internal_num_versions();
}
inline void FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest::set_num_versions(::uint32_t value) {
  _internal_set_num_versions(value);
  // @@protoc_insertion_point(field_set:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Latest.num_versions)
}
inline ::uint32_t FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest::_internal_num_versions() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.num_versions_;
}
inline void FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest::_internal_set_num_versions(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.num_versions_ = value;
}

// -------------------------------------------------------------------

// FileSystemStoragePathSourceConfig_ServableVersionPolicy_All

// -------------------------------------------------------------------

// FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific

// repeated int64 versions = 1;
inline int FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific::_internal_versions_size() const {
  return _internal_versions().size();
}
inline int FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific::versions_size() const {
  return _internal_versions_size();
}
inline void FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific::clear_versions() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.versions_.Clear();
}
inline ::int64_t FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific::versions(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Specific.versions)
  return _internal_versions().Get(index);
}
inline void FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific::set_versions(int index, ::int64_t value) {
  _internal_mutable_versions()->Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Specific.versions)
}
inline void FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific::add_versions(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_versions()->Add(value);
  // @@protoc_insertion_point(field_add:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Specific.versions)
}
inline const ::google::protobuf::RepeatedField<::int64_t>& FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific::versions() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Specific.versions)
  return _internal_versions();
}
inline ::google::protobuf::RepeatedField<::int64_t>* FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific::mutable_versions()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Specific.versions)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_versions();
}
inline const ::google::protobuf::RepeatedField<::int64_t>&
FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific::_internal_versions() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.versions_;
}
inline ::google::protobuf::RepeatedField<::int64_t>* FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific::_internal_mutable_versions() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.versions_;
}

// -------------------------------------------------------------------

// FileSystemStoragePathSourceConfig_ServableVersionPolicy

// .tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Latest latest = 100;
inline bool FileSystemStoragePathSourceConfig_ServableVersionPolicy::has_latest() const {
  return policy_choice_case() == kLatest;
}
inline bool FileSystemStoragePathSourceConfig_ServableVersionPolicy::_internal_has_latest() const {
  return policy_choice_case() == kLatest;
}
inline void FileSystemStoragePathSourceConfig_ServableVersionPolicy::set_has_latest() {
  _impl_._oneof_case_[0] = kLatest;
}
inline void FileSystemStoragePathSourceConfig_ServableVersionPolicy::clear_latest() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (policy_choice_case() == kLatest) {
    if (GetArena() == nullptr) {
      delete _impl_.policy_choice_.latest_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.policy_choice_.latest_);
    }
    clear_has_policy_choice();
  }
}
inline ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest* FileSystemStoragePathSourceConfig_ServableVersionPolicy::release_latest() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.latest)
  if (policy_choice_case() == kLatest) {
    clear_has_policy_choice();
    auto* temp = _impl_.policy_choice_.latest_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.policy_choice_.latest_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest& FileSystemStoragePathSourceConfig_ServableVersionPolicy::_internal_latest() const {
  return policy_choice_case() == kLatest ? *_impl_.policy_choice_.latest_ : reinterpret_cast<::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest&>(::tensorflow::serving::_FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest_default_instance_);
}
inline const ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest& FileSystemStoragePathSourceConfig_ServableVersionPolicy::latest() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.latest)
  return _internal_latest();
}
inline ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest* FileSystemStoragePathSourceConfig_ServableVersionPolicy::unsafe_arena_release_latest() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.latest)
  if (policy_choice_case() == kLatest) {
    clear_has_policy_choice();
    auto* temp = _impl_.policy_choice_.latest_;
    _impl_.policy_choice_.latest_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FileSystemStoragePathSourceConfig_ServableVersionPolicy::unsafe_arena_set_allocated_latest(::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_policy_choice();
  if (value) {
    set_has_latest();
    _impl_.policy_choice_.latest_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.latest)
}
inline ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest* FileSystemStoragePathSourceConfig_ServableVersionPolicy::_internal_mutable_latest() {
  if (policy_choice_case() != kLatest) {
    clear_policy_choice();
    set_has_latest();
    _impl_.policy_choice_.latest_ =
        ::google::protobuf::Message::DefaultConstruct<::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest>(GetArena());
  }
  return _impl_.policy_choice_.latest_;
}
inline ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest* FileSystemStoragePathSourceConfig_ServableVersionPolicy::mutable_latest() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest* _msg = _internal_mutable_latest();
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.latest)
  return _msg;
}

// .tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.All all = 101;
inline bool FileSystemStoragePathSourceConfig_ServableVersionPolicy::has_all() const {
  return policy_choice_case() == kAll;
}
inline bool FileSystemStoragePathSourceConfig_ServableVersionPolicy::_internal_has_all() const {
  return policy_choice_case() == kAll;
}
inline void FileSystemStoragePathSourceConfig_ServableVersionPolicy::set_has_all() {
  _impl_._oneof_case_[0] = kAll;
}
inline void FileSystemStoragePathSourceConfig_ServableVersionPolicy::clear_all() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (policy_choice_case() == kAll) {
    if (GetArena() == nullptr) {
      delete _impl_.policy_choice_.all_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.policy_choice_.all_);
    }
    clear_has_policy_choice();
  }
}
inline ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_All* FileSystemStoragePathSourceConfig_ServableVersionPolicy::release_all() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.all)
  if (policy_choice_case() == kAll) {
    clear_has_policy_choice();
    auto* temp = _impl_.policy_choice_.all_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.policy_choice_.all_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_All& FileSystemStoragePathSourceConfig_ServableVersionPolicy::_internal_all() const {
  return policy_choice_case() == kAll ? *_impl_.policy_choice_.all_ : reinterpret_cast<::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_All&>(::tensorflow::serving::_FileSystemStoragePathSourceConfig_ServableVersionPolicy_All_default_instance_);
}
inline const ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_All& FileSystemStoragePathSourceConfig_ServableVersionPolicy::all() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.all)
  return _internal_all();
}
inline ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_All* FileSystemStoragePathSourceConfig_ServableVersionPolicy::unsafe_arena_release_all() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.all)
  if (policy_choice_case() == kAll) {
    clear_has_policy_choice();
    auto* temp = _impl_.policy_choice_.all_;
    _impl_.policy_choice_.all_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FileSystemStoragePathSourceConfig_ServableVersionPolicy::unsafe_arena_set_allocated_all(::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_All* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_policy_choice();
  if (value) {
    set_has_all();
    _impl_.policy_choice_.all_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.all)
}
inline ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_All* FileSystemStoragePathSourceConfig_ServableVersionPolicy::_internal_mutable_all() {
  if (policy_choice_case() != kAll) {
    clear_policy_choice();
    set_has_all();
    _impl_.policy_choice_.all_ =
        ::google::protobuf::Message::DefaultConstruct<::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_All>(GetArena());
  }
  return _impl_.policy_choice_.all_;
}
inline ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_All* FileSystemStoragePathSourceConfig_ServableVersionPolicy::mutable_all() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_All* _msg = _internal_mutable_all();
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.all)
  return _msg;
}

// .tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Specific specific = 102;
inline bool FileSystemStoragePathSourceConfig_ServableVersionPolicy::has_specific() const {
  return policy_choice_case() == kSpecific;
}
inline bool FileSystemStoragePathSourceConfig_ServableVersionPolicy::_internal_has_specific() const {
  return policy_choice_case() == kSpecific;
}
inline void FileSystemStoragePathSourceConfig_ServableVersionPolicy::set_has_specific() {
  _impl_._oneof_case_[0] = kSpecific;
}
inline void FileSystemStoragePathSourceConfig_ServableVersionPolicy::clear_specific() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (policy_choice_case() == kSpecific) {
    if (GetArena() == nullptr) {
      delete _impl_.policy_choice_.specific_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.policy_choice_.specific_);
    }
    clear_has_policy_choice();
  }
}
inline ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific* FileSystemStoragePathSourceConfig_ServableVersionPolicy::release_specific() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.specific)
  if (policy_choice_case() == kSpecific) {
    clear_has_policy_choice();
    auto* temp = _impl_.policy_choice_.specific_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.policy_choice_.specific_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific& FileSystemStoragePathSourceConfig_ServableVersionPolicy::_internal_specific() const {
  return policy_choice_case() == kSpecific ? *_impl_.policy_choice_.specific_ : reinterpret_cast<::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific&>(::tensorflow::serving::_FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific_default_instance_);
}
inline const ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific& FileSystemStoragePathSourceConfig_ServableVersionPolicy::specific() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.specific)
  return _internal_specific();
}
inline ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific* FileSystemStoragePathSourceConfig_ServableVersionPolicy::unsafe_arena_release_specific() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.specific)
  if (policy_choice_case() == kSpecific) {
    clear_has_policy_choice();
    auto* temp = _impl_.policy_choice_.specific_;
    _impl_.policy_choice_.specific_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FileSystemStoragePathSourceConfig_ServableVersionPolicy::unsafe_arena_set_allocated_specific(::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_policy_choice();
  if (value) {
    set_has_specific();
    _impl_.policy_choice_.specific_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.specific)
}
inline ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific* FileSystemStoragePathSourceConfig_ServableVersionPolicy::_internal_mutable_specific() {
  if (policy_choice_case() != kSpecific) {
    clear_policy_choice();
    set_has_specific();
    _impl_.policy_choice_.specific_ =
        ::google::protobuf::Message::DefaultConstruct<::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific>(GetArena());
  }
  return _impl_.policy_choice_.specific_;
}
inline ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific* FileSystemStoragePathSourceConfig_ServableVersionPolicy::mutable_specific() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific* _msg = _internal_mutable_specific();
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.specific)
  return _msg;
}

inline bool FileSystemStoragePathSourceConfig_ServableVersionPolicy::has_policy_choice() const {
  return policy_choice_case() != POLICY_CHOICE_NOT_SET;
}
inline void FileSystemStoragePathSourceConfig_ServableVersionPolicy::clear_has_policy_choice() {
  _impl_._oneof_case_[0] = POLICY_CHOICE_NOT_SET;
}
inline FileSystemStoragePathSourceConfig_ServableVersionPolicy::PolicyChoiceCase FileSystemStoragePathSourceConfig_ServableVersionPolicy::policy_choice_case() const {
  return FileSystemStoragePathSourceConfig_ServableVersionPolicy::PolicyChoiceCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// FileSystemStoragePathSourceConfig_ServableToMonitor

// string servable_name = 1;
inline void FileSystemStoragePathSourceConfig_ServableToMonitor::clear_servable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.servable_name_.ClearToEmpty();
}
inline const std::string& FileSystemStoragePathSourceConfig_ServableToMonitor::servable_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor.servable_name)
  return _internal_servable_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FileSystemStoragePathSourceConfig_ServableToMonitor::set_servable_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.servable_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor.servable_name)
}
inline std::string* FileSystemStoragePathSourceConfig_ServableToMonitor::mutable_servable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_servable_name();
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor.servable_name)
  return _s;
}
inline const std::string& FileSystemStoragePathSourceConfig_ServableToMonitor::_internal_servable_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.servable_name_.Get();
}
inline void FileSystemStoragePathSourceConfig_ServableToMonitor::_internal_set_servable_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.servable_name_.Set(value, GetArena());
}
inline std::string* FileSystemStoragePathSourceConfig_ServableToMonitor::_internal_mutable_servable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.servable_name_.Mutable( GetArena());
}
inline std::string* FileSystemStoragePathSourceConfig_ServableToMonitor::release_servable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor.servable_name)
  return _impl_.servable_name_.Release();
}
inline void FileSystemStoragePathSourceConfig_ServableToMonitor::set_allocated_servable_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.servable_name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.servable_name_.IsDefault()) {
    _impl_.servable_name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor.servable_name)
}

// string base_path = 2;
inline void FileSystemStoragePathSourceConfig_ServableToMonitor::clear_base_path() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.base_path_.ClearToEmpty();
}
inline const std::string& FileSystemStoragePathSourceConfig_ServableToMonitor::base_path() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor.base_path)
  return _internal_base_path();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FileSystemStoragePathSourceConfig_ServableToMonitor::set_base_path(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.base_path_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor.base_path)
}
inline std::string* FileSystemStoragePathSourceConfig_ServableToMonitor::mutable_base_path() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_base_path();
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor.base_path)
  return _s;
}
inline const std::string& FileSystemStoragePathSourceConfig_ServableToMonitor::_internal_base_path() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.base_path_.Get();
}
inline void FileSystemStoragePathSourceConfig_ServableToMonitor::_internal_set_base_path(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.base_path_.Set(value, GetArena());
}
inline std::string* FileSystemStoragePathSourceConfig_ServableToMonitor::_internal_mutable_base_path() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.base_path_.Mutable( GetArena());
}
inline std::string* FileSystemStoragePathSourceConfig_ServableToMonitor::release_base_path() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor.base_path)
  return _impl_.base_path_.Release();
}
inline void FileSystemStoragePathSourceConfig_ServableToMonitor::set_allocated_base_path(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.base_path_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.base_path_.IsDefault()) {
    _impl_.base_path_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor.base_path)
}

// .tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy servable_version_policy = 4;
inline bool FileSystemStoragePathSourceConfig_ServableToMonitor::has_servable_version_policy() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.servable_version_policy_ != nullptr);
  return value;
}
inline void FileSystemStoragePathSourceConfig_ServableToMonitor::clear_servable_version_policy() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.servable_version_policy_ != nullptr) _impl_.servable_version_policy_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy& FileSystemStoragePathSourceConfig_ServableToMonitor::_internal_servable_version_policy() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy* p = _impl_.servable_version_policy_;
  return p != nullptr ? *p : reinterpret_cast<const ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy&>(::tensorflow::serving::_FileSystemStoragePathSourceConfig_ServableVersionPolicy_default_instance_);
}
inline const ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy& FileSystemStoragePathSourceConfig_ServableToMonitor::servable_version_policy() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor.servable_version_policy)
  return _internal_servable_version_policy();
}
inline void FileSystemStoragePathSourceConfig_ServableToMonitor::unsafe_arena_set_allocated_servable_version_policy(::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.servable_version_policy_);
  }
  _impl_.servable_version_policy_ = reinterpret_cast<::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor.servable_version_policy)
}
inline ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy* FileSystemStoragePathSourceConfig_ServableToMonitor::release_servable_version_policy() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy* released = _impl_.servable_version_policy_;
  _impl_.servable_version_policy_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy* FileSystemStoragePathSourceConfig_ServableToMonitor::unsafe_arena_release_servable_version_policy() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor.servable_version_policy)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy* temp = _impl_.servable_version_policy_;
  _impl_.servable_version_policy_ = nullptr;
  return temp;
}
inline ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy* FileSystemStoragePathSourceConfig_ServableToMonitor::_internal_mutable_servable_version_policy() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.servable_version_policy_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy>(GetArena());
    _impl_.servable_version_policy_ = reinterpret_cast<::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy*>(p);
  }
  return _impl_.servable_version_policy_;
}
inline ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy* FileSystemStoragePathSourceConfig_ServableToMonitor::mutable_servable_version_policy() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy* _msg = _internal_mutable_servable_version_policy();
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor.servable_version_policy)
  return _msg;
}
inline void FileSystemStoragePathSourceConfig_ServableToMonitor::set_allocated_servable_version_policy(::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.servable_version_policy_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.servable_version_policy_ = reinterpret_cast<::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy*>(value);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor.servable_version_policy)
}

// -------------------------------------------------------------------

// FileSystemStoragePathSourceConfig

// repeated .tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor servables = 5;
inline int FileSystemStoragePathSourceConfig::_internal_servables_size() const {
  return _internal_servables().size();
}
inline int FileSystemStoragePathSourceConfig::servables_size() const {
  return _internal_servables_size();
}
inline void FileSystemStoragePathSourceConfig::clear_servables() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.servables_.Clear();
}
inline ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableToMonitor* FileSystemStoragePathSourceConfig::mutable_servables(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.FileSystemStoragePathSourceConfig.servables)
  return _internal_mutable_servables()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableToMonitor>* FileSystemStoragePathSourceConfig::mutable_servables()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.serving.FileSystemStoragePathSourceConfig.servables)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_servables();
}
inline const ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableToMonitor& FileSystemStoragePathSourceConfig::servables(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.serving.FileSystemStoragePathSourceConfig.servables)
  return _internal_servables().Get(index);
}
inline ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableToMonitor* FileSystemStoragePathSourceConfig::add_servables() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableToMonitor* _add = _internal_mutable_servables()->Add();
  // @@protoc_insertion_point(field_add:tensorflow.serving.FileSystemStoragePathSourceConfig.servables)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableToMonitor>& FileSystemStoragePathSourceConfig::servables() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tensorflow.serving.FileSystemStoragePathSourceConfig.servables)
  return _internal_servables();
}
inline const ::google::protobuf::RepeatedPtrField<::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableToMonitor>&
FileSystemStoragePathSourceConfig::_internal_servables() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.servables_;
}
inline ::google::protobuf::RepeatedPtrField<::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableToMonitor>*
FileSystemStoragePathSourceConfig::_internal_mutable_servables() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.servables_;
}

// int64 file_system_poll_wait_seconds = 3;
inline void FileSystemStoragePathSourceConfig::clear_file_system_poll_wait_seconds() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.file_system_poll_wait_seconds_ = ::int64_t{0};
}
inline ::int64_t FileSystemStoragePathSourceConfig::file_system_poll_wait_seconds() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.FileSystemStoragePathSourceConfig.file_system_poll_wait_seconds)
  return _internal_file_system_poll_wait_seconds();
}
inline void FileSystemStoragePathSourceConfig::set_file_system_poll_wait_seconds(::int64_t value) {
  _internal_set_file_system_poll_wait_seconds(value);
  // @@protoc_insertion_point(field_set:tensorflow.serving.FileSystemStoragePathSourceConfig.file_system_poll_wait_seconds)
}
inline ::int64_t FileSystemStoragePathSourceConfig::_internal_file_system_poll_wait_seconds() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.file_system_poll_wait_seconds_;
}
inline void FileSystemStoragePathSourceConfig::_internal_set_file_system_poll_wait_seconds(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.file_system_poll_wait_seconds_ = value;
}

// bool fail_if_zero_versions_at_startup = 4 [deprecated = true];
inline void FileSystemStoragePathSourceConfig::clear_fail_if_zero_versions_at_startup() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.fail_if_zero_versions_at_startup_ = false;
}
inline bool FileSystemStoragePathSourceConfig::fail_if_zero_versions_at_startup() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.FileSystemStoragePathSourceConfig.fail_if_zero_versions_at_startup)
  return _internal_fail_if_zero_versions_at_startup();
}
inline void FileSystemStoragePathSourceConfig::set_fail_if_zero_versions_at_startup(bool value) {
  _internal_set_fail_if_zero_versions_at_startup(value);
  // @@protoc_insertion_point(field_set:tensorflow.serving.FileSystemStoragePathSourceConfig.fail_if_zero_versions_at_startup)
}
inline bool FileSystemStoragePathSourceConfig::_internal_fail_if_zero_versions_at_startup() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.fail_if_zero_versions_at_startup_;
}
inline void FileSystemStoragePathSourceConfig::_internal_set_fail_if_zero_versions_at_startup(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.fail_if_zero_versions_at_startup_ = value;
}

// bool servable_versions_always_present = 6;
inline void FileSystemStoragePathSourceConfig::clear_servable_versions_always_present() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.servable_versions_always_present_ = false;
}
inline bool FileSystemStoragePathSourceConfig::servable_versions_always_present() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.FileSystemStoragePathSourceConfig.servable_versions_always_present)
  return _internal_servable_versions_always_present();
}
inline void FileSystemStoragePathSourceConfig::set_servable_versions_always_present(bool value) {
  _internal_set_servable_versions_always_present(value);
  // @@protoc_insertion_point(field_set:tensorflow.serving.FileSystemStoragePathSourceConfig.servable_versions_always_present)
}
inline bool FileSystemStoragePathSourceConfig::_internal_servable_versions_always_present() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.servable_versions_always_present_;
}
inline void FileSystemStoragePathSourceConfig::_internal_set_servable_versions_always_present(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.servable_versions_always_present_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace serving
}  // namespace tensorflow


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // tensorflow_5fserving_2fconfig_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto_2epb_2eh
