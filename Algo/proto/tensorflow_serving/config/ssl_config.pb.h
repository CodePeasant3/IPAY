// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: tensorflow_serving/config/ssl_config.proto
// Protobuf C++ Version: 5.29.0

#ifndef tensorflow_5fserving_2fconfig_2fssl_5fconfig_2eproto_2epb_2eh
#define tensorflow_5fserving_2fconfig_2fssl_5fconfig_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_tensorflow_5fserving_2fconfig_2fssl_5fconfig_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_tensorflow_5fserving_2fconfig_2fssl_5fconfig_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_tensorflow_5fserving_2fconfig_2fssl_5fconfig_2eproto;
namespace tensorflow {
namespace serving {
class SSLConfig;
struct SSLConfigDefaultTypeInternal;
extern SSLConfigDefaultTypeInternal _SSLConfig_default_instance_;
}  // namespace serving
}  // namespace tensorflow
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace tensorflow {
namespace serving {

// ===================================================================


// -------------------------------------------------------------------

class SSLConfig final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tensorflow.serving.SSLConfig) */ {
 public:
  inline SSLConfig() : SSLConfig(nullptr) {}
  ~SSLConfig() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SSLConfig* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SSLConfig));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SSLConfig(
      ::google::protobuf::internal::ConstantInitialized);

  inline SSLConfig(const SSLConfig& from) : SSLConfig(nullptr, from) {}
  inline SSLConfig(SSLConfig&& from) noexcept
      : SSLConfig(nullptr, std::move(from)) {}
  inline SSLConfig& operator=(const SSLConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline SSLConfig& operator=(SSLConfig&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SSLConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const SSLConfig* internal_default_instance() {
    return reinterpret_cast<const SSLConfig*>(
        &_SSLConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(SSLConfig& a, SSLConfig& b) { a.Swap(&b); }
  inline void Swap(SSLConfig* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SSLConfig* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SSLConfig* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SSLConfig>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SSLConfig& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SSLConfig& from) { SSLConfig::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SSLConfig* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tensorflow.serving.SSLConfig"; }

 protected:
  explicit SSLConfig(::google::protobuf::Arena* arena);
  SSLConfig(::google::protobuf::Arena* arena, const SSLConfig& from);
  SSLConfig(::google::protobuf::Arena* arena, SSLConfig&& from) noexcept
      : SSLConfig(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kServerKeyFieldNumber = 1,
    kServerCertFieldNumber = 2,
    kCustomCaFieldNumber = 3,
    kClientVerifyFieldNumber = 4,
  };
  // string server_key = 1;
  void clear_server_key() ;
  const std::string& server_key() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_server_key(Arg_&& arg, Args_... args);
  std::string* mutable_server_key();
  PROTOBUF_NODISCARD std::string* release_server_key();
  void set_allocated_server_key(std::string* value);

  private:
  const std::string& _internal_server_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_server_key(
      const std::string& value);
  std::string* _internal_mutable_server_key();

  public:
  // string server_cert = 2;
  void clear_server_cert() ;
  const std::string& server_cert() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_server_cert(Arg_&& arg, Args_... args);
  std::string* mutable_server_cert();
  PROTOBUF_NODISCARD std::string* release_server_cert();
  void set_allocated_server_cert(std::string* value);

  private:
  const std::string& _internal_server_cert() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_server_cert(
      const std::string& value);
  std::string* _internal_mutable_server_cert();

  public:
  // string custom_ca = 3;
  void clear_custom_ca() ;
  const std::string& custom_ca() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_custom_ca(Arg_&& arg, Args_... args);
  std::string* mutable_custom_ca();
  PROTOBUF_NODISCARD std::string* release_custom_ca();
  void set_allocated_custom_ca(std::string* value);

  private:
  const std::string& _internal_custom_ca() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_custom_ca(
      const std::string& value);
  std::string* _internal_mutable_custom_ca();

  public:
  // bool client_verify = 4;
  void clear_client_verify() ;
  bool client_verify() const;
  void set_client_verify(bool value);

  private:
  bool _internal_client_verify() const;
  void _internal_set_client_verify(bool value);

  public:
  // @@protoc_insertion_point(class_scope:tensorflow.serving.SSLConfig)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      67, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SSLConfig& from_msg);
    ::google::protobuf::internal::ArenaStringPtr server_key_;
    ::google::protobuf::internal::ArenaStringPtr server_cert_;
    ::google::protobuf::internal::ArenaStringPtr custom_ca_;
    bool client_verify_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_5fserving_2fconfig_2fssl_5fconfig_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// SSLConfig

// string server_key = 1;
inline void SSLConfig::clear_server_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.server_key_.ClearToEmpty();
}
inline const std::string& SSLConfig::server_key() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.serving.SSLConfig.server_key)
  return _internal_server_key();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SSLConfig::set_server_key(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.server_key_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tensorflow.serving.SSLConfig.server_key)
}
inline std::string* SSLConfig::mutable_server_key() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_server_key();
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.SSLConfig.server_key)
  return _s;
}
inline const std::string& SSLConfig::_internal_server_key() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.server_key_.Get();
}
inline void SSLConfig::_internal_set_server_key(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.server_key_.Set(value, GetArena());
}
inline std::string* SSLConfig::_internal_mutable_server_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.server_key_.Mutable( GetArena());
}
inline std::string* SSLConfig::release_server_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.serving.SSLConfig.server_key)
  return _impl_.server_key_.Release();
}
inline void SSLConfig::set_allocated_server_key(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.server_key_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.server_key_.IsDefault()) {
    _impl_.server_key_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.SSLConfig.server_key)
}

// string server_cert = 2;
inline void SSLConfig::clear_server_cert() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.server_cert_.ClearToEmpty();
}
inline const std::string& SSLConfig::server_cert() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.serving.SSLConfig.server_cert)
  return _internal_server_cert();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SSLConfig::set_server_cert(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.server_cert_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tensorflow.serving.SSLConfig.server_cert)
}
inline std::string* SSLConfig::mutable_server_cert() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_server_cert();
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.SSLConfig.server_cert)
  return _s;
}
inline const std::string& SSLConfig::_internal_server_cert() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.server_cert_.Get();
}
inline void SSLConfig::_internal_set_server_cert(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.server_cert_.Set(value, GetArena());
}
inline std::string* SSLConfig::_internal_mutable_server_cert() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.server_cert_.Mutable( GetArena());
}
inline std::string* SSLConfig::release_server_cert() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.serving.SSLConfig.server_cert)
  return _impl_.server_cert_.Release();
}
inline void SSLConfig::set_allocated_server_cert(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.server_cert_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.server_cert_.IsDefault()) {
    _impl_.server_cert_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.SSLConfig.server_cert)
}

// string custom_ca = 3;
inline void SSLConfig::clear_custom_ca() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.custom_ca_.ClearToEmpty();
}
inline const std::string& SSLConfig::custom_ca() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.serving.SSLConfig.custom_ca)
  return _internal_custom_ca();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SSLConfig::set_custom_ca(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.custom_ca_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tensorflow.serving.SSLConfig.custom_ca)
}
inline std::string* SSLConfig::mutable_custom_ca() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_custom_ca();
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.SSLConfig.custom_ca)
  return _s;
}
inline const std::string& SSLConfig::_internal_custom_ca() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.custom_ca_.Get();
}
inline void SSLConfig::_internal_set_custom_ca(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.custom_ca_.Set(value, GetArena());
}
inline std::string* SSLConfig::_internal_mutable_custom_ca() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.custom_ca_.Mutable( GetArena());
}
inline std::string* SSLConfig::release_custom_ca() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.serving.SSLConfig.custom_ca)
  return _impl_.custom_ca_.Release();
}
inline void SSLConfig::set_allocated_custom_ca(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.custom_ca_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.custom_ca_.IsDefault()) {
    _impl_.custom_ca_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.SSLConfig.custom_ca)
}

// bool client_verify = 4;
inline void SSLConfig::clear_client_verify() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.client_verify_ = false;
}
inline bool SSLConfig::client_verify() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.SSLConfig.client_verify)
  return _internal_client_verify();
}
inline void SSLConfig::set_client_verify(bool value) {
  _internal_set_client_verify(value);
  // @@protoc_insertion_point(field_set:tensorflow.serving.SSLConfig.client_verify)
}
inline bool SSLConfig::_internal_client_verify() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.client_verify_;
}
inline void SSLConfig::_internal_set_client_verify(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.client_verify_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace serving
}  // namespace tensorflow


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // tensorflow_5fserving_2fconfig_2fssl_5fconfig_2eproto_2epb_2eh
