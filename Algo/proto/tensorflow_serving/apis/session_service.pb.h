// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: tensorflow_serving/apis/session_service.proto
// Protobuf C++ Version: 5.29.0

#ifndef tensorflow_5fserving_2fapis_2fsession_5fservice_2eproto_2epb_2eh
#define tensorflow_5fserving_2fapis_2fsession_5fservice_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "tensorflow/core/protobuf/config.pb.h"
#include "tensorflow/core/protobuf/named_tensor.pb.h"
#include "tensorflow_serving/apis/model.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_tensorflow_5fserving_2fapis_2fsession_5fservice_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_tensorflow_5fserving_2fapis_2fsession_5fservice_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_tensorflow_5fserving_2fapis_2fsession_5fservice_2eproto;
namespace tensorflow {
namespace serving {
class SessionRunRequest;
struct SessionRunRequestDefaultTypeInternal;
extern SessionRunRequestDefaultTypeInternal _SessionRunRequest_default_instance_;
class SessionRunResponse;
struct SessionRunResponseDefaultTypeInternal;
extern SessionRunResponseDefaultTypeInternal _SessionRunResponse_default_instance_;
}  // namespace serving
}  // namespace tensorflow
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace tensorflow {
namespace serving {

// ===================================================================


// -------------------------------------------------------------------

class SessionRunRequest final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tensorflow.serving.SessionRunRequest) */ {
 public:
  inline SessionRunRequest() : SessionRunRequest(nullptr) {}
  ~SessionRunRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SessionRunRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SessionRunRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SessionRunRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline SessionRunRequest(const SessionRunRequest& from) : SessionRunRequest(nullptr, from) {}
  inline SessionRunRequest(SessionRunRequest&& from) noexcept
      : SessionRunRequest(nullptr, std::move(from)) {}
  inline SessionRunRequest& operator=(const SessionRunRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SessionRunRequest& operator=(SessionRunRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SessionRunRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SessionRunRequest* internal_default_instance() {
    return reinterpret_cast<const SessionRunRequest*>(
        &_SessionRunRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(SessionRunRequest& a, SessionRunRequest& b) { a.Swap(&b); }
  inline void Swap(SessionRunRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SessionRunRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SessionRunRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SessionRunRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SessionRunRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SessionRunRequest& from) { SessionRunRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SessionRunRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tensorflow.serving.SessionRunRequest"; }

 protected:
  explicit SessionRunRequest(::google::protobuf::Arena* arena);
  SessionRunRequest(::google::protobuf::Arena* arena, const SessionRunRequest& from);
  SessionRunRequest(::google::protobuf::Arena* arena, SessionRunRequest&& from) noexcept
      : SessionRunRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kFeedFieldNumber = 2,
    kFetchFieldNumber = 3,
    kTargetFieldNumber = 4,
    kModelSpecFieldNumber = 1,
    kOptionsFieldNumber = 5,
    kTensorNameIsAliasFieldNumber = 6,
  };
  // repeated .tensorflow.NamedTensorProto feed = 2;
  int feed_size() const;
  private:
  int _internal_feed_size() const;

  public:
  void clear_feed() ;
  ::tensorflow::NamedTensorProto* mutable_feed(int index);
  ::google::protobuf::RepeatedPtrField<::tensorflow::NamedTensorProto>* mutable_feed();

  private:
  const ::google::protobuf::RepeatedPtrField<::tensorflow::NamedTensorProto>& _internal_feed() const;
  ::google::protobuf::RepeatedPtrField<::tensorflow::NamedTensorProto>* _internal_mutable_feed();
  public:
  const ::tensorflow::NamedTensorProto& feed(int index) const;
  ::tensorflow::NamedTensorProto* add_feed();
  const ::google::protobuf::RepeatedPtrField<::tensorflow::NamedTensorProto>& feed() const;
  // repeated string fetch = 3;
  int fetch_size() const;
  private:
  int _internal_fetch_size() const;

  public:
  void clear_fetch() ;
  const std::string& fetch(int index) const;
  std::string* mutable_fetch(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_fetch(int index, Arg_&& value, Args_... args);
  std::string* add_fetch();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_fetch(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& fetch() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_fetch();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_fetch() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_fetch();

  public:
  // repeated string target = 4;
  int target_size() const;
  private:
  int _internal_target_size() const;

  public:
  void clear_target() ;
  const std::string& target(int index) const;
  std::string* mutable_target(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_target(int index, Arg_&& value, Args_... args);
  std::string* add_target();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_target(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& target() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_target();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_target() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_target();

  public:
  // .tensorflow.serving.ModelSpec model_spec = 1;
  bool has_model_spec() const;
  void clear_model_spec() ;
  const ::tensorflow::serving::ModelSpec& model_spec() const;
  PROTOBUF_NODISCARD ::tensorflow::serving::ModelSpec* release_model_spec();
  ::tensorflow::serving::ModelSpec* mutable_model_spec();
  void set_allocated_model_spec(::tensorflow::serving::ModelSpec* value);
  void unsafe_arena_set_allocated_model_spec(::tensorflow::serving::ModelSpec* value);
  ::tensorflow::serving::ModelSpec* unsafe_arena_release_model_spec();

  private:
  const ::tensorflow::serving::ModelSpec& _internal_model_spec() const;
  ::tensorflow::serving::ModelSpec* _internal_mutable_model_spec();

  public:
  // .tensorflow.RunOptions options = 5;
  bool has_options() const;
  void clear_options() ;
  const ::tensorflow::RunOptions& options() const;
  PROTOBUF_NODISCARD ::tensorflow::RunOptions* release_options();
  ::tensorflow::RunOptions* mutable_options();
  void set_allocated_options(::tensorflow::RunOptions* value);
  void unsafe_arena_set_allocated_options(::tensorflow::RunOptions* value);
  ::tensorflow::RunOptions* unsafe_arena_release_options();

  private:
  const ::tensorflow::RunOptions& _internal_options() const;
  ::tensorflow::RunOptions* _internal_mutable_options();

  public:
  // bool tensor_name_is_alias = 6;
  void clear_tensor_name_is_alias() ;
  bool tensor_name_is_alias() const;
  void set_tensor_name_is_alias(bool value);

  private:
  bool _internal_tensor_name_is_alias() const;
  void _internal_set_tensor_name_is_alias(bool value);

  public:
  // @@protoc_insertion_point(class_scope:tensorflow.serving.SessionRunRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 3,
      56, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SessionRunRequest& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::tensorflow::NamedTensorProto > feed_;
    ::google::protobuf::RepeatedPtrField<std::string> fetch_;
    ::google::protobuf::RepeatedPtrField<std::string> target_;
    ::tensorflow::serving::ModelSpec* model_spec_;
    ::tensorflow::RunOptions* options_;
    bool tensor_name_is_alias_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_5fserving_2fapis_2fsession_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SessionRunResponse final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tensorflow.serving.SessionRunResponse) */ {
 public:
  inline SessionRunResponse() : SessionRunResponse(nullptr) {}
  ~SessionRunResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SessionRunResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SessionRunResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SessionRunResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline SessionRunResponse(const SessionRunResponse& from) : SessionRunResponse(nullptr, from) {}
  inline SessionRunResponse(SessionRunResponse&& from) noexcept
      : SessionRunResponse(nullptr, std::move(from)) {}
  inline SessionRunResponse& operator=(const SessionRunResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SessionRunResponse& operator=(SessionRunResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SessionRunResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SessionRunResponse* internal_default_instance() {
    return reinterpret_cast<const SessionRunResponse*>(
        &_SessionRunResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(SessionRunResponse& a, SessionRunResponse& b) { a.Swap(&b); }
  inline void Swap(SessionRunResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SessionRunResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SessionRunResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SessionRunResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SessionRunResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SessionRunResponse& from) { SessionRunResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SessionRunResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tensorflow.serving.SessionRunResponse"; }

 protected:
  explicit SessionRunResponse(::google::protobuf::Arena* arena);
  SessionRunResponse(::google::protobuf::Arena* arena, const SessionRunResponse& from);
  SessionRunResponse(::google::protobuf::Arena* arena, SessionRunResponse&& from) noexcept
      : SessionRunResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTensorFieldNumber = 1,
    kMetadataFieldNumber = 2,
    kModelSpecFieldNumber = 3,
  };
  // repeated .tensorflow.NamedTensorProto tensor = 1;
  int tensor_size() const;
  private:
  int _internal_tensor_size() const;

  public:
  void clear_tensor() ;
  ::tensorflow::NamedTensorProto* mutable_tensor(int index);
  ::google::protobuf::RepeatedPtrField<::tensorflow::NamedTensorProto>* mutable_tensor();

  private:
  const ::google::protobuf::RepeatedPtrField<::tensorflow::NamedTensorProto>& _internal_tensor() const;
  ::google::protobuf::RepeatedPtrField<::tensorflow::NamedTensorProto>* _internal_mutable_tensor();
  public:
  const ::tensorflow::NamedTensorProto& tensor(int index) const;
  ::tensorflow::NamedTensorProto* add_tensor();
  const ::google::protobuf::RepeatedPtrField<::tensorflow::NamedTensorProto>& tensor() const;
  // .tensorflow.RunMetadata metadata = 2;
  bool has_metadata() const;
  void clear_metadata() ;
  const ::tensorflow::RunMetadata& metadata() const;
  PROTOBUF_NODISCARD ::tensorflow::RunMetadata* release_metadata();
  ::tensorflow::RunMetadata* mutable_metadata();
  void set_allocated_metadata(::tensorflow::RunMetadata* value);
  void unsafe_arena_set_allocated_metadata(::tensorflow::RunMetadata* value);
  ::tensorflow::RunMetadata* unsafe_arena_release_metadata();

  private:
  const ::tensorflow::RunMetadata& _internal_metadata() const;
  ::tensorflow::RunMetadata* _internal_mutable_metadata();

  public:
  // .tensorflow.serving.ModelSpec model_spec = 3;
  bool has_model_spec() const;
  void clear_model_spec() ;
  const ::tensorflow::serving::ModelSpec& model_spec() const;
  PROTOBUF_NODISCARD ::tensorflow::serving::ModelSpec* release_model_spec();
  ::tensorflow::serving::ModelSpec* mutable_model_spec();
  void set_allocated_model_spec(::tensorflow::serving::ModelSpec* value);
  void unsafe_arena_set_allocated_model_spec(::tensorflow::serving::ModelSpec* value);
  ::tensorflow::serving::ModelSpec* unsafe_arena_release_model_spec();

  private:
  const ::tensorflow::serving::ModelSpec& _internal_model_spec() const;
  ::tensorflow::serving::ModelSpec* _internal_mutable_model_spec();

  public:
  // @@protoc_insertion_point(class_scope:tensorflow.serving.SessionRunResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 3,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SessionRunResponse& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::tensorflow::NamedTensorProto > tensor_;
    ::tensorflow::RunMetadata* metadata_;
    ::tensorflow::serving::ModelSpec* model_spec_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_5fserving_2fapis_2fsession_5fservice_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// SessionRunRequest

// .tensorflow.serving.ModelSpec model_spec = 1;
inline bool SessionRunRequest::has_model_spec() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.model_spec_ != nullptr);
  return value;
}
inline const ::tensorflow::serving::ModelSpec& SessionRunRequest::_internal_model_spec() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tensorflow::serving::ModelSpec* p = _impl_.model_spec_;
  return p != nullptr ? *p : reinterpret_cast<const ::tensorflow::serving::ModelSpec&>(::tensorflow::serving::_ModelSpec_default_instance_);
}
inline const ::tensorflow::serving::ModelSpec& SessionRunRequest::model_spec() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.serving.SessionRunRequest.model_spec)
  return _internal_model_spec();
}
inline void SessionRunRequest::unsafe_arena_set_allocated_model_spec(::tensorflow::serving::ModelSpec* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.model_spec_);
  }
  _impl_.model_spec_ = reinterpret_cast<::tensorflow::serving::ModelSpec*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.serving.SessionRunRequest.model_spec)
}
inline ::tensorflow::serving::ModelSpec* SessionRunRequest::release_model_spec() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tensorflow::serving::ModelSpec* released = _impl_.model_spec_;
  _impl_.model_spec_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::tensorflow::serving::ModelSpec* SessionRunRequest::unsafe_arena_release_model_spec() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.serving.SessionRunRequest.model_spec)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tensorflow::serving::ModelSpec* temp = _impl_.model_spec_;
  _impl_.model_spec_ = nullptr;
  return temp;
}
inline ::tensorflow::serving::ModelSpec* SessionRunRequest::_internal_mutable_model_spec() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.model_spec_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tensorflow::serving::ModelSpec>(GetArena());
    _impl_.model_spec_ = reinterpret_cast<::tensorflow::serving::ModelSpec*>(p);
  }
  return _impl_.model_spec_;
}
inline ::tensorflow::serving::ModelSpec* SessionRunRequest::mutable_model_spec() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::tensorflow::serving::ModelSpec* _msg = _internal_mutable_model_spec();
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.SessionRunRequest.model_spec)
  return _msg;
}
inline void SessionRunRequest::set_allocated_model_spec(::tensorflow::serving::ModelSpec* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.model_spec_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.model_spec_ = reinterpret_cast<::tensorflow::serving::ModelSpec*>(value);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.SessionRunRequest.model_spec)
}

// repeated .tensorflow.NamedTensorProto feed = 2;
inline int SessionRunRequest::_internal_feed_size() const {
  return _internal_feed().size();
}
inline int SessionRunRequest::feed_size() const {
  return _internal_feed_size();
}
inline ::tensorflow::NamedTensorProto* SessionRunRequest::mutable_feed(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.SessionRunRequest.feed)
  return _internal_mutable_feed()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::tensorflow::NamedTensorProto>* SessionRunRequest::mutable_feed()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.serving.SessionRunRequest.feed)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_feed();
}
inline const ::tensorflow::NamedTensorProto& SessionRunRequest::feed(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.serving.SessionRunRequest.feed)
  return _internal_feed().Get(index);
}
inline ::tensorflow::NamedTensorProto* SessionRunRequest::add_feed() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::tensorflow::NamedTensorProto* _add = _internal_mutable_feed()->Add();
  // @@protoc_insertion_point(field_add:tensorflow.serving.SessionRunRequest.feed)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::tensorflow::NamedTensorProto>& SessionRunRequest::feed() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tensorflow.serving.SessionRunRequest.feed)
  return _internal_feed();
}
inline const ::google::protobuf::RepeatedPtrField<::tensorflow::NamedTensorProto>&
SessionRunRequest::_internal_feed() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.feed_;
}
inline ::google::protobuf::RepeatedPtrField<::tensorflow::NamedTensorProto>*
SessionRunRequest::_internal_mutable_feed() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.feed_;
}

// repeated string fetch = 3;
inline int SessionRunRequest::_internal_fetch_size() const {
  return _internal_fetch().size();
}
inline int SessionRunRequest::fetch_size() const {
  return _internal_fetch_size();
}
inline void SessionRunRequest::clear_fetch() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.fetch_.Clear();
}
inline std::string* SessionRunRequest::add_fetch() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_fetch()->Add();
  // @@protoc_insertion_point(field_add_mutable:tensorflow.serving.SessionRunRequest.fetch)
  return _s;
}
inline const std::string& SessionRunRequest::fetch(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.serving.SessionRunRequest.fetch)
  return _internal_fetch().Get(index);
}
inline std::string* SessionRunRequest::mutable_fetch(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.SessionRunRequest.fetch)
  return _internal_mutable_fetch()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void SessionRunRequest::set_fetch(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_fetch()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:tensorflow.serving.SessionRunRequest.fetch)
}
template <typename Arg_, typename... Args_>
inline void SessionRunRequest::add_fetch(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_fetch(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:tensorflow.serving.SessionRunRequest.fetch)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
SessionRunRequest::fetch() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tensorflow.serving.SessionRunRequest.fetch)
  return _internal_fetch();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
SessionRunRequest::mutable_fetch() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.serving.SessionRunRequest.fetch)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_fetch();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
SessionRunRequest::_internal_fetch() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.fetch_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
SessionRunRequest::_internal_mutable_fetch() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.fetch_;
}

// repeated string target = 4;
inline int SessionRunRequest::_internal_target_size() const {
  return _internal_target().size();
}
inline int SessionRunRequest::target_size() const {
  return _internal_target_size();
}
inline void SessionRunRequest::clear_target() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.target_.Clear();
}
inline std::string* SessionRunRequest::add_target() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_target()->Add();
  // @@protoc_insertion_point(field_add_mutable:tensorflow.serving.SessionRunRequest.target)
  return _s;
}
inline const std::string& SessionRunRequest::target(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.serving.SessionRunRequest.target)
  return _internal_target().Get(index);
}
inline std::string* SessionRunRequest::mutable_target(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.SessionRunRequest.target)
  return _internal_mutable_target()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void SessionRunRequest::set_target(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_target()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:tensorflow.serving.SessionRunRequest.target)
}
template <typename Arg_, typename... Args_>
inline void SessionRunRequest::add_target(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_target(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:tensorflow.serving.SessionRunRequest.target)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
SessionRunRequest::target() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tensorflow.serving.SessionRunRequest.target)
  return _internal_target();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
SessionRunRequest::mutable_target() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.serving.SessionRunRequest.target)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_target();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
SessionRunRequest::_internal_target() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.target_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
SessionRunRequest::_internal_mutable_target() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.target_;
}

// bool tensor_name_is_alias = 6;
inline void SessionRunRequest::clear_tensor_name_is_alias() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.tensor_name_is_alias_ = false;
}
inline bool SessionRunRequest::tensor_name_is_alias() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.SessionRunRequest.tensor_name_is_alias)
  return _internal_tensor_name_is_alias();
}
inline void SessionRunRequest::set_tensor_name_is_alias(bool value) {
  _internal_set_tensor_name_is_alias(value);
  // @@protoc_insertion_point(field_set:tensorflow.serving.SessionRunRequest.tensor_name_is_alias)
}
inline bool SessionRunRequest::_internal_tensor_name_is_alias() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.tensor_name_is_alias_;
}
inline void SessionRunRequest::_internal_set_tensor_name_is_alias(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.tensor_name_is_alias_ = value;
}

// .tensorflow.RunOptions options = 5;
inline bool SessionRunRequest::has_options() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.options_ != nullptr);
  return value;
}
inline const ::tensorflow::RunOptions& SessionRunRequest::_internal_options() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tensorflow::RunOptions* p = _impl_.options_;
  return p != nullptr ? *p : reinterpret_cast<const ::tensorflow::RunOptions&>(::tensorflow::_RunOptions_default_instance_);
}
inline const ::tensorflow::RunOptions& SessionRunRequest::options() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.serving.SessionRunRequest.options)
  return _internal_options();
}
inline void SessionRunRequest::unsafe_arena_set_allocated_options(::tensorflow::RunOptions* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.options_);
  }
  _impl_.options_ = reinterpret_cast<::tensorflow::RunOptions*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.serving.SessionRunRequest.options)
}
inline ::tensorflow::RunOptions* SessionRunRequest::release_options() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tensorflow::RunOptions* released = _impl_.options_;
  _impl_.options_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::tensorflow::RunOptions* SessionRunRequest::unsafe_arena_release_options() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.serving.SessionRunRequest.options)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tensorflow::RunOptions* temp = _impl_.options_;
  _impl_.options_ = nullptr;
  return temp;
}
inline ::tensorflow::RunOptions* SessionRunRequest::_internal_mutable_options() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.options_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tensorflow::RunOptions>(GetArena());
    _impl_.options_ = reinterpret_cast<::tensorflow::RunOptions*>(p);
  }
  return _impl_.options_;
}
inline ::tensorflow::RunOptions* SessionRunRequest::mutable_options() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::tensorflow::RunOptions* _msg = _internal_mutable_options();
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.SessionRunRequest.options)
  return _msg;
}
inline void SessionRunRequest::set_allocated_options(::tensorflow::RunOptions* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.options_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.options_ = reinterpret_cast<::tensorflow::RunOptions*>(value);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.SessionRunRequest.options)
}

// -------------------------------------------------------------------

// SessionRunResponse

// .tensorflow.serving.ModelSpec model_spec = 3;
inline bool SessionRunResponse::has_model_spec() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.model_spec_ != nullptr);
  return value;
}
inline const ::tensorflow::serving::ModelSpec& SessionRunResponse::_internal_model_spec() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tensorflow::serving::ModelSpec* p = _impl_.model_spec_;
  return p != nullptr ? *p : reinterpret_cast<const ::tensorflow::serving::ModelSpec&>(::tensorflow::serving::_ModelSpec_default_instance_);
}
inline const ::tensorflow::serving::ModelSpec& SessionRunResponse::model_spec() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.serving.SessionRunResponse.model_spec)
  return _internal_model_spec();
}
inline void SessionRunResponse::unsafe_arena_set_allocated_model_spec(::tensorflow::serving::ModelSpec* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.model_spec_);
  }
  _impl_.model_spec_ = reinterpret_cast<::tensorflow::serving::ModelSpec*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.serving.SessionRunResponse.model_spec)
}
inline ::tensorflow::serving::ModelSpec* SessionRunResponse::release_model_spec() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tensorflow::serving::ModelSpec* released = _impl_.model_spec_;
  _impl_.model_spec_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::tensorflow::serving::ModelSpec* SessionRunResponse::unsafe_arena_release_model_spec() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.serving.SessionRunResponse.model_spec)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tensorflow::serving::ModelSpec* temp = _impl_.model_spec_;
  _impl_.model_spec_ = nullptr;
  return temp;
}
inline ::tensorflow::serving::ModelSpec* SessionRunResponse::_internal_mutable_model_spec() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.model_spec_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tensorflow::serving::ModelSpec>(GetArena());
    _impl_.model_spec_ = reinterpret_cast<::tensorflow::serving::ModelSpec*>(p);
  }
  return _impl_.model_spec_;
}
inline ::tensorflow::serving::ModelSpec* SessionRunResponse::mutable_model_spec() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::tensorflow::serving::ModelSpec* _msg = _internal_mutable_model_spec();
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.SessionRunResponse.model_spec)
  return _msg;
}
inline void SessionRunResponse::set_allocated_model_spec(::tensorflow::serving::ModelSpec* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.model_spec_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.model_spec_ = reinterpret_cast<::tensorflow::serving::ModelSpec*>(value);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.SessionRunResponse.model_spec)
}

// repeated .tensorflow.NamedTensorProto tensor = 1;
inline int SessionRunResponse::_internal_tensor_size() const {
  return _internal_tensor().size();
}
inline int SessionRunResponse::tensor_size() const {
  return _internal_tensor_size();
}
inline ::tensorflow::NamedTensorProto* SessionRunResponse::mutable_tensor(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.SessionRunResponse.tensor)
  return _internal_mutable_tensor()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::tensorflow::NamedTensorProto>* SessionRunResponse::mutable_tensor()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.serving.SessionRunResponse.tensor)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_tensor();
}
inline const ::tensorflow::NamedTensorProto& SessionRunResponse::tensor(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.serving.SessionRunResponse.tensor)
  return _internal_tensor().Get(index);
}
inline ::tensorflow::NamedTensorProto* SessionRunResponse::add_tensor() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::tensorflow::NamedTensorProto* _add = _internal_mutable_tensor()->Add();
  // @@protoc_insertion_point(field_add:tensorflow.serving.SessionRunResponse.tensor)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::tensorflow::NamedTensorProto>& SessionRunResponse::tensor() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tensorflow.serving.SessionRunResponse.tensor)
  return _internal_tensor();
}
inline const ::google::protobuf::RepeatedPtrField<::tensorflow::NamedTensorProto>&
SessionRunResponse::_internal_tensor() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.tensor_;
}
inline ::google::protobuf::RepeatedPtrField<::tensorflow::NamedTensorProto>*
SessionRunResponse::_internal_mutable_tensor() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.tensor_;
}

// .tensorflow.RunMetadata metadata = 2;
inline bool SessionRunResponse::has_metadata() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.metadata_ != nullptr);
  return value;
}
inline const ::tensorflow::RunMetadata& SessionRunResponse::_internal_metadata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tensorflow::RunMetadata* p = _impl_.metadata_;
  return p != nullptr ? *p : reinterpret_cast<const ::tensorflow::RunMetadata&>(::tensorflow::_RunMetadata_default_instance_);
}
inline const ::tensorflow::RunMetadata& SessionRunResponse::metadata() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.serving.SessionRunResponse.metadata)
  return _internal_metadata();
}
inline void SessionRunResponse::unsafe_arena_set_allocated_metadata(::tensorflow::RunMetadata* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.metadata_);
  }
  _impl_.metadata_ = reinterpret_cast<::tensorflow::RunMetadata*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.serving.SessionRunResponse.metadata)
}
inline ::tensorflow::RunMetadata* SessionRunResponse::release_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tensorflow::RunMetadata* released = _impl_.metadata_;
  _impl_.metadata_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::tensorflow::RunMetadata* SessionRunResponse::unsafe_arena_release_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.serving.SessionRunResponse.metadata)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tensorflow::RunMetadata* temp = _impl_.metadata_;
  _impl_.metadata_ = nullptr;
  return temp;
}
inline ::tensorflow::RunMetadata* SessionRunResponse::_internal_mutable_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.metadata_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tensorflow::RunMetadata>(GetArena());
    _impl_.metadata_ = reinterpret_cast<::tensorflow::RunMetadata*>(p);
  }
  return _impl_.metadata_;
}
inline ::tensorflow::RunMetadata* SessionRunResponse::mutable_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::tensorflow::RunMetadata* _msg = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.SessionRunResponse.metadata)
  return _msg;
}
inline void SessionRunResponse::set_allocated_metadata(::tensorflow::RunMetadata* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.metadata_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.metadata_ = reinterpret_cast<::tensorflow::RunMetadata*>(value);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.SessionRunResponse.metadata)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace serving
}  // namespace tensorflow


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // tensorflow_5fserving_2fapis_2fsession_5fservice_2eproto_2epb_2eh
