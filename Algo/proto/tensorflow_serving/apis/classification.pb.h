// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: tensorflow_serving/apis/classification.proto
// Protobuf C++ Version: 5.29.0

#ifndef tensorflow_5fserving_2fapis_2fclassification_2eproto_2epb_2eh
#define tensorflow_5fserving_2fapis_2fclassification_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "tensorflow_serving/apis/input.pb.h"
#include "tensorflow_serving/apis/model.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_tensorflow_5fserving_2fapis_2fclassification_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_tensorflow_5fserving_2fapis_2fclassification_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_tensorflow_5fserving_2fapis_2fclassification_2eproto;
namespace tensorflow {
namespace serving {
class Class;
struct ClassDefaultTypeInternal;
extern ClassDefaultTypeInternal _Class_default_instance_;
class ClassificationRequest;
struct ClassificationRequestDefaultTypeInternal;
extern ClassificationRequestDefaultTypeInternal _ClassificationRequest_default_instance_;
class ClassificationResponse;
struct ClassificationResponseDefaultTypeInternal;
extern ClassificationResponseDefaultTypeInternal _ClassificationResponse_default_instance_;
class ClassificationResult;
struct ClassificationResultDefaultTypeInternal;
extern ClassificationResultDefaultTypeInternal _ClassificationResult_default_instance_;
class Classifications;
struct ClassificationsDefaultTypeInternal;
extern ClassificationsDefaultTypeInternal _Classifications_default_instance_;
}  // namespace serving
}  // namespace tensorflow
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace tensorflow {
namespace serving {

// ===================================================================


// -------------------------------------------------------------------

class Class final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tensorflow.serving.Class) */ {
 public:
  inline Class() : Class(nullptr) {}
  ~Class() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Class* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Class));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Class(
      ::google::protobuf::internal::ConstantInitialized);

  inline Class(const Class& from) : Class(nullptr, from) {}
  inline Class(Class&& from) noexcept
      : Class(nullptr, std::move(from)) {}
  inline Class& operator=(const Class& from) {
    CopyFrom(from);
    return *this;
  }
  inline Class& operator=(Class&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Class& default_instance() {
    return *internal_default_instance();
  }
  static inline const Class* internal_default_instance() {
    return reinterpret_cast<const Class*>(
        &_Class_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(Class& a, Class& b) { a.Swap(&b); }
  inline void Swap(Class* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Class* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Class* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Class>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Class& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Class& from) { Class::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Class* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tensorflow.serving.Class"; }

 protected:
  explicit Class(::google::protobuf::Arena* arena);
  Class(::google::protobuf::Arena* arena, const Class& from);
  Class(::google::protobuf::Arena* arena, Class&& from) noexcept
      : Class(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kLabelFieldNumber = 1,
    kScoreFieldNumber = 2,
  };
  // string label = 1;
  void clear_label() ;
  const std::string& label() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_label(Arg_&& arg, Args_... args);
  std::string* mutable_label();
  PROTOBUF_NODISCARD std::string* release_label();
  void set_allocated_label(std::string* value);

  private:
  const std::string& _internal_label() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_label(
      const std::string& value);
  std::string* _internal_mutable_label();

  public:
  // float score = 2;
  void clear_score() ;
  float score() const;
  void set_score(float value);

  private:
  float _internal_score() const;
  void _internal_set_score(float value);

  public:
  // @@protoc_insertion_point(class_scope:tensorflow.serving.Class)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      38, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Class& from_msg);
    ::google::protobuf::internal::ArenaStringPtr label_;
    float score_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_5fserving_2fapis_2fclassification_2eproto;
};
// -------------------------------------------------------------------

class Classifications final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tensorflow.serving.Classifications) */ {
 public:
  inline Classifications() : Classifications(nullptr) {}
  ~Classifications() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Classifications* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Classifications));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Classifications(
      ::google::protobuf::internal::ConstantInitialized);

  inline Classifications(const Classifications& from) : Classifications(nullptr, from) {}
  inline Classifications(Classifications&& from) noexcept
      : Classifications(nullptr, std::move(from)) {}
  inline Classifications& operator=(const Classifications& from) {
    CopyFrom(from);
    return *this;
  }
  inline Classifications& operator=(Classifications&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Classifications& default_instance() {
    return *internal_default_instance();
  }
  static inline const Classifications* internal_default_instance() {
    return reinterpret_cast<const Classifications*>(
        &_Classifications_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(Classifications& a, Classifications& b) { a.Swap(&b); }
  inline void Swap(Classifications* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Classifications* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Classifications* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Classifications>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Classifications& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Classifications& from) { Classifications::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Classifications* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tensorflow.serving.Classifications"; }

 protected:
  explicit Classifications(::google::protobuf::Arena* arena);
  Classifications(::google::protobuf::Arena* arena, const Classifications& from);
  Classifications(::google::protobuf::Arena* arena, Classifications&& from) noexcept
      : Classifications(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kClassesFieldNumber = 1,
  };
  // repeated .tensorflow.serving.Class classes = 1;
  int classes_size() const;
  private:
  int _internal_classes_size() const;

  public:
  void clear_classes() ;
  ::tensorflow::serving::Class* mutable_classes(int index);
  ::google::protobuf::RepeatedPtrField<::tensorflow::serving::Class>* mutable_classes();

  private:
  const ::google::protobuf::RepeatedPtrField<::tensorflow::serving::Class>& _internal_classes() const;
  ::google::protobuf::RepeatedPtrField<::tensorflow::serving::Class>* _internal_mutable_classes();
  public:
  const ::tensorflow::serving::Class& classes(int index) const;
  ::tensorflow::serving::Class* add_classes();
  const ::google::protobuf::RepeatedPtrField<::tensorflow::serving::Class>& classes() const;
  // @@protoc_insertion_point(class_scope:tensorflow.serving.Classifications)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Classifications& from_msg);
    ::google::protobuf::RepeatedPtrField< ::tensorflow::serving::Class > classes_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_5fserving_2fapis_2fclassification_2eproto;
};
// -------------------------------------------------------------------

class ClassificationResult final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tensorflow.serving.ClassificationResult) */ {
 public:
  inline ClassificationResult() : ClassificationResult(nullptr) {}
  ~ClassificationResult() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ClassificationResult* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ClassificationResult));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ClassificationResult(
      ::google::protobuf::internal::ConstantInitialized);

  inline ClassificationResult(const ClassificationResult& from) : ClassificationResult(nullptr, from) {}
  inline ClassificationResult(ClassificationResult&& from) noexcept
      : ClassificationResult(nullptr, std::move(from)) {}
  inline ClassificationResult& operator=(const ClassificationResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClassificationResult& operator=(ClassificationResult&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClassificationResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClassificationResult* internal_default_instance() {
    return reinterpret_cast<const ClassificationResult*>(
        &_ClassificationResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(ClassificationResult& a, ClassificationResult& b) { a.Swap(&b); }
  inline void Swap(ClassificationResult* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClassificationResult* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClassificationResult* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ClassificationResult>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ClassificationResult& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ClassificationResult& from) { ClassificationResult::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ClassificationResult* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tensorflow.serving.ClassificationResult"; }

 protected:
  explicit ClassificationResult(::google::protobuf::Arena* arena);
  ClassificationResult(::google::protobuf::Arena* arena, const ClassificationResult& from);
  ClassificationResult(::google::protobuf::Arena* arena, ClassificationResult&& from) noexcept
      : ClassificationResult(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kClassificationsFieldNumber = 1,
  };
  // repeated .tensorflow.serving.Classifications classifications = 1;
  int classifications_size() const;
  private:
  int _internal_classifications_size() const;

  public:
  void clear_classifications() ;
  ::tensorflow::serving::Classifications* mutable_classifications(int index);
  ::google::protobuf::RepeatedPtrField<::tensorflow::serving::Classifications>* mutable_classifications();

  private:
  const ::google::protobuf::RepeatedPtrField<::tensorflow::serving::Classifications>& _internal_classifications() const;
  ::google::protobuf::RepeatedPtrField<::tensorflow::serving::Classifications>* _internal_mutable_classifications();
  public:
  const ::tensorflow::serving::Classifications& classifications(int index) const;
  ::tensorflow::serving::Classifications* add_classifications();
  const ::google::protobuf::RepeatedPtrField<::tensorflow::serving::Classifications>& classifications() const;
  // @@protoc_insertion_point(class_scope:tensorflow.serving.ClassificationResult)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ClassificationResult& from_msg);
    ::google::protobuf::RepeatedPtrField< ::tensorflow::serving::Classifications > classifications_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_5fserving_2fapis_2fclassification_2eproto;
};
// -------------------------------------------------------------------

class ClassificationResponse final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tensorflow.serving.ClassificationResponse) */ {
 public:
  inline ClassificationResponse() : ClassificationResponse(nullptr) {}
  ~ClassificationResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ClassificationResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ClassificationResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ClassificationResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline ClassificationResponse(const ClassificationResponse& from) : ClassificationResponse(nullptr, from) {}
  inline ClassificationResponse(ClassificationResponse&& from) noexcept
      : ClassificationResponse(nullptr, std::move(from)) {}
  inline ClassificationResponse& operator=(const ClassificationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClassificationResponse& operator=(ClassificationResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClassificationResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClassificationResponse* internal_default_instance() {
    return reinterpret_cast<const ClassificationResponse*>(
        &_ClassificationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(ClassificationResponse& a, ClassificationResponse& b) { a.Swap(&b); }
  inline void Swap(ClassificationResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClassificationResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClassificationResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ClassificationResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ClassificationResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ClassificationResponse& from) { ClassificationResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ClassificationResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tensorflow.serving.ClassificationResponse"; }

 protected:
  explicit ClassificationResponse(::google::protobuf::Arena* arena);
  ClassificationResponse(::google::protobuf::Arena* arena, const ClassificationResponse& from);
  ClassificationResponse(::google::protobuf::Arena* arena, ClassificationResponse&& from) noexcept
      : ClassificationResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kResultFieldNumber = 1,
    kModelSpecFieldNumber = 2,
  };
  // .tensorflow.serving.ClassificationResult result = 1;
  bool has_result() const;
  void clear_result() ;
  const ::tensorflow::serving::ClassificationResult& result() const;
  PROTOBUF_NODISCARD ::tensorflow::serving::ClassificationResult* release_result();
  ::tensorflow::serving::ClassificationResult* mutable_result();
  void set_allocated_result(::tensorflow::serving::ClassificationResult* value);
  void unsafe_arena_set_allocated_result(::tensorflow::serving::ClassificationResult* value);
  ::tensorflow::serving::ClassificationResult* unsafe_arena_release_result();

  private:
  const ::tensorflow::serving::ClassificationResult& _internal_result() const;
  ::tensorflow::serving::ClassificationResult* _internal_mutable_result();

  public:
  // .tensorflow.serving.ModelSpec model_spec = 2;
  bool has_model_spec() const;
  void clear_model_spec() ;
  const ::tensorflow::serving::ModelSpec& model_spec() const;
  PROTOBUF_NODISCARD ::tensorflow::serving::ModelSpec* release_model_spec();
  ::tensorflow::serving::ModelSpec* mutable_model_spec();
  void set_allocated_model_spec(::tensorflow::serving::ModelSpec* value);
  void unsafe_arena_set_allocated_model_spec(::tensorflow::serving::ModelSpec* value);
  ::tensorflow::serving::ModelSpec* unsafe_arena_release_model_spec();

  private:
  const ::tensorflow::serving::ModelSpec& _internal_model_spec() const;
  ::tensorflow::serving::ModelSpec* _internal_mutable_model_spec();

  public:
  // @@protoc_insertion_point(class_scope:tensorflow.serving.ClassificationResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 2,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ClassificationResponse& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::tensorflow::serving::ClassificationResult* result_;
    ::tensorflow::serving::ModelSpec* model_spec_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_5fserving_2fapis_2fclassification_2eproto;
};
// -------------------------------------------------------------------

class ClassificationRequest final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tensorflow.serving.ClassificationRequest) */ {
 public:
  inline ClassificationRequest() : ClassificationRequest(nullptr) {}
  ~ClassificationRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ClassificationRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ClassificationRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ClassificationRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline ClassificationRequest(const ClassificationRequest& from) : ClassificationRequest(nullptr, from) {}
  inline ClassificationRequest(ClassificationRequest&& from) noexcept
      : ClassificationRequest(nullptr, std::move(from)) {}
  inline ClassificationRequest& operator=(const ClassificationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClassificationRequest& operator=(ClassificationRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClassificationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClassificationRequest* internal_default_instance() {
    return reinterpret_cast<const ClassificationRequest*>(
        &_ClassificationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(ClassificationRequest& a, ClassificationRequest& b) { a.Swap(&b); }
  inline void Swap(ClassificationRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClassificationRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClassificationRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ClassificationRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ClassificationRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ClassificationRequest& from) { ClassificationRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ClassificationRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tensorflow.serving.ClassificationRequest"; }

 protected:
  explicit ClassificationRequest(::google::protobuf::Arena* arena);
  ClassificationRequest(::google::protobuf::Arena* arena, const ClassificationRequest& from);
  ClassificationRequest(::google::protobuf::Arena* arena, ClassificationRequest&& from) noexcept
      : ClassificationRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kModelSpecFieldNumber = 1,
    kInputFieldNumber = 2,
  };
  // .tensorflow.serving.ModelSpec model_spec = 1;
  bool has_model_spec() const;
  void clear_model_spec() ;
  const ::tensorflow::serving::ModelSpec& model_spec() const;
  PROTOBUF_NODISCARD ::tensorflow::serving::ModelSpec* release_model_spec();
  ::tensorflow::serving::ModelSpec* mutable_model_spec();
  void set_allocated_model_spec(::tensorflow::serving::ModelSpec* value);
  void unsafe_arena_set_allocated_model_spec(::tensorflow::serving::ModelSpec* value);
  ::tensorflow::serving::ModelSpec* unsafe_arena_release_model_spec();

  private:
  const ::tensorflow::serving::ModelSpec& _internal_model_spec() const;
  ::tensorflow::serving::ModelSpec* _internal_mutable_model_spec();

  public:
  // .tensorflow.serving.Input input = 2;
  bool has_input() const;
  void clear_input() ;
  const ::tensorflow::serving::Input& input() const;
  PROTOBUF_NODISCARD ::tensorflow::serving::Input* release_input();
  ::tensorflow::serving::Input* mutable_input();
  void set_allocated_input(::tensorflow::serving::Input* value);
  void unsafe_arena_set_allocated_input(::tensorflow::serving::Input* value);
  ::tensorflow::serving::Input* unsafe_arena_release_input();

  private:
  const ::tensorflow::serving::Input& _internal_input() const;
  ::tensorflow::serving::Input* _internal_mutable_input();

  public:
  // @@protoc_insertion_point(class_scope:tensorflow.serving.ClassificationRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 2,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ClassificationRequest& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::tensorflow::serving::ModelSpec* model_spec_;
    ::tensorflow::serving::Input* input_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_5fserving_2fapis_2fclassification_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Class

// string label = 1;
inline void Class::clear_label() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.label_.ClearToEmpty();
}
inline const std::string& Class::label() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.serving.Class.label)
  return _internal_label();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Class::set_label(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.label_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tensorflow.serving.Class.label)
}
inline std::string* Class::mutable_label() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_label();
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.Class.label)
  return _s;
}
inline const std::string& Class::_internal_label() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.label_.Get();
}
inline void Class::_internal_set_label(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.label_.Set(value, GetArena());
}
inline std::string* Class::_internal_mutable_label() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.label_.Mutable( GetArena());
}
inline std::string* Class::release_label() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.serving.Class.label)
  return _impl_.label_.Release();
}
inline void Class::set_allocated_label(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.label_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.label_.IsDefault()) {
    _impl_.label_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.Class.label)
}

// float score = 2;
inline void Class::clear_score() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.score_ = 0;
}
inline float Class::score() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.Class.score)
  return _internal_score();
}
inline void Class::set_score(float value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:tensorflow.serving.Class.score)
}
inline float Class::_internal_score() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.score_;
}
inline void Class::_internal_set_score(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.score_ = value;
}

// -------------------------------------------------------------------

// Classifications

// repeated .tensorflow.serving.Class classes = 1;
inline int Classifications::_internal_classes_size() const {
  return _internal_classes().size();
}
inline int Classifications::classes_size() const {
  return _internal_classes_size();
}
inline void Classifications::clear_classes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.classes_.Clear();
}
inline ::tensorflow::serving::Class* Classifications::mutable_classes(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.Classifications.classes)
  return _internal_mutable_classes()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::tensorflow::serving::Class>* Classifications::mutable_classes()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.serving.Classifications.classes)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_classes();
}
inline const ::tensorflow::serving::Class& Classifications::classes(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.serving.Classifications.classes)
  return _internal_classes().Get(index);
}
inline ::tensorflow::serving::Class* Classifications::add_classes() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::tensorflow::serving::Class* _add = _internal_mutable_classes()->Add();
  // @@protoc_insertion_point(field_add:tensorflow.serving.Classifications.classes)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::tensorflow::serving::Class>& Classifications::classes() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tensorflow.serving.Classifications.classes)
  return _internal_classes();
}
inline const ::google::protobuf::RepeatedPtrField<::tensorflow::serving::Class>&
Classifications::_internal_classes() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.classes_;
}
inline ::google::protobuf::RepeatedPtrField<::tensorflow::serving::Class>*
Classifications::_internal_mutable_classes() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.classes_;
}

// -------------------------------------------------------------------

// ClassificationResult

// repeated .tensorflow.serving.Classifications classifications = 1;
inline int ClassificationResult::_internal_classifications_size() const {
  return _internal_classifications().size();
}
inline int ClassificationResult::classifications_size() const {
  return _internal_classifications_size();
}
inline void ClassificationResult::clear_classifications() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.classifications_.Clear();
}
inline ::tensorflow::serving::Classifications* ClassificationResult::mutable_classifications(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.ClassificationResult.classifications)
  return _internal_mutable_classifications()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::tensorflow::serving::Classifications>* ClassificationResult::mutable_classifications()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.serving.ClassificationResult.classifications)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_classifications();
}
inline const ::tensorflow::serving::Classifications& ClassificationResult::classifications(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.serving.ClassificationResult.classifications)
  return _internal_classifications().Get(index);
}
inline ::tensorflow::serving::Classifications* ClassificationResult::add_classifications() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::tensorflow::serving::Classifications* _add = _internal_mutable_classifications()->Add();
  // @@protoc_insertion_point(field_add:tensorflow.serving.ClassificationResult.classifications)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::tensorflow::serving::Classifications>& ClassificationResult::classifications() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tensorflow.serving.ClassificationResult.classifications)
  return _internal_classifications();
}
inline const ::google::protobuf::RepeatedPtrField<::tensorflow::serving::Classifications>&
ClassificationResult::_internal_classifications() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.classifications_;
}
inline ::google::protobuf::RepeatedPtrField<::tensorflow::serving::Classifications>*
ClassificationResult::_internal_mutable_classifications() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.classifications_;
}

// -------------------------------------------------------------------

// ClassificationRequest

// .tensorflow.serving.ModelSpec model_spec = 1;
inline bool ClassificationRequest::has_model_spec() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.model_spec_ != nullptr);
  return value;
}
inline const ::tensorflow::serving::ModelSpec& ClassificationRequest::_internal_model_spec() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tensorflow::serving::ModelSpec* p = _impl_.model_spec_;
  return p != nullptr ? *p : reinterpret_cast<const ::tensorflow::serving::ModelSpec&>(::tensorflow::serving::_ModelSpec_default_instance_);
}
inline const ::tensorflow::serving::ModelSpec& ClassificationRequest::model_spec() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.serving.ClassificationRequest.model_spec)
  return _internal_model_spec();
}
inline void ClassificationRequest::unsafe_arena_set_allocated_model_spec(::tensorflow::serving::ModelSpec* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.model_spec_);
  }
  _impl_.model_spec_ = reinterpret_cast<::tensorflow::serving::ModelSpec*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.serving.ClassificationRequest.model_spec)
}
inline ::tensorflow::serving::ModelSpec* ClassificationRequest::release_model_spec() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tensorflow::serving::ModelSpec* released = _impl_.model_spec_;
  _impl_.model_spec_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::tensorflow::serving::ModelSpec* ClassificationRequest::unsafe_arena_release_model_spec() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.serving.ClassificationRequest.model_spec)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tensorflow::serving::ModelSpec* temp = _impl_.model_spec_;
  _impl_.model_spec_ = nullptr;
  return temp;
}
inline ::tensorflow::serving::ModelSpec* ClassificationRequest::_internal_mutable_model_spec() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.model_spec_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tensorflow::serving::ModelSpec>(GetArena());
    _impl_.model_spec_ = reinterpret_cast<::tensorflow::serving::ModelSpec*>(p);
  }
  return _impl_.model_spec_;
}
inline ::tensorflow::serving::ModelSpec* ClassificationRequest::mutable_model_spec() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::tensorflow::serving::ModelSpec* _msg = _internal_mutable_model_spec();
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.ClassificationRequest.model_spec)
  return _msg;
}
inline void ClassificationRequest::set_allocated_model_spec(::tensorflow::serving::ModelSpec* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.model_spec_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.model_spec_ = reinterpret_cast<::tensorflow::serving::ModelSpec*>(value);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.ClassificationRequest.model_spec)
}

// .tensorflow.serving.Input input = 2;
inline bool ClassificationRequest::has_input() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.input_ != nullptr);
  return value;
}
inline const ::tensorflow::serving::Input& ClassificationRequest::_internal_input() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tensorflow::serving::Input* p = _impl_.input_;
  return p != nullptr ? *p : reinterpret_cast<const ::tensorflow::serving::Input&>(::tensorflow::serving::_Input_default_instance_);
}
inline const ::tensorflow::serving::Input& ClassificationRequest::input() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.serving.ClassificationRequest.input)
  return _internal_input();
}
inline void ClassificationRequest::unsafe_arena_set_allocated_input(::tensorflow::serving::Input* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.input_);
  }
  _impl_.input_ = reinterpret_cast<::tensorflow::serving::Input*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.serving.ClassificationRequest.input)
}
inline ::tensorflow::serving::Input* ClassificationRequest::release_input() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tensorflow::serving::Input* released = _impl_.input_;
  _impl_.input_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::tensorflow::serving::Input* ClassificationRequest::unsafe_arena_release_input() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.serving.ClassificationRequest.input)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tensorflow::serving::Input* temp = _impl_.input_;
  _impl_.input_ = nullptr;
  return temp;
}
inline ::tensorflow::serving::Input* ClassificationRequest::_internal_mutable_input() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.input_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tensorflow::serving::Input>(GetArena());
    _impl_.input_ = reinterpret_cast<::tensorflow::serving::Input*>(p);
  }
  return _impl_.input_;
}
inline ::tensorflow::serving::Input* ClassificationRequest::mutable_input() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::tensorflow::serving::Input* _msg = _internal_mutable_input();
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.ClassificationRequest.input)
  return _msg;
}
inline void ClassificationRequest::set_allocated_input(::tensorflow::serving::Input* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.input_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.input_ = reinterpret_cast<::tensorflow::serving::Input*>(value);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.ClassificationRequest.input)
}

// -------------------------------------------------------------------

// ClassificationResponse

// .tensorflow.serving.ModelSpec model_spec = 2;
inline bool ClassificationResponse::has_model_spec() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.model_spec_ != nullptr);
  return value;
}
inline const ::tensorflow::serving::ModelSpec& ClassificationResponse::_internal_model_spec() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tensorflow::serving::ModelSpec* p = _impl_.model_spec_;
  return p != nullptr ? *p : reinterpret_cast<const ::tensorflow::serving::ModelSpec&>(::tensorflow::serving::_ModelSpec_default_instance_);
}
inline const ::tensorflow::serving::ModelSpec& ClassificationResponse::model_spec() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.serving.ClassificationResponse.model_spec)
  return _internal_model_spec();
}
inline void ClassificationResponse::unsafe_arena_set_allocated_model_spec(::tensorflow::serving::ModelSpec* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.model_spec_);
  }
  _impl_.model_spec_ = reinterpret_cast<::tensorflow::serving::ModelSpec*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.serving.ClassificationResponse.model_spec)
}
inline ::tensorflow::serving::ModelSpec* ClassificationResponse::release_model_spec() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tensorflow::serving::ModelSpec* released = _impl_.model_spec_;
  _impl_.model_spec_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::tensorflow::serving::ModelSpec* ClassificationResponse::unsafe_arena_release_model_spec() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.serving.ClassificationResponse.model_spec)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tensorflow::serving::ModelSpec* temp = _impl_.model_spec_;
  _impl_.model_spec_ = nullptr;
  return temp;
}
inline ::tensorflow::serving::ModelSpec* ClassificationResponse::_internal_mutable_model_spec() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.model_spec_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tensorflow::serving::ModelSpec>(GetArena());
    _impl_.model_spec_ = reinterpret_cast<::tensorflow::serving::ModelSpec*>(p);
  }
  return _impl_.model_spec_;
}
inline ::tensorflow::serving::ModelSpec* ClassificationResponse::mutable_model_spec() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::tensorflow::serving::ModelSpec* _msg = _internal_mutable_model_spec();
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.ClassificationResponse.model_spec)
  return _msg;
}
inline void ClassificationResponse::set_allocated_model_spec(::tensorflow::serving::ModelSpec* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.model_spec_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.model_spec_ = reinterpret_cast<::tensorflow::serving::ModelSpec*>(value);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.ClassificationResponse.model_spec)
}

// .tensorflow.serving.ClassificationResult result = 1;
inline bool ClassificationResponse::has_result() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.result_ != nullptr);
  return value;
}
inline void ClassificationResponse::clear_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.result_ != nullptr) _impl_.result_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::tensorflow::serving::ClassificationResult& ClassificationResponse::_internal_result() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tensorflow::serving::ClassificationResult* p = _impl_.result_;
  return p != nullptr ? *p : reinterpret_cast<const ::tensorflow::serving::ClassificationResult&>(::tensorflow::serving::_ClassificationResult_default_instance_);
}
inline const ::tensorflow::serving::ClassificationResult& ClassificationResponse::result() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.serving.ClassificationResponse.result)
  return _internal_result();
}
inline void ClassificationResponse::unsafe_arena_set_allocated_result(::tensorflow::serving::ClassificationResult* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.result_);
  }
  _impl_.result_ = reinterpret_cast<::tensorflow::serving::ClassificationResult*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.serving.ClassificationResponse.result)
}
inline ::tensorflow::serving::ClassificationResult* ClassificationResponse::release_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tensorflow::serving::ClassificationResult* released = _impl_.result_;
  _impl_.result_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::tensorflow::serving::ClassificationResult* ClassificationResponse::unsafe_arena_release_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.serving.ClassificationResponse.result)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tensorflow::serving::ClassificationResult* temp = _impl_.result_;
  _impl_.result_ = nullptr;
  return temp;
}
inline ::tensorflow::serving::ClassificationResult* ClassificationResponse::_internal_mutable_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.result_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tensorflow::serving::ClassificationResult>(GetArena());
    _impl_.result_ = reinterpret_cast<::tensorflow::serving::ClassificationResult*>(p);
  }
  return _impl_.result_;
}
inline ::tensorflow::serving::ClassificationResult* ClassificationResponse::mutable_result() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::tensorflow::serving::ClassificationResult* _msg = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.ClassificationResponse.result)
  return _msg;
}
inline void ClassificationResponse::set_allocated_result(::tensorflow::serving::ClassificationResult* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.result_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.result_ = reinterpret_cast<::tensorflow::serving::ClassificationResult*>(value);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.ClassificationResponse.result)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace serving
}  // namespace tensorflow


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // tensorflow_5fserving_2fapis_2fclassification_2eproto_2epb_2eh
