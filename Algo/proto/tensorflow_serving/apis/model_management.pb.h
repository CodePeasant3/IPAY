// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: tensorflow_serving/apis/model_management.proto
// Protobuf C++ Version: 5.29.0

#ifndef tensorflow_5fserving_2fapis_2fmodel_5fmanagement_2eproto_2epb_2eh
#define tensorflow_5fserving_2fapis_2fmodel_5fmanagement_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "tensorflow_serving/apis/status.pb.h"
#include "tensorflow_serving/config/model_server_config.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_tensorflow_5fserving_2fapis_2fmodel_5fmanagement_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_tensorflow_5fserving_2fapis_2fmodel_5fmanagement_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_tensorflow_5fserving_2fapis_2fmodel_5fmanagement_2eproto;
namespace tensorflow {
namespace serving {
class Metric;
struct MetricDefaultTypeInternal;
extern MetricDefaultTypeInternal _Metric_default_instance_;
class ReloadConfigRequest;
struct ReloadConfigRequestDefaultTypeInternal;
extern ReloadConfigRequestDefaultTypeInternal _ReloadConfigRequest_default_instance_;
class ReloadConfigResponse;
struct ReloadConfigResponseDefaultTypeInternal;
extern ReloadConfigResponseDefaultTypeInternal _ReloadConfigResponse_default_instance_;
}  // namespace serving
}  // namespace tensorflow
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace tensorflow {
namespace serving {

// ===================================================================


// -------------------------------------------------------------------

class Metric final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tensorflow.serving.Metric) */ {
 public:
  inline Metric() : Metric(nullptr) {}
  ~Metric() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Metric* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Metric));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Metric(
      ::google::protobuf::internal::ConstantInitialized);

  inline Metric(const Metric& from) : Metric(nullptr, from) {}
  inline Metric(Metric&& from) noexcept
      : Metric(nullptr, std::move(from)) {}
  inline Metric& operator=(const Metric& from) {
    CopyFrom(from);
    return *this;
  }
  inline Metric& operator=(Metric&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Metric& default_instance() {
    return *internal_default_instance();
  }
  enum ValueIncreaseCase {
    kInt64ValueIncrease = 2,
    VALUE_INCREASE_NOT_SET = 0,
  };
  static inline const Metric* internal_default_instance() {
    return reinterpret_cast<const Metric*>(
        &_Metric_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(Metric& a, Metric& b) { a.Swap(&b); }
  inline void Swap(Metric* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Metric* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Metric* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Metric>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Metric& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Metric& from) { Metric::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Metric* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tensorflow.serving.Metric"; }

 protected:
  explicit Metric(::google::protobuf::Arena* arena);
  Metric(::google::protobuf::Arena* arena, const Metric& from);
  Metric(::google::protobuf::Arena* arena, Metric&& from) noexcept
      : Metric(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNameFieldNumber = 1,
    kInt64ValueIncreaseFieldNumber = 2,
  };
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // int64 int64_value_increase = 2;
  bool has_int64_value_increase() const;
  void clear_int64_value_increase() ;
  ::int64_t int64_value_increase() const;
  void set_int64_value_increase(::int64_t value);

  private:
  ::int64_t _internal_int64_value_increase() const;
  void _internal_set_int64_value_increase(::int64_t value);

  public:
  void clear_value_increase();
  ValueIncreaseCase value_increase_case() const;
  // @@protoc_insertion_point(class_scope:tensorflow.serving.Metric)
 private:
  class _Internal;
  void set_has_int64_value_increase();
  inline bool has_value_increase() const;
  inline void clear_has_value_increase();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 2, 0,
      38, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Metric& from_msg);
    ::google::protobuf::internal::ArenaStringPtr name_;
    union ValueIncreaseUnion {
      constexpr ValueIncreaseUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::int64_t int64_value_increase_;
    } value_increase_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_5fserving_2fapis_2fmodel_5fmanagement_2eproto;
};
// -------------------------------------------------------------------

class ReloadConfigResponse final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tensorflow.serving.ReloadConfigResponse) */ {
 public:
  inline ReloadConfigResponse() : ReloadConfigResponse(nullptr) {}
  ~ReloadConfigResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ReloadConfigResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ReloadConfigResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ReloadConfigResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline ReloadConfigResponse(const ReloadConfigResponse& from) : ReloadConfigResponse(nullptr, from) {}
  inline ReloadConfigResponse(ReloadConfigResponse&& from) noexcept
      : ReloadConfigResponse(nullptr, std::move(from)) {}
  inline ReloadConfigResponse& operator=(const ReloadConfigResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReloadConfigResponse& operator=(ReloadConfigResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReloadConfigResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReloadConfigResponse* internal_default_instance() {
    return reinterpret_cast<const ReloadConfigResponse*>(
        &_ReloadConfigResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(ReloadConfigResponse& a, ReloadConfigResponse& b) { a.Swap(&b); }
  inline void Swap(ReloadConfigResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReloadConfigResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReloadConfigResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ReloadConfigResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ReloadConfigResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ReloadConfigResponse& from) { ReloadConfigResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ReloadConfigResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tensorflow.serving.ReloadConfigResponse"; }

 protected:
  explicit ReloadConfigResponse(::google::protobuf::Arena* arena);
  ReloadConfigResponse(::google::protobuf::Arena* arena, const ReloadConfigResponse& from);
  ReloadConfigResponse(::google::protobuf::Arena* arena, ReloadConfigResponse&& from) noexcept
      : ReloadConfigResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMetricFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated .tensorflow.serving.Metric metric = 2;
  int metric_size() const;
  private:
  int _internal_metric_size() const;

  public:
  void clear_metric() ;
  ::tensorflow::serving::Metric* mutable_metric(int index);
  ::google::protobuf::RepeatedPtrField<::tensorflow::serving::Metric>* mutable_metric();

  private:
  const ::google::protobuf::RepeatedPtrField<::tensorflow::serving::Metric>& _internal_metric() const;
  ::google::protobuf::RepeatedPtrField<::tensorflow::serving::Metric>* _internal_mutable_metric();
  public:
  const ::tensorflow::serving::Metric& metric(int index) const;
  ::tensorflow::serving::Metric* add_metric();
  const ::google::protobuf::RepeatedPtrField<::tensorflow::serving::Metric>& metric() const;
  // .tensorflow.serving.StatusProto status = 1;
  bool has_status() const;
  void clear_status() ;
  const ::tensorflow::serving::StatusProto& status() const;
  PROTOBUF_NODISCARD ::tensorflow::serving::StatusProto* release_status();
  ::tensorflow::serving::StatusProto* mutable_status();
  void set_allocated_status(::tensorflow::serving::StatusProto* value);
  void unsafe_arena_set_allocated_status(::tensorflow::serving::StatusProto* value);
  ::tensorflow::serving::StatusProto* unsafe_arena_release_status();

  private:
  const ::tensorflow::serving::StatusProto& _internal_status() const;
  ::tensorflow::serving::StatusProto* _internal_mutable_status();

  public:
  // @@protoc_insertion_point(class_scope:tensorflow.serving.ReloadConfigResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 2,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ReloadConfigResponse& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::tensorflow::serving::Metric > metric_;
    ::tensorflow::serving::StatusProto* status_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_5fserving_2fapis_2fmodel_5fmanagement_2eproto;
};
// -------------------------------------------------------------------

class ReloadConfigRequest final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tensorflow.serving.ReloadConfigRequest) */ {
 public:
  inline ReloadConfigRequest() : ReloadConfigRequest(nullptr) {}
  ~ReloadConfigRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ReloadConfigRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ReloadConfigRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ReloadConfigRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline ReloadConfigRequest(const ReloadConfigRequest& from) : ReloadConfigRequest(nullptr, from) {}
  inline ReloadConfigRequest(ReloadConfigRequest&& from) noexcept
      : ReloadConfigRequest(nullptr, std::move(from)) {}
  inline ReloadConfigRequest& operator=(const ReloadConfigRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReloadConfigRequest& operator=(ReloadConfigRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReloadConfigRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReloadConfigRequest* internal_default_instance() {
    return reinterpret_cast<const ReloadConfigRequest*>(
        &_ReloadConfigRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(ReloadConfigRequest& a, ReloadConfigRequest& b) { a.Swap(&b); }
  inline void Swap(ReloadConfigRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReloadConfigRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReloadConfigRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ReloadConfigRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ReloadConfigRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ReloadConfigRequest& from) { ReloadConfigRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ReloadConfigRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tensorflow.serving.ReloadConfigRequest"; }

 protected:
  explicit ReloadConfigRequest(::google::protobuf::Arena* arena);
  ReloadConfigRequest(::google::protobuf::Arena* arena, const ReloadConfigRequest& from);
  ReloadConfigRequest(::google::protobuf::Arena* arena, ReloadConfigRequest&& from) noexcept
      : ReloadConfigRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMetricNamesFieldNumber = 2,
    kConfigFieldNumber = 1,
  };
  // repeated string metric_names = 2;
  int metric_names_size() const;
  private:
  int _internal_metric_names_size() const;

  public:
  void clear_metric_names() ;
  const std::string& metric_names(int index) const;
  std::string* mutable_metric_names(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_metric_names(int index, Arg_&& value, Args_... args);
  std::string* add_metric_names();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_metric_names(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& metric_names() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_metric_names();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_metric_names() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_metric_names();

  public:
  // .tensorflow.serving.ModelServerConfig config = 1;
  bool has_config() const;
  void clear_config() ;
  const ::tensorflow::serving::ModelServerConfig& config() const;
  PROTOBUF_NODISCARD ::tensorflow::serving::ModelServerConfig* release_config();
  ::tensorflow::serving::ModelServerConfig* mutable_config();
  void set_allocated_config(::tensorflow::serving::ModelServerConfig* value);
  void unsafe_arena_set_allocated_config(::tensorflow::serving::ModelServerConfig* value);
  ::tensorflow::serving::ModelServerConfig* unsafe_arena_release_config();

  private:
  const ::tensorflow::serving::ModelServerConfig& _internal_config() const;
  ::tensorflow::serving::ModelServerConfig* _internal_mutable_config();

  public:
  // @@protoc_insertion_point(class_scope:tensorflow.serving.ReloadConfigRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      59, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ReloadConfigRequest& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField<std::string> metric_names_;
    ::tensorflow::serving::ModelServerConfig* config_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_5fserving_2fapis_2fmodel_5fmanagement_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ReloadConfigRequest

// .tensorflow.serving.ModelServerConfig config = 1;
inline bool ReloadConfigRequest::has_config() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.config_ != nullptr);
  return value;
}
inline const ::tensorflow::serving::ModelServerConfig& ReloadConfigRequest::_internal_config() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tensorflow::serving::ModelServerConfig* p = _impl_.config_;
  return p != nullptr ? *p : reinterpret_cast<const ::tensorflow::serving::ModelServerConfig&>(::tensorflow::serving::_ModelServerConfig_default_instance_);
}
inline const ::tensorflow::serving::ModelServerConfig& ReloadConfigRequest::config() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.serving.ReloadConfigRequest.config)
  return _internal_config();
}
inline void ReloadConfigRequest::unsafe_arena_set_allocated_config(::tensorflow::serving::ModelServerConfig* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.config_);
  }
  _impl_.config_ = reinterpret_cast<::tensorflow::serving::ModelServerConfig*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.serving.ReloadConfigRequest.config)
}
inline ::tensorflow::serving::ModelServerConfig* ReloadConfigRequest::release_config() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tensorflow::serving::ModelServerConfig* released = _impl_.config_;
  _impl_.config_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::tensorflow::serving::ModelServerConfig* ReloadConfigRequest::unsafe_arena_release_config() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.serving.ReloadConfigRequest.config)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tensorflow::serving::ModelServerConfig* temp = _impl_.config_;
  _impl_.config_ = nullptr;
  return temp;
}
inline ::tensorflow::serving::ModelServerConfig* ReloadConfigRequest::_internal_mutable_config() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.config_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tensorflow::serving::ModelServerConfig>(GetArena());
    _impl_.config_ = reinterpret_cast<::tensorflow::serving::ModelServerConfig*>(p);
  }
  return _impl_.config_;
}
inline ::tensorflow::serving::ModelServerConfig* ReloadConfigRequest::mutable_config() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::tensorflow::serving::ModelServerConfig* _msg = _internal_mutable_config();
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.ReloadConfigRequest.config)
  return _msg;
}
inline void ReloadConfigRequest::set_allocated_config(::tensorflow::serving::ModelServerConfig* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.config_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.config_ = reinterpret_cast<::tensorflow::serving::ModelServerConfig*>(value);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.ReloadConfigRequest.config)
}

// repeated string metric_names = 2;
inline int ReloadConfigRequest::_internal_metric_names_size() const {
  return _internal_metric_names().size();
}
inline int ReloadConfigRequest::metric_names_size() const {
  return _internal_metric_names_size();
}
inline void ReloadConfigRequest::clear_metric_names() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metric_names_.Clear();
}
inline std::string* ReloadConfigRequest::add_metric_names() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_metric_names()->Add();
  // @@protoc_insertion_point(field_add_mutable:tensorflow.serving.ReloadConfigRequest.metric_names)
  return _s;
}
inline const std::string& ReloadConfigRequest::metric_names(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.serving.ReloadConfigRequest.metric_names)
  return _internal_metric_names().Get(index);
}
inline std::string* ReloadConfigRequest::mutable_metric_names(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.ReloadConfigRequest.metric_names)
  return _internal_mutable_metric_names()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void ReloadConfigRequest::set_metric_names(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_metric_names()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:tensorflow.serving.ReloadConfigRequest.metric_names)
}
template <typename Arg_, typename... Args_>
inline void ReloadConfigRequest::add_metric_names(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_metric_names(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:tensorflow.serving.ReloadConfigRequest.metric_names)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
ReloadConfigRequest::metric_names() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tensorflow.serving.ReloadConfigRequest.metric_names)
  return _internal_metric_names();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
ReloadConfigRequest::mutable_metric_names() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.serving.ReloadConfigRequest.metric_names)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_metric_names();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
ReloadConfigRequest::_internal_metric_names() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.metric_names_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
ReloadConfigRequest::_internal_mutable_metric_names() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.metric_names_;
}

// -------------------------------------------------------------------

// ReloadConfigResponse

// .tensorflow.serving.StatusProto status = 1;
inline bool ReloadConfigResponse::has_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.status_ != nullptr);
  return value;
}
inline const ::tensorflow::serving::StatusProto& ReloadConfigResponse::_internal_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tensorflow::serving::StatusProto* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::tensorflow::serving::StatusProto&>(::tensorflow::serving::_StatusProto_default_instance_);
}
inline const ::tensorflow::serving::StatusProto& ReloadConfigResponse::status() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.serving.ReloadConfigResponse.status)
  return _internal_status();
}
inline void ReloadConfigResponse::unsafe_arena_set_allocated_status(::tensorflow::serving::StatusProto* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = reinterpret_cast<::tensorflow::serving::StatusProto*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.serving.ReloadConfigResponse.status)
}
inline ::tensorflow::serving::StatusProto* ReloadConfigResponse::release_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tensorflow::serving::StatusProto* released = _impl_.status_;
  _impl_.status_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::tensorflow::serving::StatusProto* ReloadConfigResponse::unsafe_arena_release_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.serving.ReloadConfigResponse.status)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tensorflow::serving::StatusProto* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::tensorflow::serving::StatusProto* ReloadConfigResponse::_internal_mutable_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.status_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tensorflow::serving::StatusProto>(GetArena());
    _impl_.status_ = reinterpret_cast<::tensorflow::serving::StatusProto*>(p);
  }
  return _impl_.status_;
}
inline ::tensorflow::serving::StatusProto* ReloadConfigResponse::mutable_status() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::tensorflow::serving::StatusProto* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.ReloadConfigResponse.status)
  return _msg;
}
inline void ReloadConfigResponse::set_allocated_status(::tensorflow::serving::StatusProto* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.status_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.status_ = reinterpret_cast<::tensorflow::serving::StatusProto*>(value);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.ReloadConfigResponse.status)
}

// repeated .tensorflow.serving.Metric metric = 2;
inline int ReloadConfigResponse::_internal_metric_size() const {
  return _internal_metric().size();
}
inline int ReloadConfigResponse::metric_size() const {
  return _internal_metric_size();
}
inline void ReloadConfigResponse::clear_metric() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metric_.Clear();
}
inline ::tensorflow::serving::Metric* ReloadConfigResponse::mutable_metric(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.ReloadConfigResponse.metric)
  return _internal_mutable_metric()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::tensorflow::serving::Metric>* ReloadConfigResponse::mutable_metric()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.serving.ReloadConfigResponse.metric)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_metric();
}
inline const ::tensorflow::serving::Metric& ReloadConfigResponse::metric(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.serving.ReloadConfigResponse.metric)
  return _internal_metric().Get(index);
}
inline ::tensorflow::serving::Metric* ReloadConfigResponse::add_metric() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::tensorflow::serving::Metric* _add = _internal_mutable_metric()->Add();
  // @@protoc_insertion_point(field_add:tensorflow.serving.ReloadConfigResponse.metric)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::tensorflow::serving::Metric>& ReloadConfigResponse::metric() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tensorflow.serving.ReloadConfigResponse.metric)
  return _internal_metric();
}
inline const ::google::protobuf::RepeatedPtrField<::tensorflow::serving::Metric>&
ReloadConfigResponse::_internal_metric() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.metric_;
}
inline ::google::protobuf::RepeatedPtrField<::tensorflow::serving::Metric>*
ReloadConfigResponse::_internal_mutable_metric() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.metric_;
}

// -------------------------------------------------------------------

// Metric

// string name = 1;
inline void Metric::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Metric::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.serving.Metric.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Metric::set_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tensorflow.serving.Metric.name)
}
inline std::string* Metric::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.Metric.name)
  return _s;
}
inline const std::string& Metric::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void Metric::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(value, GetArena());
}
inline std::string* Metric::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* Metric::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.serving.Metric.name)
  return _impl_.name_.Release();
}
inline void Metric::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.Metric.name)
}

// int64 int64_value_increase = 2;
inline bool Metric::has_int64_value_increase() const {
  return value_increase_case() == kInt64ValueIncrease;
}
inline void Metric::set_has_int64_value_increase() {
  _impl_._oneof_case_[0] = kInt64ValueIncrease;
}
inline void Metric::clear_int64_value_increase() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_increase_case() == kInt64ValueIncrease) {
    _impl_.value_increase_.int64_value_increase_ = ::int64_t{0};
    clear_has_value_increase();
  }
}
inline ::int64_t Metric::int64_value_increase() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.Metric.int64_value_increase)
  return _internal_int64_value_increase();
}
inline void Metric::set_int64_value_increase(::int64_t value) {
  if (value_increase_case() != kInt64ValueIncrease) {
    clear_value_increase();
    set_has_int64_value_increase();
  }
  _impl_.value_increase_.int64_value_increase_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.serving.Metric.int64_value_increase)
}
inline ::int64_t Metric::_internal_int64_value_increase() const {
  if (value_increase_case() == kInt64ValueIncrease) {
    return _impl_.value_increase_.int64_value_increase_;
  }
  return ::int64_t{0};
}

inline bool Metric::has_value_increase() const {
  return value_increase_case() != VALUE_INCREASE_NOT_SET;
}
inline void Metric::clear_has_value_increase() {
  _impl_._oneof_case_[0] = VALUE_INCREASE_NOT_SET;
}
inline Metric::ValueIncreaseCase Metric::value_increase_case() const {
  return Metric::ValueIncreaseCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace serving
}  // namespace tensorflow


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // tensorflow_5fserving_2fapis_2fmodel_5fmanagement_2eproto_2epb_2eh
