// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: tensorflow_serving/apis/session_service.proto
// Protobuf C++ Version: 5.29.0

#include "tensorflow_serving/apis/session_service.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace tensorflow {
namespace serving {

inline constexpr SessionRunRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        feed_{},
        fetch_{},
        target_{},
        model_spec_{nullptr},
        options_{nullptr},
        tensor_name_is_alias_{false} {}

template <typename>
PROTOBUF_CONSTEXPR SessionRunRequest::SessionRunRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SessionRunRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SessionRunRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SessionRunRequestDefaultTypeInternal() {}
  union {
    SessionRunRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SessionRunRequestDefaultTypeInternal _SessionRunRequest_default_instance_;

inline constexpr SessionRunResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        tensor_{},
        metadata_{nullptr},
        model_spec_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR SessionRunResponse::SessionRunResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SessionRunResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SessionRunResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SessionRunResponseDefaultTypeInternal() {}
  union {
    SessionRunResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SessionRunResponseDefaultTypeInternal _SessionRunResponse_default_instance_;
}  // namespace serving
}  // namespace tensorflow
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_tensorflow_5fserving_2fapis_2fsession_5fservice_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_tensorflow_5fserving_2fapis_2fsession_5fservice_2eproto = nullptr;
const ::uint32_t
    TableStruct_tensorflow_5fserving_2fapis_2fsession_5fservice_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        PROTOBUF_FIELD_OFFSET(::tensorflow::serving::SessionRunRequest, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::tensorflow::serving::SessionRunRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::tensorflow::serving::SessionRunRequest, _impl_.model_spec_),
        PROTOBUF_FIELD_OFFSET(::tensorflow::serving::SessionRunRequest, _impl_.feed_),
        PROTOBUF_FIELD_OFFSET(::tensorflow::serving::SessionRunRequest, _impl_.fetch_),
        PROTOBUF_FIELD_OFFSET(::tensorflow::serving::SessionRunRequest, _impl_.target_),
        PROTOBUF_FIELD_OFFSET(::tensorflow::serving::SessionRunRequest, _impl_.tensor_name_is_alias_),
        PROTOBUF_FIELD_OFFSET(::tensorflow::serving::SessionRunRequest, _impl_.options_),
        0,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        1,
        PROTOBUF_FIELD_OFFSET(::tensorflow::serving::SessionRunResponse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::tensorflow::serving::SessionRunResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::tensorflow::serving::SessionRunResponse, _impl_.model_spec_),
        PROTOBUF_FIELD_OFFSET(::tensorflow::serving::SessionRunResponse, _impl_.tensor_),
        PROTOBUF_FIELD_OFFSET(::tensorflow::serving::SessionRunResponse, _impl_.metadata_),
        1,
        ~0u,
        0,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, 14, -1, sizeof(::tensorflow::serving::SessionRunRequest)},
        {20, 31, -1, sizeof(::tensorflow::serving::SessionRunResponse)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::tensorflow::serving::_SessionRunRequest_default_instance_._instance,
    &::tensorflow::serving::_SessionRunResponse_default_instance_._instance,
};
const char descriptor_table_protodef_tensorflow_5fserving_2fapis_2fsession_5fservice_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n-tensorflow_serving/apis/session_servic"
    "e.proto\022\022tensorflow.serving\032%tensorflow/"
    "core/protobuf/config.proto\032+tensorflow/c"
    "ore/protobuf/named_tensor.proto\032#tensorf"
    "low_serving/apis/model.proto\"\330\001\n\021Session"
    "RunRequest\0221\n\nmodel_spec\030\001 \001(\0132\035.tensorf"
    "low.serving.ModelSpec\022*\n\004feed\030\002 \003(\0132\034.te"
    "nsorflow.NamedTensorProto\022\r\n\005fetch\030\003 \003(\t"
    "\022\016\n\006target\030\004 \003(\t\022\034\n\024tensor_name_is_alias"
    "\030\006 \001(\010\022\'\n\007options\030\005 \001(\0132\026.tensorflow.Run"
    "Options\"\240\001\n\022SessionRunResponse\0221\n\nmodel_"
    "spec\030\003 \001(\0132\035.tensorflow.serving.ModelSpe"
    "c\022,\n\006tensor\030\001 \003(\0132\034.tensorflow.NamedTens"
    "orProto\022)\n\010metadata\030\002 \001(\0132\027.tensorflow.R"
    "unMetadata2m\n\016SessionService\022[\n\nSessionR"
    "un\022%.tensorflow.serving.SessionRunReques"
    "t\032&.tensorflow.serving.SessionRunRespons"
    "eB\003\370\001\001b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_tensorflow_5fserving_2fapis_2fsession_5fservice_2eproto_deps[3] =
    {
        &::descriptor_table_tensorflow_2fcore_2fprotobuf_2fconfig_2eproto,
        &::descriptor_table_tensorflow_2fcore_2fprotobuf_2fnamed_5ftensor_2eproto,
        &::descriptor_table_tensorflow_5fserving_2fapis_2fmodel_2eproto,
};
static ::absl::once_flag descriptor_table_tensorflow_5fserving_2fapis_2fsession_5fservice_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_tensorflow_5fserving_2fapis_2fsession_5fservice_2eproto = {
    false,
    false,
    694,
    descriptor_table_protodef_tensorflow_5fserving_2fapis_2fsession_5fservice_2eproto,
    "tensorflow_serving/apis/session_service.proto",
    &descriptor_table_tensorflow_5fserving_2fapis_2fsession_5fservice_2eproto_once,
    descriptor_table_tensorflow_5fserving_2fapis_2fsession_5fservice_2eproto_deps,
    3,
    2,
    schemas,
    file_default_instances,
    TableStruct_tensorflow_5fserving_2fapis_2fsession_5fservice_2eproto::offsets,
    file_level_enum_descriptors_tensorflow_5fserving_2fapis_2fsession_5fservice_2eproto,
    file_level_service_descriptors_tensorflow_5fserving_2fapis_2fsession_5fservice_2eproto,
};
namespace tensorflow {
namespace serving {
// ===================================================================

class SessionRunRequest::_Internal {
 public:
  using HasBits =
      decltype(std::declval<SessionRunRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(SessionRunRequest, _impl_._has_bits_);
};

void SessionRunRequest::clear_model_spec() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.model_spec_ != nullptr) _impl_.model_spec_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void SessionRunRequest::clear_feed() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.feed_.Clear();
}
void SessionRunRequest::clear_options() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.options_ != nullptr) _impl_.options_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
SessionRunRequest::SessionRunRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.serving.SessionRunRequest)
}
inline PROTOBUF_NDEBUG_INLINE SessionRunRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::tensorflow::serving::SessionRunRequest& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        feed_{visibility, arena, from.feed_},
        fetch_{visibility, arena, from.fetch_},
        target_{visibility, arena, from.target_} {}

SessionRunRequest::SessionRunRequest(
    ::google::protobuf::Arena* arena,
    const SessionRunRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SessionRunRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.model_spec_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::tensorflow::serving::ModelSpec>(
                              arena, *from._impl_.model_spec_)
                        : nullptr;
  _impl_.options_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::tensorflow::RunOptions>(
                              arena, *from._impl_.options_)
                        : nullptr;
  _impl_.tensor_name_is_alias_ = from._impl_.tensor_name_is_alias_;

  // @@protoc_insertion_point(copy_constructor:tensorflow.serving.SessionRunRequest)
}
inline PROTOBUF_NDEBUG_INLINE SessionRunRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        feed_{visibility, arena},
        fetch_{visibility, arena},
        target_{visibility, arena} {}

inline void SessionRunRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, model_spec_),
           0,
           offsetof(Impl_, tensor_name_is_alias_) -
               offsetof(Impl_, model_spec_) +
               sizeof(Impl_::tensor_name_is_alias_));
}
SessionRunRequest::~SessionRunRequest() {
  // @@protoc_insertion_point(destructor:tensorflow.serving.SessionRunRequest)
  SharedDtor(*this);
}
inline void SessionRunRequest::SharedDtor(MessageLite& self) {
  SessionRunRequest& this_ = static_cast<SessionRunRequest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.model_spec_;
  delete this_._impl_.options_;
  this_._impl_.~Impl_();
}

inline void* SessionRunRequest::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) SessionRunRequest(arena);
}
constexpr auto SessionRunRequest::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(SessionRunRequest, _impl_.feed_) +
          decltype(SessionRunRequest::_impl_.feed_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(SessionRunRequest, _impl_.fetch_) +
          decltype(SessionRunRequest::_impl_.fetch_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(SessionRunRequest, _impl_.target_) +
          decltype(SessionRunRequest::_impl_.target_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(SessionRunRequest), alignof(SessionRunRequest), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&SessionRunRequest::PlacementNew_,
                                 sizeof(SessionRunRequest),
                                 alignof(SessionRunRequest));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull SessionRunRequest::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_SessionRunRequest_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &SessionRunRequest::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<SessionRunRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &SessionRunRequest::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<SessionRunRequest>(), &SessionRunRequest::ByteSizeLong,
            &SessionRunRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(SessionRunRequest, _impl_._cached_size_),
        false,
    },
    &SessionRunRequest::kDescriptorMethods,
    &descriptor_table_tensorflow_5fserving_2fapis_2fsession_5fservice_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* SessionRunRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 3, 56, 2> SessionRunRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SessionRunRequest, _impl_._has_bits_),
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tensorflow::serving::SessionRunRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .tensorflow.serving.ModelSpec model_spec = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(SessionRunRequest, _impl_.model_spec_)}},
    // repeated .tensorflow.NamedTensorProto feed = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 1, PROTOBUF_FIELD_OFFSET(SessionRunRequest, _impl_.feed_)}},
    // repeated string fetch = 3;
    {::_pbi::TcParser::FastUR1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(SessionRunRequest, _impl_.fetch_)}},
    // repeated string target = 4;
    {::_pbi::TcParser::FastUR1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(SessionRunRequest, _impl_.target_)}},
    // .tensorflow.RunOptions options = 5;
    {::_pbi::TcParser::FastMtS1,
     {42, 1, 2, PROTOBUF_FIELD_OFFSET(SessionRunRequest, _impl_.options_)}},
    // bool tensor_name_is_alias = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(SessionRunRequest, _impl_.tensor_name_is_alias_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(SessionRunRequest, _impl_.tensor_name_is_alias_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .tensorflow.serving.ModelSpec model_spec = 1;
    {PROTOBUF_FIELD_OFFSET(SessionRunRequest, _impl_.model_spec_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .tensorflow.NamedTensorProto feed = 2;
    {PROTOBUF_FIELD_OFFSET(SessionRunRequest, _impl_.feed_), -1, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated string fetch = 3;
    {PROTOBUF_FIELD_OFFSET(SessionRunRequest, _impl_.fetch_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // repeated string target = 4;
    {PROTOBUF_FIELD_OFFSET(SessionRunRequest, _impl_.target_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // .tensorflow.RunOptions options = 5;
    {PROTOBUF_FIELD_OFFSET(SessionRunRequest, _impl_.options_), _Internal::kHasBitsOffset + 1, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // bool tensor_name_is_alias = 6;
    {PROTOBUF_FIELD_OFFSET(SessionRunRequest, _impl_.tensor_name_is_alias_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tensorflow::serving::ModelSpec>()},
    {::_pbi::TcParser::GetTable<::tensorflow::NamedTensorProto>()},
    {::_pbi::TcParser::GetTable<::tensorflow::RunOptions>()},
  }}, {{
    "\44\0\0\5\6\0\0\0"
    "tensorflow.serving.SessionRunRequest"
    "fetch"
    "target"
  }},
};

PROTOBUF_NOINLINE void SessionRunRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.serving.SessionRunRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.feed_.Clear();
  _impl_.fetch_.Clear();
  _impl_.target_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.model_spec_ != nullptr);
      _impl_.model_spec_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.options_ != nullptr);
      _impl_.options_->Clear();
    }
  }
  _impl_.tensor_name_is_alias_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* SessionRunRequest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const SessionRunRequest& this_ = static_cast<const SessionRunRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* SessionRunRequest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const SessionRunRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:tensorflow.serving.SessionRunRequest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .tensorflow.serving.ModelSpec model_spec = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.model_spec_, this_._impl_.model_spec_->GetCachedSize(), target,
                stream);
          }

          // repeated .tensorflow.NamedTensorProto feed = 2;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_feed_size());
               i < n; i++) {
            const auto& repfield = this_._internal_feed().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    2, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          // repeated string fetch = 3;
          for (int i = 0, n = this_._internal_fetch_size(); i < n; ++i) {
            const auto& s = this_._internal_fetch().Get(i);
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tensorflow.serving.SessionRunRequest.fetch");
            target = stream->WriteString(3, s, target);
          }

          // repeated string target = 4;
          for (int i = 0, n = this_._internal_target_size(); i < n; ++i) {
            const auto& s = this_._internal_target().Get(i);
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tensorflow.serving.SessionRunRequest.target");
            target = stream->WriteString(4, s, target);
          }

          // .tensorflow.RunOptions options = 5;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                5, *this_._impl_.options_, this_._impl_.options_->GetCachedSize(), target,
                stream);
          }

          // bool tensor_name_is_alias = 6;
          if (this_._internal_tensor_name_is_alias() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                6, this_._internal_tensor_name_is_alias(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:tensorflow.serving.SessionRunRequest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t SessionRunRequest::ByteSizeLong(const MessageLite& base) {
          const SessionRunRequest& this_ = static_cast<const SessionRunRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t SessionRunRequest::ByteSizeLong() const {
          const SessionRunRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:tensorflow.serving.SessionRunRequest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .tensorflow.NamedTensorProto feed = 2;
            {
              total_size += 1UL * this_._internal_feed_size();
              for (const auto& msg : this_._internal_feed()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
            // repeated string fetch = 3;
            {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_fetch().size());
              for (int i = 0, n = this_._internal_fetch().size(); i < n; ++i) {
                total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
                    this_._internal_fetch().Get(i));
              }
            }
            // repeated string target = 4;
            {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_target().size());
              for (int i = 0, n = this_._internal_target().size(); i < n; ++i) {
                total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
                    this_._internal_target().Get(i));
              }
            }
          }
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // .tensorflow.serving.ModelSpec model_spec = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.model_spec_);
            }
            // .tensorflow.RunOptions options = 5;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.options_);
            }
          }
           {
            // bool tensor_name_is_alias = 6;
            if (this_._internal_tensor_name_is_alias() != 0) {
              total_size += 2;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void SessionRunRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SessionRunRequest*>(&to_msg);
  auto& from = static_cast<const SessionRunRequest&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.serving.SessionRunRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_feed()->MergeFrom(
      from._internal_feed());
  _this->_internal_mutable_fetch()->MergeFrom(from._internal_fetch());
  _this->_internal_mutable_target()->MergeFrom(from._internal_target());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.model_spec_ != nullptr);
      if (_this->_impl_.model_spec_ == nullptr) {
        _this->_impl_.model_spec_ =
            ::google::protobuf::Message::CopyConstruct<::tensorflow::serving::ModelSpec>(arena, *from._impl_.model_spec_);
      } else {
        _this->_impl_.model_spec_->MergeFrom(*from._impl_.model_spec_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.options_ != nullptr);
      if (_this->_impl_.options_ == nullptr) {
        _this->_impl_.options_ =
            ::google::protobuf::Message::CopyConstruct<::tensorflow::RunOptions>(arena, *from._impl_.options_);
      } else {
        _this->_impl_.options_->MergeFrom(*from._impl_.options_);
      }
    }
  }
  if (from._internal_tensor_name_is_alias() != 0) {
    _this->_impl_.tensor_name_is_alias_ = from._impl_.tensor_name_is_alias_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SessionRunRequest::CopyFrom(const SessionRunRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.serving.SessionRunRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SessionRunRequest::InternalSwap(SessionRunRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.feed_.InternalSwap(&other->_impl_.feed_);
  _impl_.fetch_.InternalSwap(&other->_impl_.fetch_);
  _impl_.target_.InternalSwap(&other->_impl_.target_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SessionRunRequest, _impl_.tensor_name_is_alias_)
      + sizeof(SessionRunRequest::_impl_.tensor_name_is_alias_)
      - PROTOBUF_FIELD_OFFSET(SessionRunRequest, _impl_.model_spec_)>(
          reinterpret_cast<char*>(&_impl_.model_spec_),
          reinterpret_cast<char*>(&other->_impl_.model_spec_));
}

::google::protobuf::Metadata SessionRunRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SessionRunResponse::_Internal {
 public:
  using HasBits =
      decltype(std::declval<SessionRunResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(SessionRunResponse, _impl_._has_bits_);
};

void SessionRunResponse::clear_model_spec() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.model_spec_ != nullptr) _impl_.model_spec_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void SessionRunResponse::clear_tensor() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.tensor_.Clear();
}
void SessionRunResponse::clear_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.metadata_ != nullptr) _impl_.metadata_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
SessionRunResponse::SessionRunResponse(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.serving.SessionRunResponse)
}
inline PROTOBUF_NDEBUG_INLINE SessionRunResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::tensorflow::serving::SessionRunResponse& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        tensor_{visibility, arena, from.tensor_} {}

SessionRunResponse::SessionRunResponse(
    ::google::protobuf::Arena* arena,
    const SessionRunResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SessionRunResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.metadata_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::tensorflow::RunMetadata>(
                              arena, *from._impl_.metadata_)
                        : nullptr;
  _impl_.model_spec_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::tensorflow::serving::ModelSpec>(
                              arena, *from._impl_.model_spec_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:tensorflow.serving.SessionRunResponse)
}
inline PROTOBUF_NDEBUG_INLINE SessionRunResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        tensor_{visibility, arena} {}

inline void SessionRunResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, metadata_),
           0,
           offsetof(Impl_, model_spec_) -
               offsetof(Impl_, metadata_) +
               sizeof(Impl_::model_spec_));
}
SessionRunResponse::~SessionRunResponse() {
  // @@protoc_insertion_point(destructor:tensorflow.serving.SessionRunResponse)
  SharedDtor(*this);
}
inline void SessionRunResponse::SharedDtor(MessageLite& self) {
  SessionRunResponse& this_ = static_cast<SessionRunResponse&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.metadata_;
  delete this_._impl_.model_spec_;
  this_._impl_.~Impl_();
}

inline void* SessionRunResponse::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) SessionRunResponse(arena);
}
constexpr auto SessionRunResponse::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(SessionRunResponse, _impl_.tensor_) +
          decltype(SessionRunResponse::_impl_.tensor_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(SessionRunResponse), alignof(SessionRunResponse), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&SessionRunResponse::PlacementNew_,
                                 sizeof(SessionRunResponse),
                                 alignof(SessionRunResponse));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull SessionRunResponse::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_SessionRunResponse_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &SessionRunResponse::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<SessionRunResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &SessionRunResponse::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<SessionRunResponse>(), &SessionRunResponse::ByteSizeLong,
            &SessionRunResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(SessionRunResponse, _impl_._cached_size_),
        false,
    },
    &SessionRunResponse::kDescriptorMethods,
    &descriptor_table_tensorflow_5fserving_2fapis_2fsession_5fservice_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* SessionRunResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 3, 0, 2> SessionRunResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SessionRunResponse, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tensorflow::serving::SessionRunResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // repeated .tensorflow.NamedTensorProto tensor = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(SessionRunResponse, _impl_.tensor_)}},
    // .tensorflow.RunMetadata metadata = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 1, PROTOBUF_FIELD_OFFSET(SessionRunResponse, _impl_.metadata_)}},
    // .tensorflow.serving.ModelSpec model_spec = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 1, 2, PROTOBUF_FIELD_OFFSET(SessionRunResponse, _impl_.model_spec_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .tensorflow.NamedTensorProto tensor = 1;
    {PROTOBUF_FIELD_OFFSET(SessionRunResponse, _impl_.tensor_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tensorflow.RunMetadata metadata = 2;
    {PROTOBUF_FIELD_OFFSET(SessionRunResponse, _impl_.metadata_), _Internal::kHasBitsOffset + 0, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tensorflow.serving.ModelSpec model_spec = 3;
    {PROTOBUF_FIELD_OFFSET(SessionRunResponse, _impl_.model_spec_), _Internal::kHasBitsOffset + 1, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tensorflow::NamedTensorProto>()},
    {::_pbi::TcParser::GetTable<::tensorflow::RunMetadata>()},
    {::_pbi::TcParser::GetTable<::tensorflow::serving::ModelSpec>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void SessionRunResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.serving.SessionRunResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tensor_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.metadata_ != nullptr);
      _impl_.metadata_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.model_spec_ != nullptr);
      _impl_.model_spec_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* SessionRunResponse::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const SessionRunResponse& this_ = static_cast<const SessionRunResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* SessionRunResponse::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const SessionRunResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:tensorflow.serving.SessionRunResponse)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // repeated .tensorflow.NamedTensorProto tensor = 1;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_tensor_size());
               i < n; i++) {
            const auto& repfield = this_._internal_tensor().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    1, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .tensorflow.RunMetadata metadata = 2;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.metadata_, this_._impl_.metadata_->GetCachedSize(), target,
                stream);
          }

          // .tensorflow.serving.ModelSpec model_spec = 3;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                3, *this_._impl_.model_spec_, this_._impl_.model_spec_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:tensorflow.serving.SessionRunResponse)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t SessionRunResponse::ByteSizeLong(const MessageLite& base) {
          const SessionRunResponse& this_ = static_cast<const SessionRunResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t SessionRunResponse::ByteSizeLong() const {
          const SessionRunResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:tensorflow.serving.SessionRunResponse)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .tensorflow.NamedTensorProto tensor = 1;
            {
              total_size += 1UL * this_._internal_tensor_size();
              for (const auto& msg : this_._internal_tensor()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // .tensorflow.RunMetadata metadata = 2;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.metadata_);
            }
            // .tensorflow.serving.ModelSpec model_spec = 3;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.model_spec_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void SessionRunResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SessionRunResponse*>(&to_msg);
  auto& from = static_cast<const SessionRunResponse&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.serving.SessionRunResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_tensor()->MergeFrom(
      from._internal_tensor());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.metadata_ != nullptr);
      if (_this->_impl_.metadata_ == nullptr) {
        _this->_impl_.metadata_ =
            ::google::protobuf::Message::CopyConstruct<::tensorflow::RunMetadata>(arena, *from._impl_.metadata_);
      } else {
        _this->_impl_.metadata_->MergeFrom(*from._impl_.metadata_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.model_spec_ != nullptr);
      if (_this->_impl_.model_spec_ == nullptr) {
        _this->_impl_.model_spec_ =
            ::google::protobuf::Message::CopyConstruct<::tensorflow::serving::ModelSpec>(arena, *from._impl_.model_spec_);
      } else {
        _this->_impl_.model_spec_->MergeFrom(*from._impl_.model_spec_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SessionRunResponse::CopyFrom(const SessionRunResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.serving.SessionRunResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SessionRunResponse::InternalSwap(SessionRunResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.tensor_.InternalSwap(&other->_impl_.tensor_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SessionRunResponse, _impl_.model_spec_)
      + sizeof(SessionRunResponse::_impl_.model_spec_)
      - PROTOBUF_FIELD_OFFSET(SessionRunResponse, _impl_.metadata_)>(
          reinterpret_cast<char*>(&_impl_.metadata_),
          reinterpret_cast<char*>(&other->_impl_.metadata_));
}

::google::protobuf::Metadata SessionRunResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace serving
}  // namespace tensorflow
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_tensorflow_5fserving_2fapis_2fsession_5fservice_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
