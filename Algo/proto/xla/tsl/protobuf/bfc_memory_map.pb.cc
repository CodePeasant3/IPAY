// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: xla/tsl/protobuf/bfc_memory_map.proto
// Protobuf C++ Version: 5.29.0

#include "xla/tsl/protobuf/bfc_memory_map.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace tensorflow {

inline constexpr SnapShot::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : action_count_{::uint64_t{0u}},
        size_{::int64_t{0}},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR SnapShot::SnapShot(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SnapShotDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SnapShotDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SnapShotDefaultTypeInternal() {}
  union {
    SnapShot _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SnapShotDefaultTypeInternal _SnapShot_default_instance_;

inline constexpr MemChunk::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : op_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        address_{::uint64_t{0u}},
        size_{::int64_t{0}},
        requested_size_{::int64_t{0}},
        freed_at_count_{::uint64_t{0u}},
        bin_{0},
        in_use_{false},
        action_count_{::uint64_t{0u}},
        step_id_{::uint64_t{0u}},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR MemChunk::MemChunk(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct MemChunkDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MemChunkDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MemChunkDefaultTypeInternal() {}
  union {
    MemChunk _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MemChunkDefaultTypeInternal _MemChunk_default_instance_;

inline constexpr MemAllocatorStats::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : num_allocs_{::int64_t{0}},
        bytes_in_use_{::int64_t{0}},
        peak_bytes_in_use_{::int64_t{0}},
        largest_alloc_size_{::int64_t{0}},
        fragmentation_metric_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR MemAllocatorStats::MemAllocatorStats(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct MemAllocatorStatsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MemAllocatorStatsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MemAllocatorStatsDefaultTypeInternal() {}
  union {
    MemAllocatorStats _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MemAllocatorStatsDefaultTypeInternal _MemAllocatorStats_default_instance_;

inline constexpr BinSummary::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : total_bytes_in_use_{::int64_t{0}},
        total_bytes_in_bin_{::int64_t{0}},
        total_chunks_in_use_{::int64_t{0}},
        total_chunks_in_bin_{::int64_t{0}},
        bin_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR BinSummary::BinSummary(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct BinSummaryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BinSummaryDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BinSummaryDefaultTypeInternal() {}
  union {
    BinSummary _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BinSummaryDefaultTypeInternal _BinSummary_default_instance_;

inline constexpr MemoryDump::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        bin_summary_{},
        chunk_{},
        snap_shot_{},
        allocator_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        stats_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR MemoryDump::MemoryDump(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct MemoryDumpDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MemoryDumpDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MemoryDumpDefaultTypeInternal() {}
  union {
    MemoryDump _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MemoryDumpDefaultTypeInternal _MemoryDump_default_instance_;
}  // namespace tensorflow
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_xla_2ftsl_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_xla_2ftsl_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto = nullptr;
const ::uint32_t
    TableStruct_xla_2ftsl_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::tensorflow::MemAllocatorStats, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::tensorflow::MemAllocatorStats, _impl_.num_allocs_),
        PROTOBUF_FIELD_OFFSET(::tensorflow::MemAllocatorStats, _impl_.bytes_in_use_),
        PROTOBUF_FIELD_OFFSET(::tensorflow::MemAllocatorStats, _impl_.peak_bytes_in_use_),
        PROTOBUF_FIELD_OFFSET(::tensorflow::MemAllocatorStats, _impl_.largest_alloc_size_),
        PROTOBUF_FIELD_OFFSET(::tensorflow::MemAllocatorStats, _impl_.fragmentation_metric_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::tensorflow::MemChunk, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::tensorflow::MemChunk, _impl_.address_),
        PROTOBUF_FIELD_OFFSET(::tensorflow::MemChunk, _impl_.size_),
        PROTOBUF_FIELD_OFFSET(::tensorflow::MemChunk, _impl_.requested_size_),
        PROTOBUF_FIELD_OFFSET(::tensorflow::MemChunk, _impl_.bin_),
        PROTOBUF_FIELD_OFFSET(::tensorflow::MemChunk, _impl_.op_name_),
        PROTOBUF_FIELD_OFFSET(::tensorflow::MemChunk, _impl_.freed_at_count_),
        PROTOBUF_FIELD_OFFSET(::tensorflow::MemChunk, _impl_.action_count_),
        PROTOBUF_FIELD_OFFSET(::tensorflow::MemChunk, _impl_.in_use_),
        PROTOBUF_FIELD_OFFSET(::tensorflow::MemChunk, _impl_.step_id_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::tensorflow::BinSummary, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::tensorflow::BinSummary, _impl_.bin_),
        PROTOBUF_FIELD_OFFSET(::tensorflow::BinSummary, _impl_.total_bytes_in_use_),
        PROTOBUF_FIELD_OFFSET(::tensorflow::BinSummary, _impl_.total_bytes_in_bin_),
        PROTOBUF_FIELD_OFFSET(::tensorflow::BinSummary, _impl_.total_chunks_in_use_),
        PROTOBUF_FIELD_OFFSET(::tensorflow::BinSummary, _impl_.total_chunks_in_bin_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::tensorflow::SnapShot, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::tensorflow::SnapShot, _impl_.action_count_),
        PROTOBUF_FIELD_OFFSET(::tensorflow::SnapShot, _impl_.size_),
        PROTOBUF_FIELD_OFFSET(::tensorflow::MemoryDump, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::tensorflow::MemoryDump, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::tensorflow::MemoryDump, _impl_.allocator_name_),
        PROTOBUF_FIELD_OFFSET(::tensorflow::MemoryDump, _impl_.bin_summary_),
        PROTOBUF_FIELD_OFFSET(::tensorflow::MemoryDump, _impl_.chunk_),
        PROTOBUF_FIELD_OFFSET(::tensorflow::MemoryDump, _impl_.snap_shot_),
        PROTOBUF_FIELD_OFFSET(::tensorflow::MemoryDump, _impl_.stats_),
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        0,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::tensorflow::MemAllocatorStats)},
        {13, -1, -1, sizeof(::tensorflow::MemChunk)},
        {30, -1, -1, sizeof(::tensorflow::BinSummary)},
        {43, -1, -1, sizeof(::tensorflow::SnapShot)},
        {53, 66, -1, sizeof(::tensorflow::MemoryDump)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::tensorflow::_MemAllocatorStats_default_instance_._instance,
    &::tensorflow::_MemChunk_default_instance_._instance,
    &::tensorflow::_BinSummary_default_instance_._instance,
    &::tensorflow::_SnapShot_default_instance_._instance,
    &::tensorflow::_MemoryDump_default_instance_._instance,
};
const char descriptor_table_protodef_xla_2ftsl_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n%xla/tsl/protobuf/bfc_memory_map.proto\022"
    "\ntensorflow\"\222\001\n\021MemAllocatorStats\022\022\n\nnum"
    "_allocs\030\001 \001(\003\022\024\n\014bytes_in_use\030\002 \001(\003\022\031\n\021p"
    "eak_bytes_in_use\030\003 \001(\003\022\032\n\022largest_alloc_"
    "size\030\004 \001(\003\022\034\n\024fragmentation_metric\030\005 \001(\002"
    "\"\256\001\n\010MemChunk\022\017\n\007address\030\001 \001(\004\022\014\n\004size\030\002"
    " \001(\003\022\026\n\016requested_size\030\003 \001(\003\022\013\n\003bin\030\004 \001("
    "\005\022\017\n\007op_name\030\005 \001(\t\022\026\n\016freed_at_count\030\006 \001"
    "(\004\022\024\n\014action_count\030\007 \001(\004\022\016\n\006in_use\030\010 \001(\010"
    "\022\017\n\007step_id\030\t \001(\004\"\213\001\n\nBinSummary\022\013\n\003bin\030"
    "\001 \001(\005\022\032\n\022total_bytes_in_use\030\002 \001(\003\022\032\n\022tot"
    "al_bytes_in_bin\030\003 \001(\003\022\033\n\023total_chunks_in"
    "_use\030\004 \001(\003\022\033\n\023total_chunks_in_bin\030\005 \001(\003\""
    ".\n\010SnapShot\022\024\n\014action_count\030\001 \001(\004\022\014\n\004siz"
    "e\030\002 \001(\003\"\315\001\n\nMemoryDump\022\026\n\016allocator_name"
    "\030\001 \001(\t\022+\n\013bin_summary\030\002 \003(\0132\026.tensorflow"
    ".BinSummary\022#\n\005chunk\030\003 \003(\0132\024.tensorflow."
    "MemChunk\022\'\n\tsnap_shot\030\004 \003(\0132\024.tensorflow"
    ".SnapShot\022,\n\005stats\030\005 \001(\0132\035.tensorflow.Me"
    "mAllocatorStatsB@Z>github.com/google/tsl"
    "/tsl/go/protobuf/for_core_protos_go_prot"
    "ob\006proto3"
};
static ::absl::once_flag descriptor_table_xla_2ftsl_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_xla_2ftsl_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto = {
    false,
    false,
    849,
    descriptor_table_protodef_xla_2ftsl_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto,
    "xla/tsl/protobuf/bfc_memory_map.proto",
    &descriptor_table_xla_2ftsl_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto_once,
    nullptr,
    0,
    5,
    schemas,
    file_default_instances,
    TableStruct_xla_2ftsl_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto::offsets,
    file_level_enum_descriptors_xla_2ftsl_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto,
    file_level_service_descriptors_xla_2ftsl_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto,
};
namespace tensorflow {
// ===================================================================

class MemAllocatorStats::_Internal {
 public:
};

MemAllocatorStats::MemAllocatorStats(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.MemAllocatorStats)
}
MemAllocatorStats::MemAllocatorStats(
    ::google::protobuf::Arena* arena, const MemAllocatorStats& from)
    : MemAllocatorStats(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE MemAllocatorStats::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void MemAllocatorStats::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, num_allocs_),
           0,
           offsetof(Impl_, fragmentation_metric_) -
               offsetof(Impl_, num_allocs_) +
               sizeof(Impl_::fragmentation_metric_));
}
MemAllocatorStats::~MemAllocatorStats() {
  // @@protoc_insertion_point(destructor:tensorflow.MemAllocatorStats)
  SharedDtor(*this);
}
inline void MemAllocatorStats::SharedDtor(MessageLite& self) {
  MemAllocatorStats& this_ = static_cast<MemAllocatorStats&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* MemAllocatorStats::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) MemAllocatorStats(arena);
}
constexpr auto MemAllocatorStats::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(MemAllocatorStats),
                                            alignof(MemAllocatorStats));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull MemAllocatorStats::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_MemAllocatorStats_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &MemAllocatorStats::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<MemAllocatorStats>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &MemAllocatorStats::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<MemAllocatorStats>(), &MemAllocatorStats::ByteSizeLong,
            &MemAllocatorStats::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(MemAllocatorStats, _impl_._cached_size_),
        false,
    },
    &MemAllocatorStats::kDescriptorMethods,
    &descriptor_table_xla_2ftsl_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* MemAllocatorStats::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 0, 0, 2> MemAllocatorStats::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tensorflow::MemAllocatorStats>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int64 num_allocs = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(MemAllocatorStats, _impl_.num_allocs_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(MemAllocatorStats, _impl_.num_allocs_)}},
    // int64 bytes_in_use = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(MemAllocatorStats, _impl_.bytes_in_use_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(MemAllocatorStats, _impl_.bytes_in_use_)}},
    // int64 peak_bytes_in_use = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(MemAllocatorStats, _impl_.peak_bytes_in_use_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(MemAllocatorStats, _impl_.peak_bytes_in_use_)}},
    // int64 largest_alloc_size = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(MemAllocatorStats, _impl_.largest_alloc_size_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(MemAllocatorStats, _impl_.largest_alloc_size_)}},
    // float fragmentation_metric = 5;
    {::_pbi::TcParser::FastF32S1,
     {45, 63, 0, PROTOBUF_FIELD_OFFSET(MemAllocatorStats, _impl_.fragmentation_metric_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // int64 num_allocs = 1;
    {PROTOBUF_FIELD_OFFSET(MemAllocatorStats, _impl_.num_allocs_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // int64 bytes_in_use = 2;
    {PROTOBUF_FIELD_OFFSET(MemAllocatorStats, _impl_.bytes_in_use_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // int64 peak_bytes_in_use = 3;
    {PROTOBUF_FIELD_OFFSET(MemAllocatorStats, _impl_.peak_bytes_in_use_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // int64 largest_alloc_size = 4;
    {PROTOBUF_FIELD_OFFSET(MemAllocatorStats, _impl_.largest_alloc_size_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // float fragmentation_metric = 5;
    {PROTOBUF_FIELD_OFFSET(MemAllocatorStats, _impl_.fragmentation_metric_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void MemAllocatorStats::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.MemAllocatorStats)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.num_allocs_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.fragmentation_metric_) -
      reinterpret_cast<char*>(&_impl_.num_allocs_)) + sizeof(_impl_.fragmentation_metric_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* MemAllocatorStats::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const MemAllocatorStats& this_ = static_cast<const MemAllocatorStats&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* MemAllocatorStats::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const MemAllocatorStats& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:tensorflow.MemAllocatorStats)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // int64 num_allocs = 1;
          if (this_._internal_num_allocs() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt64ToArrayWithField<1>(
                    stream, this_._internal_num_allocs(), target);
          }

          // int64 bytes_in_use = 2;
          if (this_._internal_bytes_in_use() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt64ToArrayWithField<2>(
                    stream, this_._internal_bytes_in_use(), target);
          }

          // int64 peak_bytes_in_use = 3;
          if (this_._internal_peak_bytes_in_use() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt64ToArrayWithField<3>(
                    stream, this_._internal_peak_bytes_in_use(), target);
          }

          // int64 largest_alloc_size = 4;
          if (this_._internal_largest_alloc_size() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt64ToArrayWithField<4>(
                    stream, this_._internal_largest_alloc_size(), target);
          }

          // float fragmentation_metric = 5;
          if (::absl::bit_cast<::uint32_t>(this_._internal_fragmentation_metric()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                5, this_._internal_fragmentation_metric(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:tensorflow.MemAllocatorStats)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t MemAllocatorStats::ByteSizeLong(const MessageLite& base) {
          const MemAllocatorStats& this_ = static_cast<const MemAllocatorStats&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t MemAllocatorStats::ByteSizeLong() const {
          const MemAllocatorStats& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:tensorflow.MemAllocatorStats)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // int64 num_allocs = 1;
            if (this_._internal_num_allocs() != 0) {
              total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
                  this_._internal_num_allocs());
            }
            // int64 bytes_in_use = 2;
            if (this_._internal_bytes_in_use() != 0) {
              total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
                  this_._internal_bytes_in_use());
            }
            // int64 peak_bytes_in_use = 3;
            if (this_._internal_peak_bytes_in_use() != 0) {
              total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
                  this_._internal_peak_bytes_in_use());
            }
            // int64 largest_alloc_size = 4;
            if (this_._internal_largest_alloc_size() != 0) {
              total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
                  this_._internal_largest_alloc_size());
            }
            // float fragmentation_metric = 5;
            if (::absl::bit_cast<::uint32_t>(this_._internal_fragmentation_metric()) != 0) {
              total_size += 5;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void MemAllocatorStats::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<MemAllocatorStats*>(&to_msg);
  auto& from = static_cast<const MemAllocatorStats&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.MemAllocatorStats)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_num_allocs() != 0) {
    _this->_impl_.num_allocs_ = from._impl_.num_allocs_;
  }
  if (from._internal_bytes_in_use() != 0) {
    _this->_impl_.bytes_in_use_ = from._impl_.bytes_in_use_;
  }
  if (from._internal_peak_bytes_in_use() != 0) {
    _this->_impl_.peak_bytes_in_use_ = from._impl_.peak_bytes_in_use_;
  }
  if (from._internal_largest_alloc_size() != 0) {
    _this->_impl_.largest_alloc_size_ = from._impl_.largest_alloc_size_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_fragmentation_metric()) != 0) {
    _this->_impl_.fragmentation_metric_ = from._impl_.fragmentation_metric_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MemAllocatorStats::CopyFrom(const MemAllocatorStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.MemAllocatorStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void MemAllocatorStats::InternalSwap(MemAllocatorStats* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MemAllocatorStats, _impl_.fragmentation_metric_)
      + sizeof(MemAllocatorStats::_impl_.fragmentation_metric_)
      - PROTOBUF_FIELD_OFFSET(MemAllocatorStats, _impl_.num_allocs_)>(
          reinterpret_cast<char*>(&_impl_.num_allocs_),
          reinterpret_cast<char*>(&other->_impl_.num_allocs_));
}

::google::protobuf::Metadata MemAllocatorStats::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class MemChunk::_Internal {
 public:
};

MemChunk::MemChunk(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.MemChunk)
}
inline PROTOBUF_NDEBUG_INLINE MemChunk::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::tensorflow::MemChunk& from_msg)
      : op_name_(arena, from.op_name_),
        _cached_size_{0} {}

MemChunk::MemChunk(
    ::google::protobuf::Arena* arena,
    const MemChunk& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  MemChunk* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, address_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, address_),
           offsetof(Impl_, step_id_) -
               offsetof(Impl_, address_) +
               sizeof(Impl_::step_id_));

  // @@protoc_insertion_point(copy_constructor:tensorflow.MemChunk)
}
inline PROTOBUF_NDEBUG_INLINE MemChunk::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : op_name_(arena),
        _cached_size_{0} {}

inline void MemChunk::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, address_),
           0,
           offsetof(Impl_, step_id_) -
               offsetof(Impl_, address_) +
               sizeof(Impl_::step_id_));
}
MemChunk::~MemChunk() {
  // @@protoc_insertion_point(destructor:tensorflow.MemChunk)
  SharedDtor(*this);
}
inline void MemChunk::SharedDtor(MessageLite& self) {
  MemChunk& this_ = static_cast<MemChunk&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.op_name_.Destroy();
  this_._impl_.~Impl_();
}

inline void* MemChunk::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) MemChunk(arena);
}
constexpr auto MemChunk::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(MemChunk),
                                            alignof(MemChunk));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull MemChunk::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_MemChunk_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &MemChunk::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<MemChunk>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &MemChunk::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<MemChunk>(), &MemChunk::ByteSizeLong,
            &MemChunk::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(MemChunk, _impl_._cached_size_),
        false,
    },
    &MemChunk::kDescriptorMethods,
    &descriptor_table_xla_2ftsl_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* MemChunk::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 9, 0, 43, 2> MemChunk::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    9, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966784,  // skipmap
    offsetof(decltype(_table_), field_entries),
    9,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tensorflow::MemChunk>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // uint64 address = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(MemChunk, _impl_.address_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(MemChunk, _impl_.address_)}},
    // int64 size = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(MemChunk, _impl_.size_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(MemChunk, _impl_.size_)}},
    // int64 requested_size = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(MemChunk, _impl_.requested_size_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(MemChunk, _impl_.requested_size_)}},
    // int32 bin = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MemChunk, _impl_.bin_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(MemChunk, _impl_.bin_)}},
    // string op_name = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(MemChunk, _impl_.op_name_)}},
    // uint64 freed_at_count = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(MemChunk, _impl_.freed_at_count_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(MemChunk, _impl_.freed_at_count_)}},
    // uint64 action_count = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(MemChunk, _impl_.action_count_), 63>(),
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(MemChunk, _impl_.action_count_)}},
    // bool in_use = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(MemChunk, _impl_.in_use_), 63>(),
     {64, 63, 0, PROTOBUF_FIELD_OFFSET(MemChunk, _impl_.in_use_)}},
    // uint64 step_id = 9;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(MemChunk, _impl_.step_id_), 63>(),
     {72, 63, 0, PROTOBUF_FIELD_OFFSET(MemChunk, _impl_.step_id_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // uint64 address = 1;
    {PROTOBUF_FIELD_OFFSET(MemChunk, _impl_.address_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
    // int64 size = 2;
    {PROTOBUF_FIELD_OFFSET(MemChunk, _impl_.size_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // int64 requested_size = 3;
    {PROTOBUF_FIELD_OFFSET(MemChunk, _impl_.requested_size_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // int32 bin = 4;
    {PROTOBUF_FIELD_OFFSET(MemChunk, _impl_.bin_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string op_name = 5;
    {PROTOBUF_FIELD_OFFSET(MemChunk, _impl_.op_name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // uint64 freed_at_count = 6;
    {PROTOBUF_FIELD_OFFSET(MemChunk, _impl_.freed_at_count_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
    // uint64 action_count = 7;
    {PROTOBUF_FIELD_OFFSET(MemChunk, _impl_.action_count_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
    // bool in_use = 8;
    {PROTOBUF_FIELD_OFFSET(MemChunk, _impl_.in_use_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // uint64 step_id = 9;
    {PROTOBUF_FIELD_OFFSET(MemChunk, _impl_.step_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
  }},
  // no aux_entries
  {{
    "\23\0\0\0\0\7\0\0\0\0\0\0\0\0\0\0"
    "tensorflow.MemChunk"
    "op_name"
  }},
};

PROTOBUF_NOINLINE void MemChunk::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.MemChunk)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.op_name_.ClearToEmpty();
  ::memset(&_impl_.address_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.step_id_) -
      reinterpret_cast<char*>(&_impl_.address_)) + sizeof(_impl_.step_id_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* MemChunk::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const MemChunk& this_ = static_cast<const MemChunk&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* MemChunk::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const MemChunk& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:tensorflow.MemChunk)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // uint64 address = 1;
          if (this_._internal_address() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
                1, this_._internal_address(), target);
          }

          // int64 size = 2;
          if (this_._internal_size() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt64ToArrayWithField<2>(
                    stream, this_._internal_size(), target);
          }

          // int64 requested_size = 3;
          if (this_._internal_requested_size() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt64ToArrayWithField<3>(
                    stream, this_._internal_requested_size(), target);
          }

          // int32 bin = 4;
          if (this_._internal_bin() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<4>(
                    stream, this_._internal_bin(), target);
          }

          // string op_name = 5;
          if (!this_._internal_op_name().empty()) {
            const std::string& _s = this_._internal_op_name();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tensorflow.MemChunk.op_name");
            target = stream->WriteStringMaybeAliased(5, _s, target);
          }

          // uint64 freed_at_count = 6;
          if (this_._internal_freed_at_count() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
                6, this_._internal_freed_at_count(), target);
          }

          // uint64 action_count = 7;
          if (this_._internal_action_count() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
                7, this_._internal_action_count(), target);
          }

          // bool in_use = 8;
          if (this_._internal_in_use() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                8, this_._internal_in_use(), target);
          }

          // uint64 step_id = 9;
          if (this_._internal_step_id() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
                9, this_._internal_step_id(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:tensorflow.MemChunk)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t MemChunk::ByteSizeLong(const MessageLite& base) {
          const MemChunk& this_ = static_cast<const MemChunk&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t MemChunk::ByteSizeLong() const {
          const MemChunk& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:tensorflow.MemChunk)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string op_name = 5;
            if (!this_._internal_op_name().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_op_name());
            }
            // uint64 address = 1;
            if (this_._internal_address() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
                  this_._internal_address());
            }
            // int64 size = 2;
            if (this_._internal_size() != 0) {
              total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
                  this_._internal_size());
            }
            // int64 requested_size = 3;
            if (this_._internal_requested_size() != 0) {
              total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
                  this_._internal_requested_size());
            }
            // uint64 freed_at_count = 6;
            if (this_._internal_freed_at_count() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
                  this_._internal_freed_at_count());
            }
            // int32 bin = 4;
            if (this_._internal_bin() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_bin());
            }
            // bool in_use = 8;
            if (this_._internal_in_use() != 0) {
              total_size += 2;
            }
            // uint64 action_count = 7;
            if (this_._internal_action_count() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
                  this_._internal_action_count());
            }
            // uint64 step_id = 9;
            if (this_._internal_step_id() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
                  this_._internal_step_id());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void MemChunk::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<MemChunk*>(&to_msg);
  auto& from = static_cast<const MemChunk&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.MemChunk)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_op_name().empty()) {
    _this->_internal_set_op_name(from._internal_op_name());
  }
  if (from._internal_address() != 0) {
    _this->_impl_.address_ = from._impl_.address_;
  }
  if (from._internal_size() != 0) {
    _this->_impl_.size_ = from._impl_.size_;
  }
  if (from._internal_requested_size() != 0) {
    _this->_impl_.requested_size_ = from._impl_.requested_size_;
  }
  if (from._internal_freed_at_count() != 0) {
    _this->_impl_.freed_at_count_ = from._impl_.freed_at_count_;
  }
  if (from._internal_bin() != 0) {
    _this->_impl_.bin_ = from._impl_.bin_;
  }
  if (from._internal_in_use() != 0) {
    _this->_impl_.in_use_ = from._impl_.in_use_;
  }
  if (from._internal_action_count() != 0) {
    _this->_impl_.action_count_ = from._impl_.action_count_;
  }
  if (from._internal_step_id() != 0) {
    _this->_impl_.step_id_ = from._impl_.step_id_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MemChunk::CopyFrom(const MemChunk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.MemChunk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void MemChunk::InternalSwap(MemChunk* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.op_name_, &other->_impl_.op_name_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MemChunk, _impl_.step_id_)
      + sizeof(MemChunk::_impl_.step_id_)
      - PROTOBUF_FIELD_OFFSET(MemChunk, _impl_.address_)>(
          reinterpret_cast<char*>(&_impl_.address_),
          reinterpret_cast<char*>(&other->_impl_.address_));
}

::google::protobuf::Metadata MemChunk::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class BinSummary::_Internal {
 public:
};

BinSummary::BinSummary(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.BinSummary)
}
BinSummary::BinSummary(
    ::google::protobuf::Arena* arena, const BinSummary& from)
    : BinSummary(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE BinSummary::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void BinSummary::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, total_bytes_in_use_),
           0,
           offsetof(Impl_, bin_) -
               offsetof(Impl_, total_bytes_in_use_) +
               sizeof(Impl_::bin_));
}
BinSummary::~BinSummary() {
  // @@protoc_insertion_point(destructor:tensorflow.BinSummary)
  SharedDtor(*this);
}
inline void BinSummary::SharedDtor(MessageLite& self) {
  BinSummary& this_ = static_cast<BinSummary&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* BinSummary::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) BinSummary(arena);
}
constexpr auto BinSummary::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(BinSummary),
                                            alignof(BinSummary));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull BinSummary::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_BinSummary_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &BinSummary::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<BinSummary>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &BinSummary::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<BinSummary>(), &BinSummary::ByteSizeLong,
            &BinSummary::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(BinSummary, _impl_._cached_size_),
        false,
    },
    &BinSummary::kDescriptorMethods,
    &descriptor_table_xla_2ftsl_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* BinSummary::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 0, 0, 2> BinSummary::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tensorflow::BinSummary>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 bin = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(BinSummary, _impl_.bin_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(BinSummary, _impl_.bin_)}},
    // int64 total_bytes_in_use = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(BinSummary, _impl_.total_bytes_in_use_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(BinSummary, _impl_.total_bytes_in_use_)}},
    // int64 total_bytes_in_bin = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(BinSummary, _impl_.total_bytes_in_bin_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(BinSummary, _impl_.total_bytes_in_bin_)}},
    // int64 total_chunks_in_use = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(BinSummary, _impl_.total_chunks_in_use_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(BinSummary, _impl_.total_chunks_in_use_)}},
    // int64 total_chunks_in_bin = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(BinSummary, _impl_.total_chunks_in_bin_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(BinSummary, _impl_.total_chunks_in_bin_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 bin = 1;
    {PROTOBUF_FIELD_OFFSET(BinSummary, _impl_.bin_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int64 total_bytes_in_use = 2;
    {PROTOBUF_FIELD_OFFSET(BinSummary, _impl_.total_bytes_in_use_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // int64 total_bytes_in_bin = 3;
    {PROTOBUF_FIELD_OFFSET(BinSummary, _impl_.total_bytes_in_bin_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // int64 total_chunks_in_use = 4;
    {PROTOBUF_FIELD_OFFSET(BinSummary, _impl_.total_chunks_in_use_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // int64 total_chunks_in_bin = 5;
    {PROTOBUF_FIELD_OFFSET(BinSummary, _impl_.total_chunks_in_bin_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void BinSummary::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.BinSummary)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.total_bytes_in_use_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.bin_) -
      reinterpret_cast<char*>(&_impl_.total_bytes_in_use_)) + sizeof(_impl_.bin_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* BinSummary::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const BinSummary& this_ = static_cast<const BinSummary&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* BinSummary::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const BinSummary& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:tensorflow.BinSummary)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // int32 bin = 1;
          if (this_._internal_bin() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<1>(
                    stream, this_._internal_bin(), target);
          }

          // int64 total_bytes_in_use = 2;
          if (this_._internal_total_bytes_in_use() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt64ToArrayWithField<2>(
                    stream, this_._internal_total_bytes_in_use(), target);
          }

          // int64 total_bytes_in_bin = 3;
          if (this_._internal_total_bytes_in_bin() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt64ToArrayWithField<3>(
                    stream, this_._internal_total_bytes_in_bin(), target);
          }

          // int64 total_chunks_in_use = 4;
          if (this_._internal_total_chunks_in_use() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt64ToArrayWithField<4>(
                    stream, this_._internal_total_chunks_in_use(), target);
          }

          // int64 total_chunks_in_bin = 5;
          if (this_._internal_total_chunks_in_bin() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt64ToArrayWithField<5>(
                    stream, this_._internal_total_chunks_in_bin(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:tensorflow.BinSummary)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t BinSummary::ByteSizeLong(const MessageLite& base) {
          const BinSummary& this_ = static_cast<const BinSummary&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t BinSummary::ByteSizeLong() const {
          const BinSummary& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:tensorflow.BinSummary)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // int64 total_bytes_in_use = 2;
            if (this_._internal_total_bytes_in_use() != 0) {
              total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
                  this_._internal_total_bytes_in_use());
            }
            // int64 total_bytes_in_bin = 3;
            if (this_._internal_total_bytes_in_bin() != 0) {
              total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
                  this_._internal_total_bytes_in_bin());
            }
            // int64 total_chunks_in_use = 4;
            if (this_._internal_total_chunks_in_use() != 0) {
              total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
                  this_._internal_total_chunks_in_use());
            }
            // int64 total_chunks_in_bin = 5;
            if (this_._internal_total_chunks_in_bin() != 0) {
              total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
                  this_._internal_total_chunks_in_bin());
            }
            // int32 bin = 1;
            if (this_._internal_bin() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_bin());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void BinSummary::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<BinSummary*>(&to_msg);
  auto& from = static_cast<const BinSummary&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.BinSummary)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_total_bytes_in_use() != 0) {
    _this->_impl_.total_bytes_in_use_ = from._impl_.total_bytes_in_use_;
  }
  if (from._internal_total_bytes_in_bin() != 0) {
    _this->_impl_.total_bytes_in_bin_ = from._impl_.total_bytes_in_bin_;
  }
  if (from._internal_total_chunks_in_use() != 0) {
    _this->_impl_.total_chunks_in_use_ = from._impl_.total_chunks_in_use_;
  }
  if (from._internal_total_chunks_in_bin() != 0) {
    _this->_impl_.total_chunks_in_bin_ = from._impl_.total_chunks_in_bin_;
  }
  if (from._internal_bin() != 0) {
    _this->_impl_.bin_ = from._impl_.bin_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void BinSummary::CopyFrom(const BinSummary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.BinSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void BinSummary::InternalSwap(BinSummary* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BinSummary, _impl_.bin_)
      + sizeof(BinSummary::_impl_.bin_)
      - PROTOBUF_FIELD_OFFSET(BinSummary, _impl_.total_bytes_in_use_)>(
          reinterpret_cast<char*>(&_impl_.total_bytes_in_use_),
          reinterpret_cast<char*>(&other->_impl_.total_bytes_in_use_));
}

::google::protobuf::Metadata BinSummary::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SnapShot::_Internal {
 public:
};

SnapShot::SnapShot(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.SnapShot)
}
SnapShot::SnapShot(
    ::google::protobuf::Arena* arena, const SnapShot& from)
    : SnapShot(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE SnapShot::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void SnapShot::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, action_count_),
           0,
           offsetof(Impl_, size_) -
               offsetof(Impl_, action_count_) +
               sizeof(Impl_::size_));
}
SnapShot::~SnapShot() {
  // @@protoc_insertion_point(destructor:tensorflow.SnapShot)
  SharedDtor(*this);
}
inline void SnapShot::SharedDtor(MessageLite& self) {
  SnapShot& this_ = static_cast<SnapShot&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* SnapShot::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) SnapShot(arena);
}
constexpr auto SnapShot::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(SnapShot),
                                            alignof(SnapShot));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull SnapShot::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_SnapShot_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &SnapShot::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<SnapShot>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &SnapShot::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<SnapShot>(), &SnapShot::ByteSizeLong,
            &SnapShot::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(SnapShot, _impl_._cached_size_),
        false,
    },
    &SnapShot::kDescriptorMethods,
    &descriptor_table_xla_2ftsl_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* SnapShot::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> SnapShot::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tensorflow::SnapShot>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // int64 size = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(SnapShot, _impl_.size_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(SnapShot, _impl_.size_)}},
    // uint64 action_count = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(SnapShot, _impl_.action_count_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(SnapShot, _impl_.action_count_)}},
  }}, {{
    65535, 65535
  }}, {{
    // uint64 action_count = 1;
    {PROTOBUF_FIELD_OFFSET(SnapShot, _impl_.action_count_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
    // int64 size = 2;
    {PROTOBUF_FIELD_OFFSET(SnapShot, _impl_.size_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void SnapShot::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.SnapShot)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.action_count_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.size_) -
      reinterpret_cast<char*>(&_impl_.action_count_)) + sizeof(_impl_.size_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* SnapShot::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const SnapShot& this_ = static_cast<const SnapShot&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* SnapShot::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const SnapShot& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:tensorflow.SnapShot)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // uint64 action_count = 1;
          if (this_._internal_action_count() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
                1, this_._internal_action_count(), target);
          }

          // int64 size = 2;
          if (this_._internal_size() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt64ToArrayWithField<2>(
                    stream, this_._internal_size(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:tensorflow.SnapShot)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t SnapShot::ByteSizeLong(const MessageLite& base) {
          const SnapShot& this_ = static_cast<const SnapShot&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t SnapShot::ByteSizeLong() const {
          const SnapShot& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:tensorflow.SnapShot)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // uint64 action_count = 1;
            if (this_._internal_action_count() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
                  this_._internal_action_count());
            }
            // int64 size = 2;
            if (this_._internal_size() != 0) {
              total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
                  this_._internal_size());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void SnapShot::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SnapShot*>(&to_msg);
  auto& from = static_cast<const SnapShot&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.SnapShot)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_action_count() != 0) {
    _this->_impl_.action_count_ = from._impl_.action_count_;
  }
  if (from._internal_size() != 0) {
    _this->_impl_.size_ = from._impl_.size_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SnapShot::CopyFrom(const SnapShot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.SnapShot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SnapShot::InternalSwap(SnapShot* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SnapShot, _impl_.size_)
      + sizeof(SnapShot::_impl_.size_)
      - PROTOBUF_FIELD_OFFSET(SnapShot, _impl_.action_count_)>(
          reinterpret_cast<char*>(&_impl_.action_count_),
          reinterpret_cast<char*>(&other->_impl_.action_count_));
}

::google::protobuf::Metadata SnapShot::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class MemoryDump::_Internal {
 public:
  using HasBits =
      decltype(std::declval<MemoryDump>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(MemoryDump, _impl_._has_bits_);
};

MemoryDump::MemoryDump(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.MemoryDump)
}
inline PROTOBUF_NDEBUG_INLINE MemoryDump::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::tensorflow::MemoryDump& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        bin_summary_{visibility, arena, from.bin_summary_},
        chunk_{visibility, arena, from.chunk_},
        snap_shot_{visibility, arena, from.snap_shot_},
        allocator_name_(arena, from.allocator_name_) {}

MemoryDump::MemoryDump(
    ::google::protobuf::Arena* arena,
    const MemoryDump& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  MemoryDump* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.stats_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::tensorflow::MemAllocatorStats>(
                              arena, *from._impl_.stats_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:tensorflow.MemoryDump)
}
inline PROTOBUF_NDEBUG_INLINE MemoryDump::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        bin_summary_{visibility, arena},
        chunk_{visibility, arena},
        snap_shot_{visibility, arena},
        allocator_name_(arena) {}

inline void MemoryDump::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.stats_ = {};
}
MemoryDump::~MemoryDump() {
  // @@protoc_insertion_point(destructor:tensorflow.MemoryDump)
  SharedDtor(*this);
}
inline void MemoryDump::SharedDtor(MessageLite& self) {
  MemoryDump& this_ = static_cast<MemoryDump&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.allocator_name_.Destroy();
  delete this_._impl_.stats_;
  this_._impl_.~Impl_();
}

inline void* MemoryDump::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) MemoryDump(arena);
}
constexpr auto MemoryDump::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(MemoryDump, _impl_.bin_summary_) +
          decltype(MemoryDump::_impl_.bin_summary_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(MemoryDump, _impl_.chunk_) +
          decltype(MemoryDump::_impl_.chunk_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(MemoryDump, _impl_.snap_shot_) +
          decltype(MemoryDump::_impl_.snap_shot_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(MemoryDump), alignof(MemoryDump), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&MemoryDump::PlacementNew_,
                                 sizeof(MemoryDump),
                                 alignof(MemoryDump));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull MemoryDump::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_MemoryDump_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &MemoryDump::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<MemoryDump>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &MemoryDump::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<MemoryDump>(), &MemoryDump::ByteSizeLong,
            &MemoryDump::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(MemoryDump, _impl_._cached_size_),
        false,
    },
    &MemoryDump::kDescriptorMethods,
    &descriptor_table_xla_2ftsl_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* MemoryDump::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 4, 44, 2> MemoryDump::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(MemoryDump, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    4,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tensorflow::MemoryDump>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string allocator_name = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(MemoryDump, _impl_.allocator_name_)}},
    // repeated .tensorflow.BinSummary bin_summary = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(MemoryDump, _impl_.bin_summary_)}},
    // repeated .tensorflow.MemChunk chunk = 3;
    {::_pbi::TcParser::FastMtR1,
     {26, 63, 1, PROTOBUF_FIELD_OFFSET(MemoryDump, _impl_.chunk_)}},
    // repeated .tensorflow.SnapShot snap_shot = 4;
    {::_pbi::TcParser::FastMtR1,
     {34, 63, 2, PROTOBUF_FIELD_OFFSET(MemoryDump, _impl_.snap_shot_)}},
    // .tensorflow.MemAllocatorStats stats = 5;
    {::_pbi::TcParser::FastMtS1,
     {42, 0, 3, PROTOBUF_FIELD_OFFSET(MemoryDump, _impl_.stats_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string allocator_name = 1;
    {PROTOBUF_FIELD_OFFSET(MemoryDump, _impl_.allocator_name_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated .tensorflow.BinSummary bin_summary = 2;
    {PROTOBUF_FIELD_OFFSET(MemoryDump, _impl_.bin_summary_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .tensorflow.MemChunk chunk = 3;
    {PROTOBUF_FIELD_OFFSET(MemoryDump, _impl_.chunk_), -1, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .tensorflow.SnapShot snap_shot = 4;
    {PROTOBUF_FIELD_OFFSET(MemoryDump, _impl_.snap_shot_), -1, 2,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tensorflow.MemAllocatorStats stats = 5;
    {PROTOBUF_FIELD_OFFSET(MemoryDump, _impl_.stats_), _Internal::kHasBitsOffset + 0, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tensorflow::BinSummary>()},
    {::_pbi::TcParser::GetTable<::tensorflow::MemChunk>()},
    {::_pbi::TcParser::GetTable<::tensorflow::SnapShot>()},
    {::_pbi::TcParser::GetTable<::tensorflow::MemAllocatorStats>()},
  }}, {{
    "\25\16\0\0\0\0\0\0"
    "tensorflow.MemoryDump"
    "allocator_name"
  }},
};

PROTOBUF_NOINLINE void MemoryDump::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.MemoryDump)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bin_summary_.Clear();
  _impl_.chunk_.Clear();
  _impl_.snap_shot_.Clear();
  _impl_.allocator_name_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.stats_ != nullptr);
    _impl_.stats_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* MemoryDump::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const MemoryDump& this_ = static_cast<const MemoryDump&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* MemoryDump::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const MemoryDump& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:tensorflow.MemoryDump)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string allocator_name = 1;
          if (!this_._internal_allocator_name().empty()) {
            const std::string& _s = this_._internal_allocator_name();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tensorflow.MemoryDump.allocator_name");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // repeated .tensorflow.BinSummary bin_summary = 2;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_bin_summary_size());
               i < n; i++) {
            const auto& repfield = this_._internal_bin_summary().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    2, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          // repeated .tensorflow.MemChunk chunk = 3;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_chunk_size());
               i < n; i++) {
            const auto& repfield = this_._internal_chunk().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    3, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          // repeated .tensorflow.SnapShot snap_shot = 4;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_snap_shot_size());
               i < n; i++) {
            const auto& repfield = this_._internal_snap_shot().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    4, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .tensorflow.MemAllocatorStats stats = 5;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                5, *this_._impl_.stats_, this_._impl_.stats_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:tensorflow.MemoryDump)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t MemoryDump::ByteSizeLong(const MessageLite& base) {
          const MemoryDump& this_ = static_cast<const MemoryDump&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t MemoryDump::ByteSizeLong() const {
          const MemoryDump& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:tensorflow.MemoryDump)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .tensorflow.BinSummary bin_summary = 2;
            {
              total_size += 1UL * this_._internal_bin_summary_size();
              for (const auto& msg : this_._internal_bin_summary()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
            // repeated .tensorflow.MemChunk chunk = 3;
            {
              total_size += 1UL * this_._internal_chunk_size();
              for (const auto& msg : this_._internal_chunk()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
            // repeated .tensorflow.SnapShot snap_shot = 4;
            {
              total_size += 1UL * this_._internal_snap_shot_size();
              for (const auto& msg : this_._internal_snap_shot()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
           {
            // string allocator_name = 1;
            if (!this_._internal_allocator_name().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_allocator_name());
            }
          }
           {
            // .tensorflow.MemAllocatorStats stats = 5;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.stats_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void MemoryDump::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<MemoryDump*>(&to_msg);
  auto& from = static_cast<const MemoryDump&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.MemoryDump)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_bin_summary()->MergeFrom(
      from._internal_bin_summary());
  _this->_internal_mutable_chunk()->MergeFrom(
      from._internal_chunk());
  _this->_internal_mutable_snap_shot()->MergeFrom(
      from._internal_snap_shot());
  if (!from._internal_allocator_name().empty()) {
    _this->_internal_set_allocator_name(from._internal_allocator_name());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.stats_ != nullptr);
    if (_this->_impl_.stats_ == nullptr) {
      _this->_impl_.stats_ =
          ::google::protobuf::Message::CopyConstruct<::tensorflow::MemAllocatorStats>(arena, *from._impl_.stats_);
    } else {
      _this->_impl_.stats_->MergeFrom(*from._impl_.stats_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MemoryDump::CopyFrom(const MemoryDump& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.MemoryDump)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void MemoryDump::InternalSwap(MemoryDump* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.bin_summary_.InternalSwap(&other->_impl_.bin_summary_);
  _impl_.chunk_.InternalSwap(&other->_impl_.chunk_);
  _impl_.snap_shot_.InternalSwap(&other->_impl_.snap_shot_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.allocator_name_, &other->_impl_.allocator_name_, arena);
  swap(_impl_.stats_, other->_impl_.stats_);
}

::google::protobuf::Metadata MemoryDump::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace tensorflow
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_xla_2ftsl_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
