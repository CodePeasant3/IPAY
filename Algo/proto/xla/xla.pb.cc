// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: xla/xla.proto
// Protobuf C++ Version: 5.29.0

#include "xla/xla.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace xla {

inline constexpr ShardableValueUpdatePairProto::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : parameter_shape_index_{},
        _parameter_shape_index_cached_byte_size_{0},
        output_shape_index_{},
        _output_shape_index_cached_byte_size_{0},
        input_parameter_number_{::int64_t{0}},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ShardableValueUpdatePairProto::ShardableValueUpdatePairProto(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ShardableValueUpdatePairProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ShardableValueUpdatePairProtoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ShardableValueUpdatePairProtoDefaultTypeInternal() {}
  union {
    ShardableValueUpdatePairProto _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ShardableValueUpdatePairProtoDefaultTypeInternal _ShardableValueUpdatePairProto_default_instance_;

inline constexpr ScheduleProto_Instruction::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : id_{::int64_t{0}},
        start_timestamp_cycles_{0},
        end_timestamp_cycles_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ScheduleProto_Instruction::ScheduleProto_Instruction(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ScheduleProto_InstructionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ScheduleProto_InstructionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ScheduleProto_InstructionDefaultTypeInternal() {}
  union {
    ScheduleProto_Instruction _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ScheduleProto_InstructionDefaultTypeInternal _ScheduleProto_Instruction_default_instance_;

inline constexpr HloModuleConfigProto_Int64List::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : vals_{},
        _vals_cached_byte_size_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR HloModuleConfigProto_Int64List::HloModuleConfigProto_Int64List(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct HloModuleConfigProto_Int64ListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HloModuleConfigProto_Int64ListDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HloModuleConfigProto_Int64ListDefaultTypeInternal() {}
  union {
    HloModuleConfigProto_Int64List _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HloModuleConfigProto_Int64ListDefaultTypeInternal _HloModuleConfigProto_Int64List_default_instance_;

inline constexpr HloModuleConfigProto_BoolList::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : vals_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR HloModuleConfigProto_BoolList::HloModuleConfigProto_BoolList(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct HloModuleConfigProto_BoolListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HloModuleConfigProto_BoolListDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HloModuleConfigProto_BoolListDefaultTypeInternal() {}
  union {
    HloModuleConfigProto_BoolList _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HloModuleConfigProto_BoolListDefaultTypeInternal _HloModuleConfigProto_BoolList_default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR HloModuleConfigProto_AnalysisAllowanceMapEntry_DoNotUse::HloModuleConfigProto_AnalysisAllowanceMapEntry_DoNotUse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : HloModuleConfigProto_AnalysisAllowanceMapEntry_DoNotUse::MapEntry(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : HloModuleConfigProto_AnalysisAllowanceMapEntry_DoNotUse::MapEntry() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct HloModuleConfigProto_AnalysisAllowanceMapEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HloModuleConfigProto_AnalysisAllowanceMapEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HloModuleConfigProto_AnalysisAllowanceMapEntry_DoNotUseDefaultTypeInternal() {}
  union {
    HloModuleConfigProto_AnalysisAllowanceMapEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HloModuleConfigProto_AnalysisAllowanceMapEntry_DoNotUseDefaultTypeInternal _HloModuleConfigProto_AnalysisAllowanceMapEntry_DoNotUse_default_instance_;

inline constexpr GpuCompilationEnvironment::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : dummy_flag_{::int64_t{0}},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR GpuCompilationEnvironment::GpuCompilationEnvironment(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct GpuCompilationEnvironmentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GpuCompilationEnvironmentDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GpuCompilationEnvironmentDefaultTypeInternal() {}
  union {
    GpuCompilationEnvironment _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GpuCompilationEnvironmentDefaultTypeInternal _GpuCompilationEnvironment_default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR DebugOptions_XlaBackendExtraOptionsEntry_DoNotUse::DebugOptions_XlaBackendExtraOptionsEntry_DoNotUse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : DebugOptions_XlaBackendExtraOptionsEntry_DoNotUse::MapEntry(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : DebugOptions_XlaBackendExtraOptionsEntry_DoNotUse::MapEntry() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct DebugOptions_XlaBackendExtraOptionsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DebugOptions_XlaBackendExtraOptionsEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DebugOptions_XlaBackendExtraOptionsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    DebugOptions_XlaBackendExtraOptionsEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DebugOptions_XlaBackendExtraOptionsEntry_DoNotUseDefaultTypeInternal _DebugOptions_XlaBackendExtraOptionsEntry_DoNotUse_default_instance_;

inline constexpr HloModuleConfigProto_Int64ListList::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : lists_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR HloModuleConfigProto_Int64ListList::HloModuleConfigProto_Int64ListList(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct HloModuleConfigProto_Int64ListListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HloModuleConfigProto_Int64ListListDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HloModuleConfigProto_Int64ListListDefaultTypeInternal() {}
  union {
    HloModuleConfigProto_Int64ListList _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HloModuleConfigProto_Int64ListListDefaultTypeInternal _HloModuleConfigProto_Int64ListList_default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR HloModuleConfigProto_DotConfigEntry_DoNotUse::HloModuleConfigProto_DotConfigEntry_DoNotUse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : HloModuleConfigProto_DotConfigEntry_DoNotUse::MapEntry(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : HloModuleConfigProto_DotConfigEntry_DoNotUse::MapEntry() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct HloModuleConfigProto_DotConfigEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HloModuleConfigProto_DotConfigEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HloModuleConfigProto_DotConfigEntry_DoNotUseDefaultTypeInternal() {}
  union {
    HloModuleConfigProto_DotConfigEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HloModuleConfigProto_DotConfigEntry_DoNotUseDefaultTypeInternal _HloModuleConfigProto_DotConfigEntry_DoNotUse_default_instance_;

inline constexpr DebugOptions::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : xla_disable_hlo_passes_{},
        xla_enable_hlo_passes_only_{},
        xla_gpu_ptx_file_{},
        xla_gpu_llvm_ir_file_{},
        xla_gpu_enable_command_buffer_{},
        _xla_gpu_enable_command_buffer_cached_byte_size_{0},
        xla_gpu_disable_async_collectives_{},
        _xla_gpu_disable_async_collectives_cached_byte_size_{0},
        legacy_command_buffer_custom_call_targets_{},
        xla_backend_extra_options_{},
        xla_gpu_cuda_data_dir_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        xla_dump_to_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        xla_dump_hlo_module_re_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        xla_dump_hlo_pass_re_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        xla_gpu_algorithm_denylist_path_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        xla_gpu_asm_extra_flags_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        xla_dump_hlo_pipeline_re_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        xla_gpu_pgle_profile_file_or_directory_path_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        xla_gpu_dump_autotune_results_to_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        xla_gpu_load_autotune_results_from_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        xla_gpu_target_config_filename_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        xla_gpu_enable_custom_fusions_re_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        xla_gpu_dump_autotune_logs_to_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        xla_gpu_override_gemm_autotuner_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        xla_gpu_kernel_cache_file_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        xla_gpu_per_fusion_autotune_cache_dir_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        xla_backend_optimization_level_{0},
        xla_hlo_profile_{false},
        xla_disable_all_hlo_passes_{false},
        xla_embed_ir_in_executable_{false},
        xla_eliminate_hlo_implicit_broadcast_{false},
        xla_cpu_multi_thread_eigen_{false},
        xla_gpu_ftz_{false},
        xla_llvm_enable_alias_scope_metadata_{false},
        xla_llvm_enable_noalias_metadata_{false},
        xla_llvm_enable_invariant_load_metadata_{false},
        xla_llvm_disable_expensive_passes_{false},
        xla_test_all_output_layouts_{false},
        xla_test_all_input_layouts_{false},
        xla_force_host_platform_device_count_{0},
        xla_hlo_graph_sharding_color_{false},
        xla_cpu_use_mkl_dnn_{false},
        xla_gpu_enable_fast_min_max_{false},
        xla_allow_excess_precision_{false},
        xla_gpu_crash_on_verification_failures_{false},
        xla_gpu_disable_gpuasm_optimizations_{false},
        xla_hlo_evaluator_use_fast_path_{false},
        xla_allow_scalar_index_dynamic_ops_{false},
        xla_step_marker_location_{static_cast< ::xla::DebugOptions_StepMarkerLocation >(0)},
        xla_dump_hlo_as_text_{false},
        xla_dump_hlo_as_proto_{false},
        xla_dump_hlo_as_dot_{false},
        xla_dump_hlo_as_url_{false},
        xla_gpu_autotune_level_{0},
        xla_dump_hlo_as_html_{false},
        xla_dump_fusion_visualization_{false},
        xla_dump_hlo_snapshots_{false},
        xla_dump_include_timestamp_{false},
        xla_dump_max_hlo_modules_{0},
        xla_multiheap_size_constraint_per_heap_{0},
        xla_dump_module_metadata_{false},
        xla_dump_compress_protos_{false},
        xla_dump_hlo_as_long_text_{false},
        xla_gpu_force_conv_nchw_{false},
        xla_gpu_force_compilation_parallelism_{0},
        xla_gpu_force_conv_nhwc_{false},
        xla_gpu_dump_llvmir_{false},
        xla_dump_enable_mlir_pretty_form_{false},
        xla_tpu_detect_nan_{false},
        xla_gpu_all_reduce_combine_threshold_bytes_{::int64_t{0}},
        xla_gpu_nccl_termination_timeout_seconds_{::int64_t{0}},
        xla_gpu_all_reduce_blueconnect_num_devices_per_host_{0},
        xla_tpu_detect_inf_{false},
        xla_cpu_enable_xprof_traceme_{false},
        xla_gpu_unsafe_fallback_to_driver_on_ptxas_not_found_{false},
        xla_detailed_logging_{false},
        xla_gpu_redzone_scratch_max_megabytes_{::int64_t{0}},
        xla_cpu_fast_math_honor_functions_{false},
        xla_cpu_fast_math_honor_infs_{false},
        xla_cpu_fast_math_honor_nans_{false},
        xla_cpu_use_thunk_runtime_{false},
        xla_cpu_enable_concurrency_optimized_scheduler_{false},
        xla_cpu_enable_fast_math_{false},
        xla_cpu_enable_fast_min_max_{false},
        xla_cpu_fast_math_honor_division_{false},
        xla_dump_disable_metadata_{false},
        xla_gpu_strict_conv_algorithm_picker_{false},
        xla_gpu_enable_custom_fusions_{false},
        xla_gpu_enable_dynamic_slice_fusion_{false},
        xla_gpu_shape_checks_{static_cast< ::xla::DebugOptions_ShapeChecks >(0)},
        xla_gpu_enable_shared_constants_{false},
        xla_gpu_enable_cublaslt_{false},
        xla_gpu_graph_enable_concurrent_region_{false},
        xla_cpu_use_acl_{false},
        xla_cpu_strict_dot_conv_math_{false},
        xla_gpu_use_runtime_fusion_{false},
        xla_dump_latency_hiding_schedule_{false},
        xla_cpu_enable_mlir_tiling_and_fusion_{false},
        xla_partitioning_algorithm_{static_cast< ::xla::DebugOptions_PartitioningAlgorithm >(0)},
        xla_cpu_enable_custom_matmul_tiling_{false},
        xla_cpu_enable_mlir_fusion_outlining_{false},
        xla_cpu_enable_experimental_deallocation_{false},
        xla_gpu_enable_latency_hiding_scheduler_{false},
        xla_cpu_matmul_tiling_m_dim_{::int64_t{0}},
        xla_cpu_matmul_tiling_n_dim_{::int64_t{0}},
        xla_cpu_matmul_tiling_k_dim_{::int64_t{0}},
        xla_gpu_collective_inflation_factor_{0},
        xla_gpu_graph_min_graph_size_{0},
        xla_gpu_all_gather_combine_threshold_bytes_{::int64_t{0}},
        xla_gpu_reduce_scatter_combine_threshold_bytes_{::int64_t{0}},
        xla_gpu_enable_cudnn_frontend_{false},
        xla_gpu_enable_cudnn_fmha_{false},
        xla_gpu_fused_attention_use_cudnn_rng_{false},
        xla_gpu_enable_cudnn_layer_norm_{false},
        xla_gpu_run_post_layout_collective_pipeliner_{false},
        xla_gpu_enable_triton_gemm_{false},
        xla_gpu_enable_cudnn_int8x32_convolution_reordering_{false},
        xla_gpu_triton_gemm_any_{false},
        xla_gpu_auto_spmd_partitioning_memory_budget_gb_{0},
        xla_gpu_exhaustive_tiling_search_{false},
        xla_gpu_enable_priority_fusion_{false},
        xla_gpu_triton_gemm_disable_reduced_precision_reduction_{false},
        xla_gpu_dump_autotuned_gemm_fusions_{false},
        xla_gpu_auto_spmd_partitioning_memory_budget_ratio_{0},
        xla_gpu_enable_highest_priority_async_stream_{false},
        xla_gpu_enable_analytical_latency_estimator_{false},
        xla_gpu_lhs_enable_gpu_async_tracker_{false},
        xla_gpu_enable_pipelined_collectives_{false},
        xla_gpu_redzone_padding_bytes_{::int64_t{0}},
        xla_gpu_triton_fusion_level_{0},
        xla_gpu_enable_pipelined_all_reduce_{false},
        xla_gpu_enable_pipelined_all_gather_{false},
        xla_gpu_enable_pipelined_reduce_scatter_{false},
        xla_gpu_enable_pipelined_p2p_{false},
        xla_enable_dumping_{false},
        xla_gpu_enable_llvm_module_compilation_parallelism_{false},
        xla_gpu_deterministic_ops_{false},
        xla_gpu_enable_all_gather_combine_by_dim_{false},
        xla_gpu_copy_insertion_use_region_analysis_{false},
        xla_gpu_collect_cost_model_stats_{false},
        xla_gpu_enable_split_k_autotuning_{false},
        xla_gpu_enable_reduction_epilogue_fusion_{false},
        xla_gpu_collective_permute_decomposer_threshold_{::int64_t{0}},
        xla_gpu_enable_reduce_scatter_combine_by_dim_{false},
        xla_gpu_enable_reassociation_for_converted_ar_{false},
        xla_gpu_enable_while_loop_reduce_scatter_code_motion_{false},
        xla_llvm_force_inline_before_split_{false},
        xla_gpu_experimental_disable_binary_libraries_{false},
        xla_gpu_experimental_enable_triton_softmax_priority_fusion_{false},
        xla_gpu_unsupported_enable_triton_gemm_{false},
        xla_hlo_graph_addresses_{false},
        xla_gpu_enable_nccl_clique_optimization_{false},
        xla_gpu_mock_custom_calls_{false},
        xla_gpu_cublas_fallback_{false},
        xla_gpu_enable_while_loop_double_buffering_{false},
        xla_gpu_llvm_verification_level_{0},
        xla_debug_buffer_assignment_show_max_{::int64_t{0}},
        xla_gpu_ensure_minor_dot_contraction_dims_{false},
        xla_gpu_filter_kernels_spilling_registers_on_autotuning_{false},
        xla_gpu_enable_cub_radix_sort_{false},
        xla_gpu_enable_triton_hopper_{false},
        xla_gpu_memory_limit_slop_factor_{0},
        xla_gpu_threshold_for_windowed_einsum_mib_{::int64_t{0}},
        xla_gpu_nccl_collective_max_nchannels_{::int64_t{0}},
        xla_gpu_enable_nccl_user_buffers_{false},
        xla_gpu_enable_nccl_comm_splitting_{false},
        xla_gpu_enable_nccl_per_stream_comms_{false},
        xla_gpu_enable_libnvptxcompiler_{false},
        xla_gpu_enable_dot_strength_reduction_{false},
        xla_gpu_multi_streamed_windowed_einsum_{false},
        xla_gpu_enable_bf16_6way_gemm_{false},
        xla_gpu_enable_bf16_3way_gemm_{false},
        xla_gpu_nccl_p2p_max_nchannels_{::int64_t{0}},
        xla_gpu_gemm_rewrite_size_threshold_{::int64_t{0}},
        xla_gpu_cudnn_gemm_fusion_level_{0},
        xla_gpu_require_complete_aot_autotune_results_{false},
        xla_gpu_use_memcpy_local_p2p_{false},
        xla_dump_large_constants_{false},
        xla_gpu_verify_triton_fusion_numerics_{false},
        xla_gpu_autotune_max_solutions_{::int64_t{0}},
        xla_reduce_window_rewrite_base_length_{::int64_t{0}},
        xla_gpu_enable_while_loop_unrolling_{static_cast< ::xla::DebugOptions_WhileLoopUnrolling >(0)},
        xla_gpu_enable_host_memory_offloading_{false},
        xla_gpu_exclude_nondeterministic_ops_{false},
        xla_gpu_nccl_terminate_on_error_{false},
        xla_gpu_shard_autotuning_{false},
        xla_gpu_mlir_emitter_level_{::int64_t{0}},
        xla_cpu_prefer_vector_width_{0},
        xla_gpu_enable_approx_costly_collectives_{false},
        xla_gpu_unsafe_pipelined_loop_annotator_{false},
        xla_gpu_temp_buffer_use_separate_color_{false},
        xla_syntax_sugar_async_ops_{false},
        xla_cmd_buffer_trace_cache_size_{::int64_t{0}},
        xla_gpu_autotune_gemm_rtol_{0},
        xla_gpu_cudnn_gemm_max_plans_{0},
        xla_enable_command_buffers_during_profiling_{false},
        xla_gpu_enable_libnvjitlink_{false},
        xla_gpu_enable_triton_gemm_int4_{false},
        xla_gpu_async_dot_{false},
        xla_cpu_parallel_codegen_split_count_{0},
        xla_gpu_experimental_autotune_cache_mode_{static_cast< ::xla::DebugOptions_AutotuneCacheMode >(0)},
        xla_gpu_executable_warn_stuck_timeout_seconds_{0},
        xla_gpu_executable_terminate_timeout_seconds_{0},
        xla_gpu_enable_pgle_accuracy_checker_{false},
        xla_experimental_ignore_channel_id_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR DebugOptions::DebugOptions(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct DebugOptionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DebugOptionsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DebugOptionsDefaultTypeInternal() {}
  union {
    DebugOptions _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DebugOptionsDefaultTypeInternal _DebugOptions_default_instance_;

inline constexpr CompilationEnvironmentsProto::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : environments_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR CompilationEnvironmentsProto::CompilationEnvironmentsProto(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct CompilationEnvironmentsProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CompilationEnvironmentsProtoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CompilationEnvironmentsProtoDefaultTypeInternal() {}
  union {
    CompilationEnvironmentsProto _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CompilationEnvironmentsProtoDefaultTypeInternal _CompilationEnvironmentsProto_default_instance_;

inline constexpr ExecutionOptions::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        device_handles_{},
        allow_spmd_sharding_propagation_to_output_{},
        auto_spmd_partitioning_mesh_shape_{},
        _auto_spmd_partitioning_mesh_shape_cached_byte_size_{0},
        auto_spmd_partitioning_mesh_ids_{},
        _auto_spmd_partitioning_mesh_ids_cached_byte_size_{0},
        param_requires_broadcast_via_collectives_{},
        shardable_value_update_pairs_{},
        allow_spmd_sharding_propagation_to_parameters_{},
        fdo_profile_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        shape_with_output_layout_{nullptr},
        debug_options_{nullptr},
        device_assignment_{nullptr},
        seed_{::uint64_t{0u}},
        num_replicas_{0},
        num_partitions_{0},
        launch_id_{0},
        alias_passthrough_params_{false},
        use_spmd_partitioning_{false},
        use_auto_spmd_partitioning_{false},
        deduplicate_hlo_{false},
        device_memory_size_{::int64_t{0}},
        allow_separate_sharding_programs_{false},
        use_shardy_partitioner_{false} {}

template <typename>
PROTOBUF_CONSTEXPR ExecutionOptions::ExecutionOptions(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ExecutionOptionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExecutionOptionsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExecutionOptionsDefaultTypeInternal() {}
  union {
    ExecutionOptions _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExecutionOptionsDefaultTypeInternal _ExecutionOptions_default_instance_;

inline constexpr HloModuleConfigProto::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        param_requires_broadcast_via_collectives_{},
        auto_spmd_partitioning_mesh_shape_{},
        _auto_spmd_partitioning_mesh_shape_cached_byte_size_{0},
        auto_spmd_partitioning_mesh_ids_{},
        _auto_spmd_partitioning_mesh_ids_cached_byte_size_{0},
        shardable_value_update_pairs_{},
        fusion_config_{},
        dot_config_{},
        layout_config_{},
        memory_space_assignment_config_{},
        _memory_space_assignment_config_cached_byte_size_{0},
        phase_ordering_config_{},
        allow_spmd_sharding_propagation_to_output_{},
        analysis_allowance_map_{},
        allow_spmd_sharding_propagation_to_parameters_{},
        device_type_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        fdo_profile_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        entry_computation_layout_{nullptr},
        debug_options_{nullptr},
        static_device_assignment_{nullptr},
        pre_simulation_device_assignment_{nullptr},
        seed_{::uint64_t{0u}},
        replica_count_{::int64_t{0}},
        num_partitions_{::int64_t{0}},
        launch_id_{0},
        use_spmd_partitioning_{false},
        use_auto_spmd_partitioning_{false},
        deduplicate_hlo_{false},
        allow_separate_sharding_programs_{false},
        intra_op_parallelism_threads_{::int64_t{0}},
        fusion_config_collection_{static_cast< ::xla::HloModuleConfigProto_FusionConfigCollection >(0)},
        alias_passthrough_params_{false},
        content_aware_computation_sorting_{false},
        use_shardy_partitioner_{false},
        phase_index_{0},
        matrix_unit_operand_precision_{static_cast< ::xla::PrecisionConfig_Precision >(0)},
        device_memory_size_{::int64_t{0}} {}

template <typename>
PROTOBUF_CONSTEXPR HloModuleConfigProto::HloModuleConfigProto(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct HloModuleConfigProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HloModuleConfigProtoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HloModuleConfigProtoDefaultTypeInternal() {}
  union {
    HloModuleConfigProto _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HloModuleConfigProtoDefaultTypeInternal _HloModuleConfigProto_default_instance_;

inline constexpr ScheduleProto::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        instructions_{},
        hlo_module_{nullptr},
        computation_id_{::int64_t{0}},
        cycles_per_microsecond_{::int64_t{0}} {}

template <typename>
PROTOBUF_CONSTEXPR ScheduleProto::ScheduleProto(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ScheduleProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ScheduleProtoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ScheduleProtoDefaultTypeInternal() {}
  union {
    ScheduleProto _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ScheduleProtoDefaultTypeInternal _ScheduleProto_default_instance_;

inline constexpr HloModuleProtoWithConfig::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        hlo_module_{nullptr},
        config_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR HloModuleProtoWithConfig::HloModuleProtoWithConfig(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct HloModuleProtoWithConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HloModuleProtoWithConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HloModuleProtoWithConfigDefaultTypeInternal() {}
  union {
    HloModuleProtoWithConfig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HloModuleProtoWithConfigDefaultTypeInternal _HloModuleProtoWithConfig_default_instance_;
}  // namespace xla
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_xla_2fxla_2eproto[8];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_xla_2fxla_2eproto = nullptr;
const ::uint32_t
    TableStruct_xla_2fxla_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::xla::CompilationEnvironmentsProto, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::xla::CompilationEnvironmentsProto, _impl_.environments_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions_XlaBackendExtraOptionsEntry_DoNotUse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions_XlaBackendExtraOptionsEntry_DoNotUse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions_XlaBackendExtraOptionsEntry_DoNotUse, _impl_.key_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions_XlaBackendExtraOptionsEntry_DoNotUse, _impl_.value_),
        0,
        1,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_cpu_enable_concurrency_optimized_scheduler_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_cpu_enable_fast_math_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_cpu_enable_fast_min_max_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_cpu_fast_math_honor_division_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_cpu_fast_math_honor_functions_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_cpu_fast_math_honor_infs_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_cpu_fast_math_honor_nans_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_cpu_use_thunk_runtime_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_cpu_parallel_codegen_split_count_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_cpu_prefer_vector_width_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_experimental_autotune_cache_mode_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_experimental_disable_binary_libraries_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_experimental_enable_triton_softmax_priority_fusion_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_unsupported_enable_triton_gemm_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_hlo_graph_addresses_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_hlo_profile_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_disable_hlo_passes_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_enable_hlo_passes_only_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_disable_all_hlo_passes_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_backend_optimization_level_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_embed_ir_in_executable_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_eliminate_hlo_implicit_broadcast_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_cpu_multi_thread_eigen_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_cuda_data_dir_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_ftz_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_llvm_enable_alias_scope_metadata_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_llvm_enable_noalias_metadata_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_llvm_enable_invariant_load_metadata_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_llvm_disable_expensive_passes_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_test_all_output_layouts_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_test_all_input_layouts_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_hlo_graph_sharding_color_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_cpu_use_mkl_dnn_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_enable_fast_min_max_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_allow_excess_precision_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_crash_on_verification_failures_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_autotune_level_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_force_host_platform_device_count_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_disable_gpuasm_optimizations_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_shape_checks_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_hlo_evaluator_use_fast_path_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_allow_scalar_index_dynamic_ops_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_step_marker_location_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_dump_to_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_dump_hlo_module_re_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_dump_hlo_pass_re_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_dump_hlo_as_text_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_dump_hlo_as_proto_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_dump_hlo_as_dot_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_dump_hlo_as_url_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_dump_hlo_as_html_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_dump_fusion_visualization_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_dump_hlo_snapshots_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_dump_include_timestamp_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_dump_max_hlo_modules_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_dump_module_metadata_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_dump_compress_protos_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_dump_hlo_as_long_text_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_force_conv_nchw_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_force_conv_nhwc_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_ptx_file_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_dump_llvmir_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_dump_enable_mlir_pretty_form_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_algorithm_denylist_path_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_tpu_detect_nan_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_tpu_detect_inf_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_cpu_enable_xprof_traceme_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_unsafe_fallback_to_driver_on_ptxas_not_found_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_asm_extra_flags_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_multiheap_size_constraint_per_heap_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_detailed_logging_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_enable_dumping_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_force_compilation_parallelism_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_enable_llvm_module_compilation_parallelism_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_deterministic_ops_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_llvm_ir_file_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_disable_async_collectives_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_all_reduce_combine_threshold_bytes_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_all_gather_combine_threshold_bytes_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_reduce_scatter_combine_threshold_bytes_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_enable_all_gather_combine_by_dim_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_enable_reduce_scatter_combine_by_dim_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_enable_reassociation_for_converted_ar_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_all_reduce_blueconnect_num_devices_per_host_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_enable_while_loop_reduce_scatter_code_motion_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_collective_inflation_factor_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_llvm_force_inline_before_split_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_enable_cudnn_frontend_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_enable_cudnn_fmha_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_fused_attention_use_cudnn_rng_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_enable_cudnn_layer_norm_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_dump_disable_metadata_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_dump_hlo_pipeline_re_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_strict_conv_algorithm_picker_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_enable_custom_fusions_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_enable_custom_fusions_re_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_enable_dynamic_slice_fusion_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_nccl_termination_timeout_seconds_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_enable_shared_constants_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_enable_cublaslt_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_enable_command_buffer_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_graph_min_graph_size_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_graph_enable_concurrent_region_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_redzone_scratch_max_megabytes_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_redzone_padding_bytes_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_cpu_use_acl_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_cpu_strict_dot_conv_math_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_use_runtime_fusion_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_dump_latency_hiding_schedule_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_cpu_enable_mlir_tiling_and_fusion_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_cpu_enable_custom_matmul_tiling_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_cpu_matmul_tiling_m_dim_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_cpu_matmul_tiling_n_dim_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_cpu_matmul_tiling_k_dim_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_cpu_enable_mlir_fusion_outlining_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_cpu_enable_experimental_deallocation_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_enable_latency_hiding_scheduler_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_enable_highest_priority_async_stream_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_enable_analytical_latency_estimator_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_lhs_enable_gpu_async_tracker_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_pgle_profile_file_or_directory_path_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_memory_limit_slop_factor_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_enable_pipelined_collectives_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_enable_pipelined_all_reduce_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_enable_pipelined_all_gather_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_enable_pipelined_reduce_scatter_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_enable_pipelined_p2p_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_run_post_layout_collective_pipeliner_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_collective_permute_decomposer_threshold_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_partitioning_algorithm_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_enable_triton_gemm_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_enable_cudnn_int8x32_convolution_reordering_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_triton_gemm_any_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_exhaustive_tiling_search_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_enable_priority_fusion_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_dump_autotune_results_to_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_load_autotune_results_from_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_target_config_filename_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_auto_spmd_partitioning_memory_budget_gb_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_auto_spmd_partitioning_memory_budget_ratio_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_triton_gemm_disable_reduced_precision_reduction_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_triton_fusion_level_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_dump_autotuned_gemm_fusions_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_override_gemm_autotuner_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_copy_insertion_use_region_analysis_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_collect_cost_model_stats_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_enable_split_k_autotuning_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_enable_reduction_epilogue_fusion_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_enable_nccl_clique_optimization_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_mock_custom_calls_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_cublas_fallback_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_enable_while_loop_double_buffering_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_enable_while_loop_unrolling_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_ensure_minor_dot_contraction_dims_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_filter_kernels_spilling_registers_on_autotuning_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_debug_buffer_assignment_show_max_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_llvm_verification_level_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_enable_cub_radix_sort_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_threshold_for_windowed_einsum_mib_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_enable_triton_hopper_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_enable_nccl_user_buffers_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_enable_nccl_comm_splitting_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_enable_nccl_per_stream_comms_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_enable_libnvptxcompiler_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_enable_dot_strength_reduction_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_multi_streamed_windowed_einsum_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_enable_bf16_6way_gemm_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_enable_bf16_3way_gemm_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_nccl_collective_max_nchannels_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_nccl_p2p_max_nchannels_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_mlir_emitter_level_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_gemm_rewrite_size_threshold_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_require_complete_aot_autotune_results_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_cudnn_gemm_fusion_level_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_use_memcpy_local_p2p_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_autotune_max_solutions_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_dump_large_constants_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_verify_triton_fusion_numerics_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_dump_autotune_logs_to_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_reduce_window_rewrite_base_length_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_enable_host_memory_offloading_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_exclude_nondeterministic_ops_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_nccl_terminate_on_error_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_shard_autotuning_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_enable_approx_costly_collectives_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_kernel_cache_file_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_unsafe_pipelined_loop_annotator_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_per_fusion_autotune_cache_dir_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_cmd_buffer_trace_cache_size_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_temp_buffer_use_separate_color_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.legacy_command_buffer_custom_call_targets_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_syntax_sugar_async_ops_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_autotune_gemm_rtol_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_enable_command_buffers_during_profiling_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_cudnn_gemm_max_plans_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_enable_libnvjitlink_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_enable_triton_gemm_int4_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_async_dot_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_enable_pgle_accuracy_checker_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_executable_warn_stuck_timeout_seconds_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_gpu_executable_terminate_timeout_seconds_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_experimental_ignore_channel_id_),
        PROTOBUF_FIELD_OFFSET(::xla::DebugOptions, _impl_.xla_backend_extra_options_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::xla::GpuCompilationEnvironment, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::xla::GpuCompilationEnvironment, _impl_.dummy_flag_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::xla::ShardableValueUpdatePairProto, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::xla::ShardableValueUpdatePairProto, _impl_.input_parameter_number_),
        PROTOBUF_FIELD_OFFSET(::xla::ShardableValueUpdatePairProto, _impl_.parameter_shape_index_),
        PROTOBUF_FIELD_OFFSET(::xla::ShardableValueUpdatePairProto, _impl_.output_shape_index_),
        PROTOBUF_FIELD_OFFSET(::xla::ExecutionOptions, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::xla::ExecutionOptions, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::xla::ExecutionOptions, _impl_.shape_with_output_layout_),
        PROTOBUF_FIELD_OFFSET(::xla::ExecutionOptions, _impl_.seed_),
        PROTOBUF_FIELD_OFFSET(::xla::ExecutionOptions, _impl_.debug_options_),
        PROTOBUF_FIELD_OFFSET(::xla::ExecutionOptions, _impl_.device_handles_),
        PROTOBUF_FIELD_OFFSET(::xla::ExecutionOptions, _impl_.num_replicas_),
        PROTOBUF_FIELD_OFFSET(::xla::ExecutionOptions, _impl_.device_assignment_),
        PROTOBUF_FIELD_OFFSET(::xla::ExecutionOptions, _impl_.alias_passthrough_params_),
        PROTOBUF_FIELD_OFFSET(::xla::ExecutionOptions, _impl_.num_partitions_),
        PROTOBUF_FIELD_OFFSET(::xla::ExecutionOptions, _impl_.launch_id_),
        PROTOBUF_FIELD_OFFSET(::xla::ExecutionOptions, _impl_.use_spmd_partitioning_),
        PROTOBUF_FIELD_OFFSET(::xla::ExecutionOptions, _impl_.use_auto_spmd_partitioning_),
        PROTOBUF_FIELD_OFFSET(::xla::ExecutionOptions, _impl_.auto_spmd_partitioning_mesh_shape_),
        PROTOBUF_FIELD_OFFSET(::xla::ExecutionOptions, _impl_.auto_spmd_partitioning_mesh_ids_),
        PROTOBUF_FIELD_OFFSET(::xla::ExecutionOptions, _impl_.deduplicate_hlo_),
        PROTOBUF_FIELD_OFFSET(::xla::ExecutionOptions, _impl_.allow_spmd_sharding_propagation_to_parameters_),
        PROTOBUF_FIELD_OFFSET(::xla::ExecutionOptions, _impl_.allow_spmd_sharding_propagation_to_output_),
        PROTOBUF_FIELD_OFFSET(::xla::ExecutionOptions, _impl_.param_requires_broadcast_via_collectives_),
        PROTOBUF_FIELD_OFFSET(::xla::ExecutionOptions, _impl_.allow_separate_sharding_programs_),
        PROTOBUF_FIELD_OFFSET(::xla::ExecutionOptions, _impl_.shardable_value_update_pairs_),
        PROTOBUF_FIELD_OFFSET(::xla::ExecutionOptions, _impl_.fdo_profile_),
        PROTOBUF_FIELD_OFFSET(::xla::ExecutionOptions, _impl_.device_memory_size_),
        PROTOBUF_FIELD_OFFSET(::xla::ExecutionOptions, _impl_.use_shardy_partitioner_),
        0,
        ~0u,
        1,
        ~0u,
        ~0u,
        2,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::xla::HloModuleConfigProto_BoolList, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::xla::HloModuleConfigProto_BoolList, _impl_.vals_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::xla::HloModuleConfigProto_Int64List, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::xla::HloModuleConfigProto_Int64List, _impl_.vals_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::xla::HloModuleConfigProto_Int64ListList, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::xla::HloModuleConfigProto_Int64ListList, _impl_.lists_),
        PROTOBUF_FIELD_OFFSET(::xla::HloModuleConfigProto_DotConfigEntry_DoNotUse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::xla::HloModuleConfigProto_DotConfigEntry_DoNotUse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::xla::HloModuleConfigProto_DotConfigEntry_DoNotUse, _impl_.key_),
        PROTOBUF_FIELD_OFFSET(::xla::HloModuleConfigProto_DotConfigEntry_DoNotUse, _impl_.value_),
        0,
        1,
        PROTOBUF_FIELD_OFFSET(::xla::HloModuleConfigProto_AnalysisAllowanceMapEntry_DoNotUse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::xla::HloModuleConfigProto_AnalysisAllowanceMapEntry_DoNotUse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::xla::HloModuleConfigProto_AnalysisAllowanceMapEntry_DoNotUse, _impl_.key_),
        PROTOBUF_FIELD_OFFSET(::xla::HloModuleConfigProto_AnalysisAllowanceMapEntry_DoNotUse, _impl_.value_),
        0,
        1,
        PROTOBUF_FIELD_OFFSET(::xla::HloModuleConfigProto, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::xla::HloModuleConfigProto, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::xla::HloModuleConfigProto, _impl_.entry_computation_layout_),
        PROTOBUF_FIELD_OFFSET(::xla::HloModuleConfigProto, _impl_.seed_),
        PROTOBUF_FIELD_OFFSET(::xla::HloModuleConfigProto, _impl_.launch_id_),
        PROTOBUF_FIELD_OFFSET(::xla::HloModuleConfigProto, _impl_.replica_count_),
        PROTOBUF_FIELD_OFFSET(::xla::HloModuleConfigProto, _impl_.num_partitions_),
        PROTOBUF_FIELD_OFFSET(::xla::HloModuleConfigProto, _impl_.param_requires_broadcast_via_collectives_),
        PROTOBUF_FIELD_OFFSET(::xla::HloModuleConfigProto, _impl_.use_spmd_partitioning_),
        PROTOBUF_FIELD_OFFSET(::xla::HloModuleConfigProto, _impl_.use_auto_spmd_partitioning_),
        PROTOBUF_FIELD_OFFSET(::xla::HloModuleConfigProto, _impl_.auto_spmd_partitioning_mesh_shape_),
        PROTOBUF_FIELD_OFFSET(::xla::HloModuleConfigProto, _impl_.auto_spmd_partitioning_mesh_ids_),
        PROTOBUF_FIELD_OFFSET(::xla::HloModuleConfigProto, _impl_.deduplicate_hlo_),
        PROTOBUF_FIELD_OFFSET(::xla::HloModuleConfigProto, _impl_.intra_op_parallelism_threads_),
        PROTOBUF_FIELD_OFFSET(::xla::HloModuleConfigProto, _impl_.device_type_),
        PROTOBUF_FIELD_OFFSET(::xla::HloModuleConfigProto, _impl_.debug_options_),
        PROTOBUF_FIELD_OFFSET(::xla::HloModuleConfigProto, _impl_.static_device_assignment_),
        PROTOBUF_FIELD_OFFSET(::xla::HloModuleConfigProto, _impl_.pre_simulation_device_assignment_),
        PROTOBUF_FIELD_OFFSET(::xla::HloModuleConfigProto, _impl_.allow_separate_sharding_programs_),
        PROTOBUF_FIELD_OFFSET(::xla::HloModuleConfigProto, _impl_.shardable_value_update_pairs_),
        PROTOBUF_FIELD_OFFSET(::xla::HloModuleConfigProto, _impl_.alias_passthrough_params_),
        PROTOBUF_FIELD_OFFSET(::xla::HloModuleConfigProto, _impl_.content_aware_computation_sorting_),
        PROTOBUF_FIELD_OFFSET(::xla::HloModuleConfigProto, _impl_.fusion_config_collection_),
        PROTOBUF_FIELD_OFFSET(::xla::HloModuleConfigProto, _impl_.fusion_config_),
        PROTOBUF_FIELD_OFFSET(::xla::HloModuleConfigProto, _impl_.dot_config_),
        PROTOBUF_FIELD_OFFSET(::xla::HloModuleConfigProto, _impl_.layout_config_),
        PROTOBUF_FIELD_OFFSET(::xla::HloModuleConfigProto, _impl_.memory_space_assignment_config_),
        PROTOBUF_FIELD_OFFSET(::xla::HloModuleConfigProto, _impl_.phase_ordering_config_),
        PROTOBUF_FIELD_OFFSET(::xla::HloModuleConfigProto, _impl_.phase_index_),
        PROTOBUF_FIELD_OFFSET(::xla::HloModuleConfigProto, _impl_.allow_spmd_sharding_propagation_to_parameters_),
        PROTOBUF_FIELD_OFFSET(::xla::HloModuleConfigProto, _impl_.allow_spmd_sharding_propagation_to_output_),
        PROTOBUF_FIELD_OFFSET(::xla::HloModuleConfigProto, _impl_.analysis_allowance_map_),
        PROTOBUF_FIELD_OFFSET(::xla::HloModuleConfigProto, _impl_.matrix_unit_operand_precision_),
        PROTOBUF_FIELD_OFFSET(::xla::HloModuleConfigProto, _impl_.fdo_profile_),
        PROTOBUF_FIELD_OFFSET(::xla::HloModuleConfigProto, _impl_.device_memory_size_),
        PROTOBUF_FIELD_OFFSET(::xla::HloModuleConfigProto, _impl_.use_shardy_partitioner_),
        0,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        1,
        2,
        3,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::xla::HloModuleProtoWithConfig, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::xla::HloModuleProtoWithConfig, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::xla::HloModuleProtoWithConfig, _impl_.hlo_module_),
        PROTOBUF_FIELD_OFFSET(::xla::HloModuleProtoWithConfig, _impl_.config_),
        0,
        1,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::xla::ScheduleProto_Instruction, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::xla::ScheduleProto_Instruction, _impl_.id_),
        PROTOBUF_FIELD_OFFSET(::xla::ScheduleProto_Instruction, _impl_.start_timestamp_cycles_),
        PROTOBUF_FIELD_OFFSET(::xla::ScheduleProto_Instruction, _impl_.end_timestamp_cycles_),
        PROTOBUF_FIELD_OFFSET(::xla::ScheduleProto, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::xla::ScheduleProto, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::xla::ScheduleProto, _impl_.instructions_),
        PROTOBUF_FIELD_OFFSET(::xla::ScheduleProto, _impl_.computation_id_),
        PROTOBUF_FIELD_OFFSET(::xla::ScheduleProto, _impl_.hlo_module_),
        PROTOBUF_FIELD_OFFSET(::xla::ScheduleProto, _impl_.cycles_per_microsecond_),
        ~0u,
        ~0u,
        0,
        ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::xla::CompilationEnvironmentsProto)},
        {9, 19, -1, sizeof(::xla::DebugOptions_XlaBackendExtraOptionsEntry_DoNotUse)},
        {21, -1, -1, sizeof(::xla::DebugOptions)},
        {232, -1, -1, sizeof(::xla::GpuCompilationEnvironment)},
        {241, -1, -1, sizeof(::xla::ShardableValueUpdatePairProto)},
        {252, 282, -1, sizeof(::xla::ExecutionOptions)},
        {304, -1, -1, sizeof(::xla::HloModuleConfigProto_BoolList)},
        {313, -1, -1, sizeof(::xla::HloModuleConfigProto_Int64List)},
        {322, -1, -1, sizeof(::xla::HloModuleConfigProto_Int64ListList)},
        {331, 341, -1, sizeof(::xla::HloModuleConfigProto_DotConfigEntry_DoNotUse)},
        {343, 353, -1, sizeof(::xla::HloModuleConfigProto_AnalysisAllowanceMapEntry_DoNotUse)},
        {355, 397, -1, sizeof(::xla::HloModuleConfigProto)},
        {431, 441, -1, sizeof(::xla::HloModuleProtoWithConfig)},
        {443, -1, -1, sizeof(::xla::ScheduleProto_Instruction)},
        {454, 466, -1, sizeof(::xla::ScheduleProto)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::xla::_CompilationEnvironmentsProto_default_instance_._instance,
    &::xla::_DebugOptions_XlaBackendExtraOptionsEntry_DoNotUse_default_instance_._instance,
    &::xla::_DebugOptions_default_instance_._instance,
    &::xla::_GpuCompilationEnvironment_default_instance_._instance,
    &::xla::_ShardableValueUpdatePairProto_default_instance_._instance,
    &::xla::_ExecutionOptions_default_instance_._instance,
    &::xla::_HloModuleConfigProto_BoolList_default_instance_._instance,
    &::xla::_HloModuleConfigProto_Int64List_default_instance_._instance,
    &::xla::_HloModuleConfigProto_Int64ListList_default_instance_._instance,
    &::xla::_HloModuleConfigProto_DotConfigEntry_DoNotUse_default_instance_._instance,
    &::xla::_HloModuleConfigProto_AnalysisAllowanceMapEntry_DoNotUse_default_instance_._instance,
    &::xla::_HloModuleConfigProto_default_instance_._instance,
    &::xla::_HloModuleProtoWithConfig_default_instance_._instance,
    &::xla::_ScheduleProto_Instruction_default_instance_._instance,
    &::xla::_ScheduleProto_default_instance_._instance,
};
const char descriptor_table_protodef_xla_2fxla_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\rxla/xla.proto\022\003xla\032\031google/protobuf/an"
    "y.proto\032\025xla/service/hlo.proto\032\022xla/xla_"
    "data.proto\"J\n\034CompilationEnvironmentsPro"
    "to\022*\n\014environments\030\001 \003(\0132\024.google.protob"
    "uf.Any\"\334P\n\014DebugOptions\0227\n.xla_cpu_enabl"
    "e_concurrency_optimized_scheduler\030\263\002 \001(\010"
    "\022 \n\030xla_cpu_enable_fast_math\030c \001(\010\022$\n\033xl"
    "a_cpu_enable_fast_min_max\030\214\001 \001(\010\022(\n xla_"
    "cpu_fast_math_honor_division\030~ \001(\010\022*\n!xl"
    "a_cpu_fast_math_honor_functions\030\201\001 \001(\010\022$"
    "\n\034xla_cpu_fast_math_honor_infs\030y \001(\010\022$\n\034"
    "xla_cpu_fast_math_honor_nans\030x \001(\010\022\"\n\031xl"
    "a_cpu_use_thunk_runtime\030\252\002 \001(\010\022-\n$xla_cp"
    "u_parallel_codegen_split_count\030\303\002 \001(\005\022$\n"
    "\033xla_cpu_prefer_vector_width\030\264\002 \001(\005\022V\n(x"
    "la_gpu_experimental_autotune_cache_mode\030"
    "\304\002 \001(\0162#.xla.DebugOptions.AutotuneCacheM"
    "ode\0226\n-xla_gpu_experimental_disable_bina"
    "ry_libraries\030\311\002 \001(\010\022C\n:xla_gpu_experimen"
    "tal_enable_triton_softmax_priority_fusio"
    "n\030\305\002 \001(\010\022/\n&xla_gpu_unsupported_enable_t"
    "riton_gemm\030\302\002 \001(\010\022\037\n\027xla_hlo_graph_addre"
    "sses\030\002 \001(\010\022\027\n\017xla_hlo_profile\030\t \001(\010\022\036\n\026x"
    "la_disable_hlo_passes\030\036 \003(\t\022\"\n\032xla_enabl"
    "e_hlo_passes_only\030| \003(\t\022\"\n\032xla_disable_a"
    "ll_hlo_passes\030h \001(\010\022&\n\036xla_backend_optim"
    "ization_level\030\037 \001(\005\022\"\n\032xla_embed_ir_in_e"
    "xecutable\030! \001(\010\022,\n$xla_eliminate_hlo_imp"
    "licit_broadcast\030# \001(\010\022\"\n\032xla_cpu_multi_t"
    "hread_eigen\030< \001(\010\022\035\n\025xla_gpu_cuda_data_d"
    "ir\030= \001(\t\022\023\n\013xla_gpu_ftz\030> \001(\010\022,\n$xla_llv"
    "m_enable_alias_scope_metadata\030F \001(\010\022(\n x"
    "la_llvm_enable_noalias_metadata\030G \001(\010\022/\n"
    "\'xla_llvm_enable_invariant_load_metadata"
    "\030H \001(\010\022)\n!xla_llvm_disable_expensive_pas"
    "ses\030I \001(\010\022#\n\033xla_test_all_output_layouts"
    "\030Z \001(\010\022\"\n\032xla_test_all_input_layouts\030[ \001"
    "(\010\022$\n\034xla_hlo_graph_sharding_color\030\\ \001(\010"
    "\022\033\n\023xla_cpu_use_mkl_dnn\030a \001(\010\022#\n\033xla_gpu"
    "_enable_fast_min_max\030d \001(\010\022\"\n\032xla_allow_"
    "excess_precision\030z \001(\010\022.\n&xla_gpu_crash_"
    "on_verification_failures\030e \001(\010\022\036\n\026xla_gp"
    "u_autotune_level\030{ \001(\005\022,\n$xla_force_host"
    "_platform_device_count\030f \001(\005\022,\n$xla_gpu_"
    "disable_gpuasm_optimizations\030g \001(\010\022<\n\024xl"
    "a_gpu_shape_checks\030\252\001 \001(\0162\035.xla.DebugOpt"
    "ions.ShapeChecks\022\'\n\037xla_hlo_evaluator_us"
    "e_fast_path\030j \001(\010\022*\n\"xla_allow_scalar_in"
    "dex_dynamic_ops\030k \001(\010\022F\n\030xla_step_marker"
    "_location\030l \001(\0162$.xla.DebugOptions.StepM"
    "arkerLocation\022\023\n\013xla_dump_to\030m \001(\t\022\036\n\026xl"
    "a_dump_hlo_module_re\030n \001(\t\022\034\n\024xla_dump_h"
    "lo_pass_re\030o \001(\t\022\034\n\024xla_dump_hlo_as_text"
    "\030p \001(\010\022\035\n\025xla_dump_hlo_as_proto\030q \001(\010\022\033\n"
    "\023xla_dump_hlo_as_dot\030r \001(\010\022\033\n\023xla_dump_h"
    "lo_as_url\030s \001(\010\022\034\n\024xla_dump_hlo_as_html\030"
    "t \001(\010\022&\n\035xla_dump_fusion_visualization\030\225"
    "\001 \001(\010\022\036\n\026xla_dump_hlo_snapshots\030v \001(\010\022#\n"
    "\032xla_dump_include_timestamp\030\203\001 \001(\010\022!\n\030xl"
    "a_dump_max_hlo_modules\030\204\001 \001(\005\022!\n\030xla_dum"
    "p_module_metadata\030\220\001 \001(\010\022!\n\030xla_dump_com"
    "press_protos\030\227\001 \001(\010\022\"\n\031xla_dump_hlo_as_l"
    "ong_text\030\244\001 \001(\010\022\037\n\027xla_gpu_force_conv_nc"
    "hw\030} \001(\010\022 \n\027xla_gpu_force_conv_nhwc\030\222\001 \001"
    "(\010\022\030\n\020xla_gpu_ptx_file\030\177 \003(\t\022\034\n\023xla_gpu_"
    "dump_llvmir\030\233\001 \001(\010\022)\n xla_dump_enable_ml"
    "ir_pretty_form\030\271\001 \001(\010\022(\n\037xla_gpu_algorit"
    "hm_denylist_path\030\200\001 \001(\t\022\033\n\022xla_tpu_detec"
    "t_nan\030\207\001 \001(\010\022\033\n\022xla_tpu_detect_inf\030\210\001 \001("
    "\010\022%\n\034xla_cpu_enable_xprof_traceme\030\211\001 \001(\010"
    "\022=\n4xla_gpu_unsafe_fallback_to_driver_on"
    "_ptxas_not_found\030\212\001 \001(\010\022 \n\027xla_gpu_asm_e"
    "xtra_flags\030\215\001 \001(\t\022/\n&xla_multiheap_size_"
    "constraint_per_heap\030\216\001 \001(\005\022\035\n\024xla_detail"
    "ed_logging\030\374\001 \001(\010\022\033\n\022xla_enable_dumping\030"
    "\375\001 \001(\010\022.\n%xla_gpu_force_compilation_para"
    "llelism\030\223\001 \001(\005\022;\n2xla_gpu_enable_llvm_mo"
    "dule_compilation_parallelism\030\214\002 \001(\010\022\"\n\031x"
    "la_gpu_deterministic_ops\030\224\001 \001(\010\022\035\n\024xla_g"
    "pu_llvm_ir_file\030\226\001 \003(\t\022N\n!xla_gpu_disabl"
    "e_async_collectives\030\241\002 \003(\0162\".xla.DebugOp"
    "tions.CollectiveOpType\0223\n*xla_gpu_all_re"
    "duce_combine_threshold_bytes\030\235\001 \001(\003\0223\n*x"
    "la_gpu_all_gather_combine_threshold_byte"
    "s\030\324\001 \001(\003\0227\n.xla_gpu_reduce_scatter_combi"
    "ne_threshold_bytes\030\325\001 \001(\003\0221\n(xla_gpu_ena"
    "ble_all_gather_combine_by_dim\030\376\001 \001(\010\0225\n,"
    "xla_gpu_enable_reduce_scatter_combine_by"
    "_dim\030\201\002 \001(\010\0226\n-xla_gpu_enable_reassociat"
    "ion_for_converted_ar\030\321\001 \001(\010\022<\n3xla_gpu_a"
    "ll_reduce_blueconnect_num_devices_per_ho"
    "st\030\237\001 \001(\005\022=\n4xla_gpu_enable_while_loop_r"
    "educe_scatter_code_motion\030\313\001 \001(\010\022,\n#xla_"
    "gpu_collective_inflation_factor\030\315\001 \001(\005\022+"
    "\n\"xla_llvm_force_inline_before_split\030\254\002 "
    "\001(\010\022&\n\035xla_gpu_enable_cudnn_frontend\030\240\001 "
    "\001(\010\022\"\n\031xla_gpu_enable_cudnn_fmha\030\332\001 \001(\010\022"
    ".\n%xla_gpu_fused_attention_use_cudnn_rng"
    "\030\353\001 \001(\010\022(\n\037xla_gpu_enable_cudnn_layer_no"
    "rm\030\206\002 \001(\010\022\"\n\031xla_dump_disable_metadata\030\231"
    "\001 \001(\010\022!\n\030xla_dump_hlo_pipeline_re\030\232\001 \001(\t"
    "\022-\n$xla_gpu_strict_conv_algorithm_picker"
    "\030\234\001 \001(\010\022&\n\035xla_gpu_enable_custom_fusions"
    "\030\207\002 \001(\010\022)\n xla_gpu_enable_custom_fusions"
    "_re\030\210\002 \001(\t\022+\n#xla_gpu_enable_dynamic_sli"
    "ce_fusion\030i \001(\010\0221\n(xla_gpu_nccl_terminat"
    "ion_timeout_seconds\030\243\001 \001(\003\022(\n\037xla_gpu_en"
    "able_shared_constants\030\245\001 \001(\010\022 \n\027xla_gpu_"
    "enable_cublaslt\030\246\001 \001(\010\022N\n\035xla_gpu_enable"
    "_command_buffer\030\202\002 \003(\0162&.xla.DebugOption"
    "s.CommandBufferCmdType\022%\n\034xla_gpu_graph_"
    "min_graph_size\030\320\001 \001(\005\022/\n&xla_gpu_graph_e"
    "nable_concurrent_region\030\327\001 \001(\010\022.\n%xla_gp"
    "u_redzone_scratch_max_megabytes\030\247\001 \001(\003\022&"
    "\n\035xla_gpu_redzone_padding_bytes\030\344\001 \001(\003\022\030"
    "\n\017xla_cpu_use_acl\030\256\001 \001(\010\022%\n\034xla_cpu_stri"
    "ct_dot_conv_math\030\257\001 \001(\010\022#\n\032xla_gpu_use_r"
    "untime_fusion\030\265\001 \001(\010\022)\n xla_dump_latency"
    "_hiding_schedule\030\266\001 \001(\010\022.\n%xla_cpu_enabl"
    "e_mlir_tiling_and_fusion\030\270\001 \001(\010\022,\n#xla_c"
    "pu_enable_custom_matmul_tiling\030\303\001 \001(\010\022$\n"
    "\033xla_cpu_matmul_tiling_m_dim\030\304\001 \001(\003\022$\n\033x"
    "la_cpu_matmul_tiling_n_dim\030\305\001 \001(\003\022$\n\033xla"
    "_cpu_matmul_tiling_k_dim\030\306\001 \001(\003\022-\n$xla_c"
    "pu_enable_mlir_fusion_outlining\030\300\001 \001(\010\0221"
    "\n(xla_cpu_enable_experimental_deallocati"
    "on\030\277\001 \001(\010\0220\n\'xla_gpu_enable_latency_hidi"
    "ng_scheduler\030\272\001 \001(\010\0225\n,xla_gpu_enable_hi"
    "ghest_priority_async_stream\030\330\001 \001(\010\0224\n+xl"
    "a_gpu_enable_analytical_latency_estimato"
    "r\030\377\001 \001(\010\022-\n$xla_gpu_lhs_enable_gpu_async"
    "_tracker\030\314\001 \001(\010\0224\n+xla_gpu_pgle_profile_"
    "file_or_directory_path\030\322\001 \001(\t\022)\n xla_gpu"
    "_memory_limit_slop_factor\030\204\002 \001(\005\022-\n$xla_"
    "gpu_enable_pipelined_collectives\030\357\001 \001(\010\022"
    ",\n#xla_gpu_enable_pipelined_all_reduce\030\331"
    "\001 \001(\010\022,\n#xla_gpu_enable_pipelined_all_ga"
    "ther\030\343\001 \001(\010\0220\n\'xla_gpu_enable_pipelined_"
    "reduce_scatter\030\347\001 \001(\010\022%\n\034xla_gpu_enable_"
    "pipelined_p2p\030\366\001 \001(\010\0225\n,xla_gpu_run_post"
    "_layout_collective_pipeliner\030\271\002 \001(\010\0228\n/x"
    "la_gpu_collective_permute_decomposer_thr"
    "eshold\030\355\001 \001(\003\022L\n\032xla_partitioning_algori"
    "thm\030\273\001 \001(\0162\'.xla.DebugOptions.Partitioni"
    "ngAlgorithm\022#\n\032xla_gpu_enable_triton_gem"
    "m\030\274\001 \001(\010\022<\n3xla_gpu_enable_cudnn_int8x32"
    "_convolution_reordering\030\275\001 \001(\010\022 \n\027xla_gp"
    "u_triton_gemm_any\030\276\001 \001(\010\022)\n xla_gpu_exha"
    "ustive_tiling_search\030\333\001 \001(\010\022\'\n\036xla_gpu_e"
    "nable_priority_fusion\030\335\001 \001(\010\022)\n xla_gpu_"
    "dump_autotune_results_to\030\336\001 \001(\t\022+\n\"xla_g"
    "pu_load_autotune_results_from\030\337\001 \001(\t\022\'\n\036"
    "xla_gpu_target_config_filename\030\205\002 \001(\t\0228\n"
    "/xla_gpu_auto_spmd_partitioning_memory_b"
    "udget_gb\030\340\001 \001(\005\022;\n2xla_gpu_auto_spmd_par"
    "titioning_memory_budget_ratio\030\341\001 \001(\002\022@\n7"
    "xla_gpu_triton_gemm_disable_reduced_prec"
    "ision_reduction\030\342\001 \001(\010\022$\n\033xla_gpu_triton"
    "_fusion_level\030\345\001 \001(\005\022,\n#xla_gpu_dump_aut"
    "otuned_gemm_fusions\030\350\001 \001(\010\022(\n\037xla_gpu_ov"
    "erride_gemm_autotuner\030\247\002 \001(\t\0223\n*xla_gpu_"
    "copy_insertion_use_region_analysis\030\354\001 \001("
    "\010\022)\n xla_gpu_collect_cost_model_stats\030\360\001"
    " \001(\010\022*\n!xla_gpu_enable_split_k_autotunin"
    "g\030\361\001 \001(\010\0221\n(xla_gpu_enable_reduction_epi"
    "logue_fusion\030\363\001 \001(\010\0220\n\'xla_gpu_enable_nc"
    "cl_clique_optimization\030\364\001 \001(\010\022\"\n\031xla_gpu"
    "_mock_custom_calls\030\365\001 \001(\010\022 \n\027xla_gpu_cub"
    "las_fallback\030\367\001 \001(\010\0223\n*xla_gpu_enable_wh"
    "ile_loop_double_buffering\030\370\001 \001(\010\022R\n#xla_"
    "gpu_enable_while_loop_unrolling\030\246\002 \001(\0162$"
    ".xla.DebugOptions.WhileLoopUnrolling\0222\n)"
    "xla_gpu_ensure_minor_dot_contraction_dim"
    "s\030\371\001 \001(\010\022@\n7xla_gpu_filter_kernels_spill"
    "ing_registers_on_autotuning\030\372\001 \001(\010\022-\n$xl"
    "a_debug_buffer_assignment_show_max\030\373\001 \001("
    "\003\022(\n\037xla_gpu_llvm_verification_level\030\200\002 "
    "\001(\005\022&\n\035xla_gpu_enable_cub_radix_sort\030\203\002 "
    "\001(\010\0222\n)xla_gpu_threshold_for_windowed_ei"
    "nsum_mib\030\211\002 \001(\003\022%\n\034xla_gpu_enable_triton"
    "_hopper\030\212\002 \001(\010\022)\n xla_gpu_enable_nccl_us"
    "er_buffers\030\213\002 \001(\010\022+\n\"xla_gpu_enable_nccl"
    "_comm_splitting\030\220\002 \001(\010\022-\n$xla_gpu_enable"
    "_nccl_per_stream_comms\030\224\002 \001(\010\022(\n\037xla_gpu"
    "_enable_libnvptxcompiler\030\215\002 \001(\010\022.\n%xla_g"
    "pu_enable_dot_strength_reduction\030\216\002 \001(\010\022"
    "/\n&xla_gpu_multi_streamed_windowed_einsu"
    "m\030\230\002 \001(\010\022&\n\035xla_gpu_enable_bf16_6way_gem"
    "m\030\217\002 \001(\010\022&\n\035xla_gpu_enable_bf16_3way_gem"
    "m\030\227\002 \001(\010\022.\n%xla_gpu_nccl_collective_max_"
    "nchannels\030\221\002 \001(\003\022\'\n\036xla_gpu_nccl_p2p_max"
    "_nchannels\030\222\002 \001(\003\022#\n\032xla_gpu_mlir_emitte"
    "r_level\030\257\002 \001(\003\022,\n#xla_gpu_gemm_rewrite_s"
    "ize_threshold\030\233\002 \001(\003\0226\n-xla_gpu_require_"
    "complete_aot_autotune_results\030\234\002 \001(\010\022(\n\037"
    "xla_gpu_cudnn_gemm_fusion_level\030\235\002 \001(\005\022%"
    "\n\034xla_gpu_use_memcpy_local_p2p\030\237\002 \001(\010\022\'\n"
    "\036xla_gpu_autotune_max_solutions\030\240\002 \001(\003\022!"
    "\n\030xla_dump_large_constants\030\242\002 \001(\010\022.\n%xla"
    "_gpu_verify_triton_fusion_numerics\030\243\002 \001("
    "\010\022&\n\035xla_gpu_dump_autotune_logs_to\030\244\002 \001("
    "\t\022.\n%xla_reduce_window_rewrite_base_leng"
    "th\030\245\002 \001(\003\022.\n%xla_gpu_enable_host_memory_"
    "offloading\030\250\002 \001(\010\022-\n$xla_gpu_exclude_non"
    "deterministic_ops\030\251\002 \001(\010\022(\n\037xla_gpu_nccl"
    "_terminate_on_error\030\255\002 \001(\010\022!\n\030xla_gpu_sh"
    "ard_autotuning\030\260\002 \001(\010\0221\n(xla_gpu_enable_"
    "approx_costly_collectives\030\261\002 \001(\010\022\"\n\031xla_"
    "gpu_kernel_cache_file\030\262\002 \001(\t\0220\n\'xla_gpu_"
    "unsafe_pipelined_loop_annotator\030\265\002 \001(\010\022."
    "\n%xla_gpu_per_fusion_autotune_cache_dir\030"
    "\266\002 \001(\t\022(\n\037xla_cmd_buffer_trace_cache_siz"
    "e\030\267\002 \001(\003\022/\n&xla_gpu_temp_buffer_use_sepa"
    "rate_color\030\270\002 \001(\010\0222\n)legacy_command_buff"
    "er_custom_call_targets\030\272\002 \003(\t\022#\n\032xla_syn"
    "tax_sugar_async_ops\030\273\002 \001(\010\022#\n\032xla_gpu_au"
    "totune_gemm_rtol\030\274\002 \001(\002\0224\n+xla_enable_co"
    "mmand_buffers_during_profiling\030\275\002 \001(\010\022%\n"
    "\034xla_gpu_cudnn_gemm_max_plans\030\276\002 \001(\005\022$\n\033"
    "xla_gpu_enable_libnvjitlink\030\277\002 \001(\010\022(\n\037xl"
    "a_gpu_enable_triton_gemm_int4\030\300\002 \001(\010\022\032\n\021"
    "xla_gpu_async_dot\030\301\002 \001(\010\022-\n$xla_gpu_enab"
    "le_pgle_accuracy_checker\030\306\002 \001(\010\0226\n-xla_g"
    "pu_executable_warn_stuck_timeout_seconds"
    "\030\307\002 \001(\005\0225\n,xla_gpu_executable_terminate_"
    "timeout_seconds\030\310\002 \001(\005\022+\n\"xla_experiment"
    "al_ignore_channel_id\030\312\002 \001(\010\022Q\n\031xla_backe"
    "nd_extra_options\030\364\003 \003(\0132-.xla.DebugOptio"
    "ns.XlaBackendExtraOptionsEntry\032=\n\033XlaBac"
    "kendExtraOptionsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005va"
    "lue\030\002 \001(\t:\0028\001\"8\n\013ShapeChecks\022\n\n\006IGNORE\020\000"
    "\022\013\n\007RUNTIME\020\001\022\020\n\014COMPILE_TIME\020\002\"\221\001\n\022Step"
    "MarkerLocation\022\026\n\022STEP_MARK_AT_ENTRY\020\000\022%"
    "\n!STEP_MARK_AT_TOP_LEVEL_WHILE_LOOP\020\001\022(\n"
    "$STEP_MARK_AT_SECOND_LEVEL_WHILE_LOOP\020\003\022"
    "\022\n\016STEP_MARK_NONE\020\002\"\213\001\n\020CollectiveOpType"
    "\022\010\n\004NOOP\020\000\022\r\n\tALLREDUCE\020\001\022\r\n\tALLGATHER\020\002"
    "\022\021\n\rREDUCESCATTER\020\003\022\027\n\023COLLECTIVEBROADCA"
    "ST\020\004\022\014\n\010ALLTOALL\020\005\022\025\n\021COLLECTIVEPERMUTE\020"
    "\006\"\210\001\n\024CommandBufferCmdType\022\013\n\007INVALID\020\000\022"
    "\n\n\006FUSION\020\001\022\n\n\006CUBLAS\020\002\022\t\n\005CUDNN\020\003\022\017\n\013CO"
    "LLECTIVES\020\004\022\020\n\014CONDITIONALS\020\005\022\017\n\013CUSTOM_"
    "CALL\020\006\022\014\n\010CUBLASLT\020\007\"\233\001\n\025PartitioningAlg"
    "orithm\022\037\n\033PARTITIONING_ALGORITHM_NOOP\020\000\022"
    "\037\n\033PARTITIONING_ALGORITHM_EXP0\020\001\022\037\n\033PART"
    "ITIONING_ALGORITHM_EXP1\020\002\022\037\n\033PARTITIONIN"
    "G_ALGORITHM_EXP2\020\003\"\206\001\n\022WhileLoopUnrollin"
    "g\022\"\n\036WHILE_LOOP_UNROLLING_NO_UNROLL\020\000\022&\n"
    "\"WHILE_LOOP_UNROLLING_DOUBLE_BUFFER\020\001\022$\n"
    " WHILE_LOOP_UNROLLING_FULL_UNROLL\020\002\"v\n\021A"
    "utotuneCacheMode\022#\n\037AUTOTUNE_CACHE_MODE_"
    "UNSPECIFIED\020\000\022\036\n\032AUTOTUNE_CACHE_MODE_UPD"
    "ATE\020\001\022\034\n\030AUTOTUNE_CACHE_MODE_READ\020\002J\004\010\?\020"
    "@J\006\010\206\001\020\207\001J\004\010P\020QJ\004\010]\020^J\004\010^\020_J\006\010\261\001\020\262\001J\004\010b\020"
    "cJ\006\010\317\001\020\320\001J\006\010\253\001\020\254\001J\006\010\255\001\020\256\001J\006\010\263\001\020\264\001J\006\010\202\001\020\203"
    "\001J\006\010\217\001\020\220\001J\006\010\230\001\020\231\001J\006\010\226\002\020\227\002J\006\010\267\001\020\270\001J\006\010\307\001\020\310"
    "\001J\006\010\310\001\020\311\001J\006\010\311\001\020\312\001J\006\010\356\001\020\357\001J\006\010\236\001\020\237\001J\006\010\253\002\020\254"
    "\002J\006\010\241\001\020\242\001J\006\010\242\001\020\243\001J\006\010\251\001\020\252\001J\006\010\351\001\020\352\001J\006\010\352\001\020\353"
    "\001J\006\010\312\001\020\313\001J\006\010\346\001\020\347\001J\006\010\250\001\020\251\001J\006\010\254\001\020\255\001J\006\010\323\001\020\324"
    "\001J\006\010\334\001\020\335\001J\006\010\236\002\020\237\002J\006\010\223\002\020\224\002J\006\010\231\002\020\232\002J\006\010\232\002\020\233"
    "\002J\006\010\256\002\020\257\002J\004\010\005\020\006J\004\010u\020vJ\006\010\205\001\020\206\001J\006\010\213\001\020\214\001J\006\010"
    "\260\001\020\261\001J\006\010\262\001\020\263\001J\006\010\264\001\020\265\001J\006\010\301\001\020\302\001J\006\010\326\001\020\327\001J\006\010"
    "\302\001\020\303\001J\006\010\362\001\020\363\001J\006\010\316\001\020\317\001\"/\n\031GpuCompilationE"
    "nvironment\022\022\n\ndummy_flag\030\001 \001(\003\"z\n\035Sharda"
    "bleValueUpdatePairProto\022\036\n\026input_paramet"
    "er_number\030\001 \001(\003\022\035\n\025parameter_shape_index"
    "\030\002 \003(\003\022\032\n\022output_shape_index\030\003 \003(\003\"\331\006\n\020E"
    "xecutionOptions\0221\n\030shape_with_output_lay"
    "out\030\002 \001(\0132\017.xla.ShapeProto\022\014\n\004seed\030\003 \001(\004"
    "\022(\n\rdebug_options\030\004 \001(\0132\021.xla.DebugOptio"
    "ns\022)\n\016device_handles\030\005 \003(\0132\021.xla.DeviceH"
    "andle\022\024\n\014num_replicas\030\006 \001(\005\0225\n\021device_as"
    "signment\030\007 \001(\0132\032.xla.DeviceAssignmentPro"
    "to\022 \n\030alias_passthrough_params\030\010 \001(\010\022\026\n\016"
    "num_partitions\030\t \001(\005\022\021\n\tlaunch_id\030\n \001(\005\022"
    "\035\n\025use_spmd_partitioning\030\013 \001(\010\022\"\n\032use_au"
    "to_spmd_partitioning\030\017 \001(\010\022)\n!auto_spmd_"
    "partitioning_mesh_shape\030\020 \003(\003\022\'\n\037auto_sp"
    "md_partitioning_mesh_ids\030\021 \003(\003\022\027\n\017dedupl"
    "icate_hlo\030\014 \001(\010\0225\n-allow_spmd_sharding_p"
    "ropagation_to_parameters\030\027 \003(\010\0221\n)allow_"
    "spmd_sharding_propagation_to_output\030\016 \003("
    "\010\0220\n(param_requires_broadcast_via_collec"
    "tives\030\022 \003(\010\022(\n allow_separate_sharding_p"
    "rograms\030\023 \001(\010\022H\n\034shardable_value_update_"
    "pairs\030\024 \003(\0132\".xla.ShardableValueUpdatePa"
    "irProto\022\023\n\013fdo_profile\030\025 \001(\014\022\032\n\022device_m"
    "emory_size\030\026 \001(\003\022\036\n\026use_shardy_partition"
    "er\030\030 \001(\010J\004\010\r\020\016\"\343\016\n\024HloModuleConfigProto\022"
    "8\n\030entry_computation_layout\030\001 \001(\0132\026.xla."
    "ProgramShapeProto\022\014\n\004seed\030\002 \001(\004\022\021\n\tlaunc"
    "h_id\030\003 \001(\005\022\025\n\rreplica_count\030\004 \001(\003\022\026\n\016num"
    "_partitions\030\005 \001(\003\0220\n(param_requires_broa"
    "dcast_via_collectives\030\006 \003(\010\022\035\n\025use_spmd_"
    "partitioning\030\007 \001(\010\022\"\n\032use_auto_spmd_part"
    "itioning\030\010 \001(\010\022)\n!auto_spmd_partitioning"
    "_mesh_shape\030\t \003(\003\022\'\n\037auto_spmd_partition"
    "ing_mesh_ids\030\n \003(\003\022\027\n\017deduplicate_hlo\030\013 "
    "\001(\010\022$\n\034intra_op_parallelism_threads\030\014 \001("
    "\003\022\023\n\013device_type\030\r \001(\t\022(\n\rdebug_options\030"
    "\016 \001(\0132\021.xla.DebugOptions\022<\n\030static_devic"
    "e_assignment\030\017 \001(\0132\032.xla.DeviceAssignmen"
    "tProto\022D\n pre_simulation_device_assignme"
    "nt\030# \001(\0132\032.xla.DeviceAssignmentProto\022(\n "
    "allow_separate_sharding_programs\030\036 \001(\010\022H"
    "\n\034shardable_value_update_pairs\030\020 \003(\0132\".x"
    "la.ShardableValueUpdatePairProto\022 \n\030alia"
    "s_passthrough_params\030\021 \001(\010\022)\n!content_aw"
    "are_computation_sorting\030\022 \001(\010\022R\n\030fusion_"
    "config_collection\030\023 \001(\01620.xla.HloModuleC"
    "onfigProto.FusionConfigCollection\0229\n\rfus"
    "ion_config\030\024 \003(\0132\".xla.HloModuleConfigPr"
    "oto.BoolList\022<\n\ndot_config\030\025 \003(\0132(.xla.H"
    "loModuleConfigProto.DotConfigEntry\022>\n\rla"
    "yout_config\030\026 \003(\0132\'.xla.HloModuleConfigP"
    "roto.Int64ListList\022&\n\036memory_space_assig"
    "nment_config\030\027 \003(\004\022A\n\025phase_ordering_con"
    "fig\030\030 \003(\0132\".xla.HloModuleConfigProto.Boo"
    "lList\022\023\n\013phase_index\030\031 \001(\005\0225\n-allow_spmd"
    "_sharding_propagation_to_parameters\030! \003("
    "\010\0221\n)allow_spmd_sharding_propagation_to_"
    "output\030\033 \003(\010\022S\n\026analysis_allowance_map\030\034"
    " \003(\01323.xla.HloModuleConfigProto.Analysis"
    "AllowanceMapEntry\022E\n\035matrix_unit_operand"
    "_precision\030\035 \001(\0162\036.xla.PrecisionConfig.P"
    "recision\022\023\n\013fdo_profile\030\037 \001(\014\022\032\n\022device_"
    "memory_size\030  \001(\003\022\036\n\026use_shardy_partitio"
    "ner\030\" \001(\010\032\030\n\010BoolList\022\014\n\004vals\030\001 \003(\010\032\031\n\tI"
    "nt64List\022\014\n\004vals\030\001 \003(\003\032C\n\rInt64ListList\022"
    "2\n\005lists\030\001 \003(\0132#.xla.HloModuleConfigProt"
    "o.Int64List\032U\n\016DotConfigEntry\022\013\n\003key\030\001 \001"
    "(\t\0222\n\005value\030\002 \001(\0132#.xla.HloModuleConfigP"
    "roto.Int64List:\0028\001\032;\n\031AnalysisAllowanceM"
    "apEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\003:\0028\001\""
    "=\n\026FusionConfigCollection\022\007\n\003OFF\020\000\022\014\n\010PE"
    "R_EDGE\020\001\022\014\n\010PER_NODE\020\002J\004\010\032\020\033\"n\n\030HloModul"
    "eProtoWithConfig\022\'\n\nhlo_module\030\001 \001(\0132\023.x"
    "la.HloModuleProto\022)\n\006config\030\002 \001(\0132\031.xla."
    "HloModuleConfigProto\"\377\001\n\rScheduleProto\0224"
    "\n\014instructions\030\001 \003(\0132\036.xla.ScheduleProto"
    ".Instruction\022\026\n\016computation_id\030\002 \001(\003\022\'\n\n"
    "hlo_module\030\003 \001(\0132\023.xla.HloModuleProto\022\036\n"
    "\026cycles_per_microsecond\030\004 \001(\003\032W\n\013Instruc"
    "tion\022\n\n\002id\030\001 \001(\003\022\036\n\026start_timestamp_cycl"
    "es\030\002 \001(\001\022\034\n\024end_timestamp_cycles\030\003 \001(\001b\006"
    "proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_xla_2fxla_2eproto_deps[3] =
    {
        &::descriptor_table_google_2fprotobuf_2fany_2eproto,
        &::descriptor_table_xla_2fservice_2fhlo_2eproto,
        &::descriptor_table_xla_2fxla_5fdata_2eproto,
};
static ::absl::once_flag descriptor_table_xla_2fxla_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_xla_2fxla_2eproto = {
    false,
    false,
    13806,
    descriptor_table_protodef_xla_2fxla_2eproto,
    "xla/xla.proto",
    &descriptor_table_xla_2fxla_2eproto_once,
    descriptor_table_xla_2fxla_2eproto_deps,
    3,
    15,
    schemas,
    file_default_instances,
    TableStruct_xla_2fxla_2eproto::offsets,
    file_level_enum_descriptors_xla_2fxla_2eproto,
    file_level_service_descriptors_xla_2fxla_2eproto,
};
namespace xla {
const ::google::protobuf::EnumDescriptor* DebugOptions_ShapeChecks_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_xla_2fxla_2eproto);
  return file_level_enum_descriptors_xla_2fxla_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t DebugOptions_ShapeChecks_internal_data_[] = {
    196608u, 0u, };
bool DebugOptions_ShapeChecks_IsValid(int value) {
  return 0 <= value && value <= 2;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr DebugOptions_ShapeChecks DebugOptions::IGNORE;
constexpr DebugOptions_ShapeChecks DebugOptions::RUNTIME;
constexpr DebugOptions_ShapeChecks DebugOptions::COMPILE_TIME;
constexpr DebugOptions_ShapeChecks DebugOptions::ShapeChecks_MIN;
constexpr DebugOptions_ShapeChecks DebugOptions::ShapeChecks_MAX;
constexpr int DebugOptions::ShapeChecks_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* DebugOptions_StepMarkerLocation_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_xla_2fxla_2eproto);
  return file_level_enum_descriptors_xla_2fxla_2eproto[1];
}
PROTOBUF_CONSTINIT const uint32_t DebugOptions_StepMarkerLocation_internal_data_[] = {
    262144u, 0u, };
bool DebugOptions_StepMarkerLocation_IsValid(int value) {
  return 0 <= value && value <= 3;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr DebugOptions_StepMarkerLocation DebugOptions::STEP_MARK_AT_ENTRY;
constexpr DebugOptions_StepMarkerLocation DebugOptions::STEP_MARK_AT_TOP_LEVEL_WHILE_LOOP;
constexpr DebugOptions_StepMarkerLocation DebugOptions::STEP_MARK_AT_SECOND_LEVEL_WHILE_LOOP;
constexpr DebugOptions_StepMarkerLocation DebugOptions::STEP_MARK_NONE;
constexpr DebugOptions_StepMarkerLocation DebugOptions::StepMarkerLocation_MIN;
constexpr DebugOptions_StepMarkerLocation DebugOptions::StepMarkerLocation_MAX;
constexpr int DebugOptions::StepMarkerLocation_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* DebugOptions_CollectiveOpType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_xla_2fxla_2eproto);
  return file_level_enum_descriptors_xla_2fxla_2eproto[2];
}
PROTOBUF_CONSTINIT const uint32_t DebugOptions_CollectiveOpType_internal_data_[] = {
    458752u, 0u, };
bool DebugOptions_CollectiveOpType_IsValid(int value) {
  return 0 <= value && value <= 6;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr DebugOptions_CollectiveOpType DebugOptions::NOOP;
constexpr DebugOptions_CollectiveOpType DebugOptions::ALLREDUCE;
constexpr DebugOptions_CollectiveOpType DebugOptions::ALLGATHER;
constexpr DebugOptions_CollectiveOpType DebugOptions::REDUCESCATTER;
constexpr DebugOptions_CollectiveOpType DebugOptions::COLLECTIVEBROADCAST;
constexpr DebugOptions_CollectiveOpType DebugOptions::ALLTOALL;
constexpr DebugOptions_CollectiveOpType DebugOptions::COLLECTIVEPERMUTE;
constexpr DebugOptions_CollectiveOpType DebugOptions::CollectiveOpType_MIN;
constexpr DebugOptions_CollectiveOpType DebugOptions::CollectiveOpType_MAX;
constexpr int DebugOptions::CollectiveOpType_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* DebugOptions_CommandBufferCmdType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_xla_2fxla_2eproto);
  return file_level_enum_descriptors_xla_2fxla_2eproto[3];
}
PROTOBUF_CONSTINIT const uint32_t DebugOptions_CommandBufferCmdType_internal_data_[] = {
    524288u, 0u, };
bool DebugOptions_CommandBufferCmdType_IsValid(int value) {
  return 0 <= value && value <= 7;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr DebugOptions_CommandBufferCmdType DebugOptions::INVALID;
constexpr DebugOptions_CommandBufferCmdType DebugOptions::FUSION;
constexpr DebugOptions_CommandBufferCmdType DebugOptions::CUBLAS;
constexpr DebugOptions_CommandBufferCmdType DebugOptions::CUDNN;
constexpr DebugOptions_CommandBufferCmdType DebugOptions::COLLECTIVES;
constexpr DebugOptions_CommandBufferCmdType DebugOptions::CONDITIONALS;
constexpr DebugOptions_CommandBufferCmdType DebugOptions::CUSTOM_CALL;
constexpr DebugOptions_CommandBufferCmdType DebugOptions::CUBLASLT;
constexpr DebugOptions_CommandBufferCmdType DebugOptions::CommandBufferCmdType_MIN;
constexpr DebugOptions_CommandBufferCmdType DebugOptions::CommandBufferCmdType_MAX;
constexpr int DebugOptions::CommandBufferCmdType_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* DebugOptions_PartitioningAlgorithm_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_xla_2fxla_2eproto);
  return file_level_enum_descriptors_xla_2fxla_2eproto[4];
}
PROTOBUF_CONSTINIT const uint32_t DebugOptions_PartitioningAlgorithm_internal_data_[] = {
    262144u, 0u, };
bool DebugOptions_PartitioningAlgorithm_IsValid(int value) {
  return 0 <= value && value <= 3;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr DebugOptions_PartitioningAlgorithm DebugOptions::PARTITIONING_ALGORITHM_NOOP;
constexpr DebugOptions_PartitioningAlgorithm DebugOptions::PARTITIONING_ALGORITHM_EXP0;
constexpr DebugOptions_PartitioningAlgorithm DebugOptions::PARTITIONING_ALGORITHM_EXP1;
constexpr DebugOptions_PartitioningAlgorithm DebugOptions::PARTITIONING_ALGORITHM_EXP2;
constexpr DebugOptions_PartitioningAlgorithm DebugOptions::PartitioningAlgorithm_MIN;
constexpr DebugOptions_PartitioningAlgorithm DebugOptions::PartitioningAlgorithm_MAX;
constexpr int DebugOptions::PartitioningAlgorithm_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* DebugOptions_WhileLoopUnrolling_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_xla_2fxla_2eproto);
  return file_level_enum_descriptors_xla_2fxla_2eproto[5];
}
PROTOBUF_CONSTINIT const uint32_t DebugOptions_WhileLoopUnrolling_internal_data_[] = {
    196608u, 0u, };
bool DebugOptions_WhileLoopUnrolling_IsValid(int value) {
  return 0 <= value && value <= 2;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr DebugOptions_WhileLoopUnrolling DebugOptions::WHILE_LOOP_UNROLLING_NO_UNROLL;
constexpr DebugOptions_WhileLoopUnrolling DebugOptions::WHILE_LOOP_UNROLLING_DOUBLE_BUFFER;
constexpr DebugOptions_WhileLoopUnrolling DebugOptions::WHILE_LOOP_UNROLLING_FULL_UNROLL;
constexpr DebugOptions_WhileLoopUnrolling DebugOptions::WhileLoopUnrolling_MIN;
constexpr DebugOptions_WhileLoopUnrolling DebugOptions::WhileLoopUnrolling_MAX;
constexpr int DebugOptions::WhileLoopUnrolling_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* DebugOptions_AutotuneCacheMode_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_xla_2fxla_2eproto);
  return file_level_enum_descriptors_xla_2fxla_2eproto[6];
}
PROTOBUF_CONSTINIT const uint32_t DebugOptions_AutotuneCacheMode_internal_data_[] = {
    196608u, 0u, };
bool DebugOptions_AutotuneCacheMode_IsValid(int value) {
  return 0 <= value && value <= 2;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr DebugOptions_AutotuneCacheMode DebugOptions::AUTOTUNE_CACHE_MODE_UNSPECIFIED;
constexpr DebugOptions_AutotuneCacheMode DebugOptions::AUTOTUNE_CACHE_MODE_UPDATE;
constexpr DebugOptions_AutotuneCacheMode DebugOptions::AUTOTUNE_CACHE_MODE_READ;
constexpr DebugOptions_AutotuneCacheMode DebugOptions::AutotuneCacheMode_MIN;
constexpr DebugOptions_AutotuneCacheMode DebugOptions::AutotuneCacheMode_MAX;
constexpr int DebugOptions::AutotuneCacheMode_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* HloModuleConfigProto_FusionConfigCollection_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_xla_2fxla_2eproto);
  return file_level_enum_descriptors_xla_2fxla_2eproto[7];
}
PROTOBUF_CONSTINIT const uint32_t HloModuleConfigProto_FusionConfigCollection_internal_data_[] = {
    196608u, 0u, };
bool HloModuleConfigProto_FusionConfigCollection_IsValid(int value) {
  return 0 <= value && value <= 2;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr HloModuleConfigProto_FusionConfigCollection HloModuleConfigProto::OFF;
constexpr HloModuleConfigProto_FusionConfigCollection HloModuleConfigProto::PER_EDGE;
constexpr HloModuleConfigProto_FusionConfigCollection HloModuleConfigProto::PER_NODE;
constexpr HloModuleConfigProto_FusionConfigCollection HloModuleConfigProto::FusionConfigCollection_MIN;
constexpr HloModuleConfigProto_FusionConfigCollection HloModuleConfigProto::FusionConfigCollection_MAX;
constexpr int HloModuleConfigProto::FusionConfigCollection_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
// ===================================================================

class CompilationEnvironmentsProto::_Internal {
 public:
};

void CompilationEnvironmentsProto::clear_environments() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.environments_.Clear();
}
CompilationEnvironmentsProto::CompilationEnvironmentsProto(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:xla.CompilationEnvironmentsProto)
}
inline PROTOBUF_NDEBUG_INLINE CompilationEnvironmentsProto::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::xla::CompilationEnvironmentsProto& from_msg)
      : environments_{visibility, arena, from.environments_},
        _cached_size_{0} {}

CompilationEnvironmentsProto::CompilationEnvironmentsProto(
    ::google::protobuf::Arena* arena,
    const CompilationEnvironmentsProto& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  CompilationEnvironmentsProto* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:xla.CompilationEnvironmentsProto)
}
inline PROTOBUF_NDEBUG_INLINE CompilationEnvironmentsProto::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : environments_{visibility, arena},
        _cached_size_{0} {}

inline void CompilationEnvironmentsProto::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
CompilationEnvironmentsProto::~CompilationEnvironmentsProto() {
  // @@protoc_insertion_point(destructor:xla.CompilationEnvironmentsProto)
  SharedDtor(*this);
}
inline void CompilationEnvironmentsProto::SharedDtor(MessageLite& self) {
  CompilationEnvironmentsProto& this_ = static_cast<CompilationEnvironmentsProto&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* CompilationEnvironmentsProto::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) CompilationEnvironmentsProto(arena);
}
constexpr auto CompilationEnvironmentsProto::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(CompilationEnvironmentsProto, _impl_.environments_) +
          decltype(CompilationEnvironmentsProto::_impl_.environments_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(CompilationEnvironmentsProto), alignof(CompilationEnvironmentsProto), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&CompilationEnvironmentsProto::PlacementNew_,
                                 sizeof(CompilationEnvironmentsProto),
                                 alignof(CompilationEnvironmentsProto));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull CompilationEnvironmentsProto::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_CompilationEnvironmentsProto_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &CompilationEnvironmentsProto::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<CompilationEnvironmentsProto>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &CompilationEnvironmentsProto::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<CompilationEnvironmentsProto>(), &CompilationEnvironmentsProto::ByteSizeLong,
            &CompilationEnvironmentsProto::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(CompilationEnvironmentsProto, _impl_._cached_size_),
        false,
    },
    &CompilationEnvironmentsProto::kDescriptorMethods,
    &descriptor_table_xla_2fxla_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* CompilationEnvironmentsProto::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> CompilationEnvironmentsProto::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::xla::CompilationEnvironmentsProto>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .google.protobuf.Any environments = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(CompilationEnvironmentsProto, _impl_.environments_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .google.protobuf.Any environments = 1;
    {PROTOBUF_FIELD_OFFSET(CompilationEnvironmentsProto, _impl_.environments_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Any>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void CompilationEnvironmentsProto::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.CompilationEnvironmentsProto)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.environments_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* CompilationEnvironmentsProto::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const CompilationEnvironmentsProto& this_ = static_cast<const CompilationEnvironmentsProto&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* CompilationEnvironmentsProto::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const CompilationEnvironmentsProto& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:xla.CompilationEnvironmentsProto)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // repeated .google.protobuf.Any environments = 1;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_environments_size());
               i < n; i++) {
            const auto& repfield = this_._internal_environments().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    1, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:xla.CompilationEnvironmentsProto)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t CompilationEnvironmentsProto::ByteSizeLong(const MessageLite& base) {
          const CompilationEnvironmentsProto& this_ = static_cast<const CompilationEnvironmentsProto&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t CompilationEnvironmentsProto::ByteSizeLong() const {
          const CompilationEnvironmentsProto& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:xla.CompilationEnvironmentsProto)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .google.protobuf.Any environments = 1;
            {
              total_size += 1UL * this_._internal_environments_size();
              for (const auto& msg : this_._internal_environments()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void CompilationEnvironmentsProto::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CompilationEnvironmentsProto*>(&to_msg);
  auto& from = static_cast<const CompilationEnvironmentsProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xla.CompilationEnvironmentsProto)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_environments()->MergeFrom(
      from._internal_environments());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CompilationEnvironmentsProto::CopyFrom(const CompilationEnvironmentsProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.CompilationEnvironmentsProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void CompilationEnvironmentsProto::InternalSwap(CompilationEnvironmentsProto* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.environments_.InternalSwap(&other->_impl_.environments_);
}

::google::protobuf::Metadata CompilationEnvironmentsProto::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

#if defined(PROTOBUF_CUSTOM_VTABLE)
              DebugOptions_XlaBackendExtraOptionsEntry_DoNotUse::DebugOptions_XlaBackendExtraOptionsEntry_DoNotUse() : SuperType(_class_data_.base()) {}
              DebugOptions_XlaBackendExtraOptionsEntry_DoNotUse::DebugOptions_XlaBackendExtraOptionsEntry_DoNotUse(::google::protobuf::Arena* arena)
                  : SuperType(arena, _class_data_.base()) {}
#else   // PROTOBUF_CUSTOM_VTABLE
              DebugOptions_XlaBackendExtraOptionsEntry_DoNotUse::DebugOptions_XlaBackendExtraOptionsEntry_DoNotUse() : SuperType() {}
              DebugOptions_XlaBackendExtraOptionsEntry_DoNotUse::DebugOptions_XlaBackendExtraOptionsEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
#endif  // PROTOBUF_CUSTOM_VTABLE
              inline void* DebugOptions_XlaBackendExtraOptionsEntry_DoNotUse::PlacementNew_(const void*, void* mem,
                                                      ::google::protobuf::Arena* arena) {
                return ::new (mem) DebugOptions_XlaBackendExtraOptionsEntry_DoNotUse(arena);
              }
              constexpr auto DebugOptions_XlaBackendExtraOptionsEntry_DoNotUse::InternalNewImpl_() {
                return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(DebugOptions_XlaBackendExtraOptionsEntry_DoNotUse),
                                                          alignof(DebugOptions_XlaBackendExtraOptionsEntry_DoNotUse));
              }
              PROTOBUF_CONSTINIT
              PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
              const ::google::protobuf::internal::ClassDataFull DebugOptions_XlaBackendExtraOptionsEntry_DoNotUse::_class_data_ = {
                  ::google::protobuf::internal::ClassData{
                      &_DebugOptions_XlaBackendExtraOptionsEntry_DoNotUse_default_instance_._instance,
                      &_table_.header,
                      nullptr,  // OnDemandRegisterArenaDtor
                      nullptr,  // IsInitialized
                      &DebugOptions_XlaBackendExtraOptionsEntry_DoNotUse::MergeImpl,
                      ::google::protobuf::Message::GetNewImpl<DebugOptions_XlaBackendExtraOptionsEntry_DoNotUse>(),
              #if defined(PROTOBUF_CUSTOM_VTABLE)
                      &DebugOptions_XlaBackendExtraOptionsEntry_DoNotUse::SharedDtor,
                      static_cast<void (::google::protobuf::MessageLite::*)()>(
                          &DebugOptions_XlaBackendExtraOptionsEntry_DoNotUse::ClearImpl),
                          ::google::protobuf::Message::ByteSizeLongImpl, ::google::protobuf::Message::_InternalSerializeImpl
                          ,
              #endif  // PROTOBUF_CUSTOM_VTABLE
                      PROTOBUF_FIELD_OFFSET(DebugOptions_XlaBackendExtraOptionsEntry_DoNotUse, _impl_._cached_size_),
                      false,
                  },
                  &DebugOptions_XlaBackendExtraOptionsEntry_DoNotUse::kDescriptorMethods,
                  &descriptor_table_xla_2fxla_2eproto,
                  nullptr,  // tracker
              };
              const ::google::protobuf::internal::ClassData* DebugOptions_XlaBackendExtraOptionsEntry_DoNotUse::GetClassData() const {
                ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
                ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
                return _class_data_.base();
              }
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 61, 2> DebugOptions_XlaBackendExtraOptionsEntry_DoNotUse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(DebugOptions_XlaBackendExtraOptionsEntry_DoNotUse, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::DiscardEverythingFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::xla::DebugOptions_XlaBackendExtraOptionsEntry_DoNotUse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string value = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(DebugOptions_XlaBackendExtraOptionsEntry_DoNotUse, _impl_.value_)}},
    // string key = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(DebugOptions_XlaBackendExtraOptionsEntry_DoNotUse, _impl_.key_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string key = 1;
    {PROTOBUF_FIELD_OFFSET(DebugOptions_XlaBackendExtraOptionsEntry_DoNotUse, _impl_.key_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string value = 2;
    {PROTOBUF_FIELD_OFFSET(DebugOptions_XlaBackendExtraOptionsEntry_DoNotUse, _impl_.value_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\54\3\5\0\0\0\0\0"
    "xla.DebugOptions.XlaBackendExtraOptionsEntry"
    "key"
    "value"
  }},
};

// ===================================================================

class DebugOptions::_Internal {
 public:
};

DebugOptions::DebugOptions(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:xla.DebugOptions)
}
inline PROTOBUF_NDEBUG_INLINE DebugOptions::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::xla::DebugOptions& from_msg)
      : xla_disable_hlo_passes_{visibility, arena, from.xla_disable_hlo_passes_},
        xla_enable_hlo_passes_only_{visibility, arena, from.xla_enable_hlo_passes_only_},
        xla_gpu_ptx_file_{visibility, arena, from.xla_gpu_ptx_file_},
        xla_gpu_llvm_ir_file_{visibility, arena, from.xla_gpu_llvm_ir_file_},
        xla_gpu_enable_command_buffer_{visibility, arena, from.xla_gpu_enable_command_buffer_},
        _xla_gpu_enable_command_buffer_cached_byte_size_{0},
        xla_gpu_disable_async_collectives_{visibility, arena, from.xla_gpu_disable_async_collectives_},
        _xla_gpu_disable_async_collectives_cached_byte_size_{0},
        legacy_command_buffer_custom_call_targets_{visibility, arena, from.legacy_command_buffer_custom_call_targets_},
        xla_backend_extra_options_{visibility, arena, from.xla_backend_extra_options_},
        xla_gpu_cuda_data_dir_(arena, from.xla_gpu_cuda_data_dir_),
        xla_dump_to_(arena, from.xla_dump_to_),
        xla_dump_hlo_module_re_(arena, from.xla_dump_hlo_module_re_),
        xla_dump_hlo_pass_re_(arena, from.xla_dump_hlo_pass_re_),
        xla_gpu_algorithm_denylist_path_(arena, from.xla_gpu_algorithm_denylist_path_),
        xla_gpu_asm_extra_flags_(arena, from.xla_gpu_asm_extra_flags_),
        xla_dump_hlo_pipeline_re_(arena, from.xla_dump_hlo_pipeline_re_),
        xla_gpu_pgle_profile_file_or_directory_path_(arena, from.xla_gpu_pgle_profile_file_or_directory_path_),
        xla_gpu_dump_autotune_results_to_(arena, from.xla_gpu_dump_autotune_results_to_),
        xla_gpu_load_autotune_results_from_(arena, from.xla_gpu_load_autotune_results_from_),
        xla_gpu_target_config_filename_(arena, from.xla_gpu_target_config_filename_),
        xla_gpu_enable_custom_fusions_re_(arena, from.xla_gpu_enable_custom_fusions_re_),
        xla_gpu_dump_autotune_logs_to_(arena, from.xla_gpu_dump_autotune_logs_to_),
        xla_gpu_override_gemm_autotuner_(arena, from.xla_gpu_override_gemm_autotuner_),
        xla_gpu_kernel_cache_file_(arena, from.xla_gpu_kernel_cache_file_),
        xla_gpu_per_fusion_autotune_cache_dir_(arena, from.xla_gpu_per_fusion_autotune_cache_dir_),
        _cached_size_{0} {}

DebugOptions::DebugOptions(
    ::google::protobuf::Arena* arena,
    const DebugOptions& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  DebugOptions* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, xla_backend_optimization_level_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, xla_backend_optimization_level_),
           offsetof(Impl_, xla_experimental_ignore_channel_id_) -
               offsetof(Impl_, xla_backend_optimization_level_) +
               sizeof(Impl_::xla_experimental_ignore_channel_id_));

  // @@protoc_insertion_point(copy_constructor:xla.DebugOptions)
}
inline PROTOBUF_NDEBUG_INLINE DebugOptions::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : xla_disable_hlo_passes_{visibility, arena},
        xla_enable_hlo_passes_only_{visibility, arena},
        xla_gpu_ptx_file_{visibility, arena},
        xla_gpu_llvm_ir_file_{visibility, arena},
        xla_gpu_enable_command_buffer_{visibility, arena},
        _xla_gpu_enable_command_buffer_cached_byte_size_{0},
        xla_gpu_disable_async_collectives_{visibility, arena},
        _xla_gpu_disable_async_collectives_cached_byte_size_{0},
        legacy_command_buffer_custom_call_targets_{visibility, arena},
        xla_backend_extra_options_{visibility, arena},
        xla_gpu_cuda_data_dir_(arena),
        xla_dump_to_(arena),
        xla_dump_hlo_module_re_(arena),
        xla_dump_hlo_pass_re_(arena),
        xla_gpu_algorithm_denylist_path_(arena),
        xla_gpu_asm_extra_flags_(arena),
        xla_dump_hlo_pipeline_re_(arena),
        xla_gpu_pgle_profile_file_or_directory_path_(arena),
        xla_gpu_dump_autotune_results_to_(arena),
        xla_gpu_load_autotune_results_from_(arena),
        xla_gpu_target_config_filename_(arena),
        xla_gpu_enable_custom_fusions_re_(arena),
        xla_gpu_dump_autotune_logs_to_(arena),
        xla_gpu_override_gemm_autotuner_(arena),
        xla_gpu_kernel_cache_file_(arena),
        xla_gpu_per_fusion_autotune_cache_dir_(arena),
        _cached_size_{0} {}

inline void DebugOptions::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, xla_backend_optimization_level_),
           0,
           offsetof(Impl_, xla_experimental_ignore_channel_id_) -
               offsetof(Impl_, xla_backend_optimization_level_) +
               sizeof(Impl_::xla_experimental_ignore_channel_id_));
}
DebugOptions::~DebugOptions() {
  // @@protoc_insertion_point(destructor:xla.DebugOptions)
  SharedDtor(*this);
}
inline void DebugOptions::SharedDtor(MessageLite& self) {
  DebugOptions& this_ = static_cast<DebugOptions&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.xla_gpu_cuda_data_dir_.Destroy();
  this_._impl_.xla_dump_to_.Destroy();
  this_._impl_.xla_dump_hlo_module_re_.Destroy();
  this_._impl_.xla_dump_hlo_pass_re_.Destroy();
  this_._impl_.xla_gpu_algorithm_denylist_path_.Destroy();
  this_._impl_.xla_gpu_asm_extra_flags_.Destroy();
  this_._impl_.xla_dump_hlo_pipeline_re_.Destroy();
  this_._impl_.xla_gpu_pgle_profile_file_or_directory_path_.Destroy();
  this_._impl_.xla_gpu_dump_autotune_results_to_.Destroy();
  this_._impl_.xla_gpu_load_autotune_results_from_.Destroy();
  this_._impl_.xla_gpu_target_config_filename_.Destroy();
  this_._impl_.xla_gpu_enable_custom_fusions_re_.Destroy();
  this_._impl_.xla_gpu_dump_autotune_logs_to_.Destroy();
  this_._impl_.xla_gpu_override_gemm_autotuner_.Destroy();
  this_._impl_.xla_gpu_kernel_cache_file_.Destroy();
  this_._impl_.xla_gpu_per_fusion_autotune_cache_dir_.Destroy();
  this_._impl_.~Impl_();
}

inline void* DebugOptions::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) DebugOptions(arena);
}
constexpr auto DebugOptions::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_disable_hlo_passes_) +
          decltype(DebugOptions::_impl_.xla_disable_hlo_passes_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_enable_hlo_passes_only_) +
          decltype(DebugOptions::_impl_.xla_enable_hlo_passes_only_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_gpu_ptx_file_) +
          decltype(DebugOptions::_impl_.xla_gpu_ptx_file_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_gpu_llvm_ir_file_) +
          decltype(DebugOptions::_impl_.xla_gpu_llvm_ir_file_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_gpu_disable_async_collectives_) +
          decltype(DebugOptions::_impl_.xla_gpu_disable_async_collectives_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_gpu_enable_command_buffer_) +
          decltype(DebugOptions::_impl_.xla_gpu_enable_command_buffer_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.legacy_command_buffer_custom_call_targets_) +
          decltype(DebugOptions::_impl_.legacy_command_buffer_custom_call_targets_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_backend_extra_options_) +
          decltype(DebugOptions::_impl_.xla_backend_extra_options_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_backend_extra_options_) +
          decltype(DebugOptions::_impl_.xla_backend_extra_options_)::
              InternalGetArenaOffsetAlt(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(DebugOptions), alignof(DebugOptions), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&DebugOptions::PlacementNew_,
                                 sizeof(DebugOptions),
                                 alignof(DebugOptions));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull DebugOptions::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_DebugOptions_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &DebugOptions::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<DebugOptions>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &DebugOptions::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<DebugOptions>(), &DebugOptions::ByteSizeLong,
            &DebugOptions::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_._cached_size_),
        false,
    },
    &DebugOptions::kDescriptorMethods,
    &descriptor_table_xla_2fxla_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* DebugOptions::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 203, 1, 820, 48> DebugOptions::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    500, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    2684354301,  // skipmap
    offsetof(decltype(_table_), field_entries),
    203,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::xla::DebugOptions>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // bool xla_hlo_graph_addresses = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(DebugOptions, _impl_.xla_hlo_graph_addresses_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_hlo_graph_addresses_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // bool xla_hlo_profile = 9;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(DebugOptions, _impl_.xla_hlo_profile_), 63>(),
     {72, 63, 0, PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_hlo_profile_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // bool xla_dump_hlo_as_text = 112;
    {::_pbi::TcParser::FastV8S2,
     {1920, 63, 0, PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_dump_hlo_as_text_)}},
    // bool xla_embed_ir_in_executable = 33;
    {::_pbi::TcParser::FastV8S2,
     {648, 63, 0, PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_embed_ir_in_executable_)}},
    // bool xla_dump_hlo_as_dot = 114;
    {::_pbi::TcParser::FastV8S2,
     {1936, 63, 0, PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_dump_hlo_as_dot_)}},
    // bool xla_eliminate_hlo_implicit_broadcast = 35;
    {::_pbi::TcParser::FastV8S2,
     {664, 63, 0, PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_eliminate_hlo_implicit_broadcast_)}},
    // bool xla_gpu_enable_fast_min_max = 100;
    {::_pbi::TcParser::FastV8S2,
     {1696, 63, 0, PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_gpu_enable_fast_min_max_)}},
    // bool xla_gpu_crash_on_verification_failures = 101;
    {::_pbi::TcParser::FastV8S2,
     {1704, 63, 0, PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_gpu_crash_on_verification_failures_)}},
    // bool xla_llvm_enable_alias_scope_metadata = 70;
    {::_pbi::TcParser::FastV8S2,
     {1200, 63, 0, PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_llvm_enable_alias_scope_metadata_)}},
    // bool xla_llvm_enable_noalias_metadata = 71;
    {::_pbi::TcParser::FastV8S2,
     {1208, 63, 0, PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_llvm_enable_noalias_metadata_)}},
    // bool xla_llvm_enable_invariant_load_metadata = 72;
    {::_pbi::TcParser::FastV8S2,
     {1216, 63, 0, PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_llvm_enable_invariant_load_metadata_)}},
    // bool xla_llvm_disable_expensive_passes = 73;
    {::_pbi::TcParser::FastV8S2,
     {1224, 63, 0, PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_llvm_disable_expensive_passes_)}},
    // bool xla_test_all_output_layouts = 90;
    {::_pbi::TcParser::FastV8S2,
     {1488, 63, 0, PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_test_all_output_layouts_)}},
    // bool xla_test_all_input_layouts = 91;
    {::_pbi::TcParser::FastV8S2,
     {1496, 63, 0, PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_test_all_input_layouts_)}},
    // bool xla_cpu_multi_thread_eigen = 60;
    {::_pbi::TcParser::FastV8S2,
     {992, 63, 0, PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_cpu_multi_thread_eigen_)}},
    // string xla_gpu_cuda_data_dir = 61;
    {::_pbi::TcParser::FastUS2,
     {1002, 63, 0, PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_gpu_cuda_data_dir_)}},
    // repeated string xla_disable_hlo_passes = 30;
    {::_pbi::TcParser::FastUR2,
     {498, 63, 0, PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_disable_hlo_passes_)}},
    // int32 xla_backend_optimization_level = 31;
    {::_pbi::TcParser::FastV32S2,
     {504, 63, 0, PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_backend_optimization_level_)}},
  }}, {{
    33, 0, 19,
    65530, 4, 51199, 6, 65055, 9, 61951, 13, 2, 16, 80, 31,
    17458, 45, 8321, 56, 40323, 69, 79, 77, 25539, 88, 2084, 96,
    8992, 109, 2, 121, 0, 136, 9012, 152, 9216, 162, 0, 176,
    64512, 192,500, 0, 1,
     65534, 202,
    65535, 65535
  }}, {{
    // bool xla_hlo_graph_addresses = 2;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_hlo_graph_addresses_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool xla_hlo_profile = 9;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_hlo_profile_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // repeated string xla_disable_hlo_passes = 30;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_disable_hlo_passes_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // int32 xla_backend_optimization_level = 31;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_backend_optimization_level_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // bool xla_embed_ir_in_executable = 33;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_embed_ir_in_executable_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool xla_eliminate_hlo_implicit_broadcast = 35;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_eliminate_hlo_implicit_broadcast_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool xla_cpu_multi_thread_eigen = 60;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_cpu_multi_thread_eigen_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // string xla_gpu_cuda_data_dir = 61;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_gpu_cuda_data_dir_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bool xla_gpu_ftz = 62;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_gpu_ftz_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool xla_llvm_enable_alias_scope_metadata = 70;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_llvm_enable_alias_scope_metadata_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool xla_llvm_enable_noalias_metadata = 71;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_llvm_enable_noalias_metadata_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool xla_llvm_enable_invariant_load_metadata = 72;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_llvm_enable_invariant_load_metadata_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool xla_llvm_disable_expensive_passes = 73;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_llvm_disable_expensive_passes_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool xla_test_all_output_layouts = 90;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_test_all_output_layouts_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool xla_test_all_input_layouts = 91;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_test_all_input_layouts_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool xla_hlo_graph_sharding_color = 92;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_hlo_graph_sharding_color_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool xla_cpu_use_mkl_dnn = 97;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_cpu_use_mkl_dnn_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool xla_cpu_enable_fast_math = 99;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_cpu_enable_fast_math_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool xla_gpu_enable_fast_min_max = 100;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_gpu_enable_fast_min_max_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool xla_gpu_crash_on_verification_failures = 101;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_gpu_crash_on_verification_failures_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // int32 xla_force_host_platform_device_count = 102;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_force_host_platform_device_count_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // bool xla_gpu_disable_gpuasm_optimizations = 103;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_gpu_disable_gpuasm_optimizations_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool xla_disable_all_hlo_passes = 104;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_disable_all_hlo_passes_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool xla_gpu_enable_dynamic_slice_fusion = 105;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_gpu_enable_dynamic_slice_fusion_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool xla_hlo_evaluator_use_fast_path = 106;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_hlo_evaluator_use_fast_path_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool xla_allow_scalar_index_dynamic_ops = 107;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_allow_scalar_index_dynamic_ops_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // .xla.DebugOptions.StepMarkerLocation xla_step_marker_location = 108;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_step_marker_location_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // string xla_dump_to = 109;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_dump_to_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string xla_dump_hlo_module_re = 110;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_dump_hlo_module_re_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string xla_dump_hlo_pass_re = 111;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_dump_hlo_pass_re_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bool xla_dump_hlo_as_text = 112;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_dump_hlo_as_text_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool xla_dump_hlo_as_proto = 113;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_dump_hlo_as_proto_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool xla_dump_hlo_as_dot = 114;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_dump_hlo_as_dot_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool xla_dump_hlo_as_url = 115;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_dump_hlo_as_url_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool xla_dump_hlo_as_html = 116;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_dump_hlo_as_html_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool xla_dump_hlo_snapshots = 118;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_dump_hlo_snapshots_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool xla_cpu_fast_math_honor_nans = 120;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_cpu_fast_math_honor_nans_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool xla_cpu_fast_math_honor_infs = 121;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_cpu_fast_math_honor_infs_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool xla_allow_excess_precision = 122;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_allow_excess_precision_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // int32 xla_gpu_autotune_level = 123;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_gpu_autotune_level_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // repeated string xla_enable_hlo_passes_only = 124;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_enable_hlo_passes_only_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // bool xla_gpu_force_conv_nchw = 125;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_gpu_force_conv_nchw_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool xla_cpu_fast_math_honor_division = 126;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_cpu_fast_math_honor_division_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // repeated string xla_gpu_ptx_file = 127;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_gpu_ptx_file_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // string xla_gpu_algorithm_denylist_path = 128;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_gpu_algorithm_denylist_path_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bool xla_cpu_fast_math_honor_functions = 129;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_cpu_fast_math_honor_functions_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool xla_dump_include_timestamp = 131;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_dump_include_timestamp_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // int32 xla_dump_max_hlo_modules = 132;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_dump_max_hlo_modules_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // bool xla_tpu_detect_nan = 135;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_tpu_detect_nan_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool xla_tpu_detect_inf = 136;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_tpu_detect_inf_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool xla_cpu_enable_xprof_traceme = 137;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_cpu_enable_xprof_traceme_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool xla_gpu_unsafe_fallback_to_driver_on_ptxas_not_found = 138;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_gpu_unsafe_fallback_to_driver_on_ptxas_not_found_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool xla_cpu_enable_fast_min_max = 140;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_cpu_enable_fast_min_max_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // string xla_gpu_asm_extra_flags = 141;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_gpu_asm_extra_flags_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 xla_multiheap_size_constraint_per_heap = 142;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_multiheap_size_constraint_per_heap_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // bool xla_dump_module_metadata = 144;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_dump_module_metadata_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool xla_gpu_force_conv_nhwc = 146;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_gpu_force_conv_nhwc_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // int32 xla_gpu_force_compilation_parallelism = 147;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_gpu_force_compilation_parallelism_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // bool xla_gpu_deterministic_ops = 148;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_gpu_deterministic_ops_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool xla_dump_fusion_visualization = 149;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_dump_fusion_visualization_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // repeated string xla_gpu_llvm_ir_file = 150;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_gpu_llvm_ir_file_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // bool xla_dump_compress_protos = 151;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_dump_compress_protos_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool xla_dump_disable_metadata = 153;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_dump_disable_metadata_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // string xla_dump_hlo_pipeline_re = 154;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_dump_hlo_pipeline_re_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bool xla_gpu_dump_llvmir = 155;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_gpu_dump_llvmir_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool xla_gpu_strict_conv_algorithm_picker = 156;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_gpu_strict_conv_algorithm_picker_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // int64 xla_gpu_all_reduce_combine_threshold_bytes = 157;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_gpu_all_reduce_combine_threshold_bytes_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // int32 xla_gpu_all_reduce_blueconnect_num_devices_per_host = 159;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_gpu_all_reduce_blueconnect_num_devices_per_host_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // bool xla_gpu_enable_cudnn_frontend = 160;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_gpu_enable_cudnn_frontend_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // int64 xla_gpu_nccl_termination_timeout_seconds = 163;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_gpu_nccl_termination_timeout_seconds_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // bool xla_dump_hlo_as_long_text = 164;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_dump_hlo_as_long_text_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool xla_gpu_enable_shared_constants = 165;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_gpu_enable_shared_constants_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool xla_gpu_enable_cublaslt = 166;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_gpu_enable_cublaslt_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // int64 xla_gpu_redzone_scratch_max_megabytes = 167;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_gpu_redzone_scratch_max_megabytes_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // .xla.DebugOptions.ShapeChecks xla_gpu_shape_checks = 170;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_gpu_shape_checks_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // bool xla_cpu_use_acl = 174;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_cpu_use_acl_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool xla_cpu_strict_dot_conv_math = 175;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_cpu_strict_dot_conv_math_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool xla_gpu_use_runtime_fusion = 181;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_gpu_use_runtime_fusion_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool xla_dump_latency_hiding_schedule = 182;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_dump_latency_hiding_schedule_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool xla_cpu_enable_mlir_tiling_and_fusion = 184;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_cpu_enable_mlir_tiling_and_fusion_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool xla_dump_enable_mlir_pretty_form = 185;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_dump_enable_mlir_pretty_form_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool xla_gpu_enable_latency_hiding_scheduler = 186;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_gpu_enable_latency_hiding_scheduler_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // .xla.DebugOptions.PartitioningAlgorithm xla_partitioning_algorithm = 187;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_partitioning_algorithm_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // bool xla_gpu_enable_triton_gemm = 188;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_gpu_enable_triton_gemm_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool xla_gpu_enable_cudnn_int8x32_convolution_reordering = 189;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_gpu_enable_cudnn_int8x32_convolution_reordering_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool xla_gpu_triton_gemm_any = 190;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_gpu_triton_gemm_any_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool xla_cpu_enable_experimental_deallocation = 191;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_cpu_enable_experimental_deallocation_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool xla_cpu_enable_mlir_fusion_outlining = 192;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_cpu_enable_mlir_fusion_outlining_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool xla_cpu_enable_custom_matmul_tiling = 195;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_cpu_enable_custom_matmul_tiling_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // int64 xla_cpu_matmul_tiling_m_dim = 196;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_cpu_matmul_tiling_m_dim_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // int64 xla_cpu_matmul_tiling_n_dim = 197;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_cpu_matmul_tiling_n_dim_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // int64 xla_cpu_matmul_tiling_k_dim = 198;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_cpu_matmul_tiling_k_dim_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // bool xla_gpu_enable_while_loop_reduce_scatter_code_motion = 203;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_gpu_enable_while_loop_reduce_scatter_code_motion_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool xla_gpu_lhs_enable_gpu_async_tracker = 204;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_gpu_lhs_enable_gpu_async_tracker_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // int32 xla_gpu_collective_inflation_factor = 205;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_gpu_collective_inflation_factor_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 xla_gpu_graph_min_graph_size = 208;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_gpu_graph_min_graph_size_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // bool xla_gpu_enable_reassociation_for_converted_ar = 209;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_gpu_enable_reassociation_for_converted_ar_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // string xla_gpu_pgle_profile_file_or_directory_path = 210;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_gpu_pgle_profile_file_or_directory_path_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int64 xla_gpu_all_gather_combine_threshold_bytes = 212;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_gpu_all_gather_combine_threshold_bytes_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // int64 xla_gpu_reduce_scatter_combine_threshold_bytes = 213;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_gpu_reduce_scatter_combine_threshold_bytes_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // bool xla_gpu_graph_enable_concurrent_region = 215;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_gpu_graph_enable_concurrent_region_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool xla_gpu_enable_highest_priority_async_stream = 216;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_gpu_enable_highest_priority_async_stream_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool xla_gpu_enable_pipelined_all_reduce = 217;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_gpu_enable_pipelined_all_reduce_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool xla_gpu_enable_cudnn_fmha = 218;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_gpu_enable_cudnn_fmha_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool xla_gpu_exhaustive_tiling_search = 219;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_gpu_exhaustive_tiling_search_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool xla_gpu_enable_priority_fusion = 221;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_gpu_enable_priority_fusion_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // string xla_gpu_dump_autotune_results_to = 222;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_gpu_dump_autotune_results_to_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string xla_gpu_load_autotune_results_from = 223;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_gpu_load_autotune_results_from_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 xla_gpu_auto_spmd_partitioning_memory_budget_gb = 224;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_gpu_auto_spmd_partitioning_memory_budget_gb_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // float xla_gpu_auto_spmd_partitioning_memory_budget_ratio = 225;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_gpu_auto_spmd_partitioning_memory_budget_ratio_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // bool xla_gpu_triton_gemm_disable_reduced_precision_reduction = 226;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_gpu_triton_gemm_disable_reduced_precision_reduction_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool xla_gpu_enable_pipelined_all_gather = 227;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_gpu_enable_pipelined_all_gather_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // int64 xla_gpu_redzone_padding_bytes = 228;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_gpu_redzone_padding_bytes_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // int32 xla_gpu_triton_fusion_level = 229;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_gpu_triton_fusion_level_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // bool xla_gpu_enable_pipelined_reduce_scatter = 231;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_gpu_enable_pipelined_reduce_scatter_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool xla_gpu_dump_autotuned_gemm_fusions = 232;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_gpu_dump_autotuned_gemm_fusions_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool xla_gpu_fused_attention_use_cudnn_rng = 235;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_gpu_fused_attention_use_cudnn_rng_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool xla_gpu_copy_insertion_use_region_analysis = 236;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_gpu_copy_insertion_use_region_analysis_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // int64 xla_gpu_collective_permute_decomposer_threshold = 237;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_gpu_collective_permute_decomposer_threshold_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // bool xla_gpu_enable_pipelined_collectives = 239;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_gpu_enable_pipelined_collectives_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool xla_gpu_collect_cost_model_stats = 240;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_gpu_collect_cost_model_stats_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool xla_gpu_enable_split_k_autotuning = 241;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_gpu_enable_split_k_autotuning_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool xla_gpu_enable_reduction_epilogue_fusion = 243;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_gpu_enable_reduction_epilogue_fusion_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool xla_gpu_enable_nccl_clique_optimization = 244;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_gpu_enable_nccl_clique_optimization_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool xla_gpu_mock_custom_calls = 245;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_gpu_mock_custom_calls_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool xla_gpu_enable_pipelined_p2p = 246;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_gpu_enable_pipelined_p2p_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool xla_gpu_cublas_fallback = 247;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_gpu_cublas_fallback_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool xla_gpu_enable_while_loop_double_buffering = 248;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_gpu_enable_while_loop_double_buffering_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool xla_gpu_ensure_minor_dot_contraction_dims = 249;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_gpu_ensure_minor_dot_contraction_dims_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool xla_gpu_filter_kernels_spilling_registers_on_autotuning = 250;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_gpu_filter_kernels_spilling_registers_on_autotuning_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // int64 xla_debug_buffer_assignment_show_max = 251;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_debug_buffer_assignment_show_max_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // bool xla_detailed_logging = 252;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_detailed_logging_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool xla_enable_dumping = 253;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_enable_dumping_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool xla_gpu_enable_all_gather_combine_by_dim = 254;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_gpu_enable_all_gather_combine_by_dim_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool xla_gpu_enable_analytical_latency_estimator = 255;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_gpu_enable_analytical_latency_estimator_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // int32 xla_gpu_llvm_verification_level = 256;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_gpu_llvm_verification_level_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // bool xla_gpu_enable_reduce_scatter_combine_by_dim = 257;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_gpu_enable_reduce_scatter_combine_by_dim_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // repeated .xla.DebugOptions.CommandBufferCmdType xla_gpu_enable_command_buffer = 258;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_gpu_enable_command_buffer_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedOpenEnum)},
    // bool xla_gpu_enable_cub_radix_sort = 259;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_gpu_enable_cub_radix_sort_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // int32 xla_gpu_memory_limit_slop_factor = 260;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_gpu_memory_limit_slop_factor_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string xla_gpu_target_config_filename = 261;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_gpu_target_config_filename_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bool xla_gpu_enable_cudnn_layer_norm = 262;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_gpu_enable_cudnn_layer_norm_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool xla_gpu_enable_custom_fusions = 263;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_gpu_enable_custom_fusions_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // string xla_gpu_enable_custom_fusions_re = 264;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_gpu_enable_custom_fusions_re_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int64 xla_gpu_threshold_for_windowed_einsum_mib = 265;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_gpu_threshold_for_windowed_einsum_mib_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // bool xla_gpu_enable_triton_hopper = 266;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_gpu_enable_triton_hopper_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool xla_gpu_enable_nccl_user_buffers = 267;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_gpu_enable_nccl_user_buffers_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool xla_gpu_enable_llvm_module_compilation_parallelism = 268;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_gpu_enable_llvm_module_compilation_parallelism_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool xla_gpu_enable_libnvptxcompiler = 269;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_gpu_enable_libnvptxcompiler_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool xla_gpu_enable_dot_strength_reduction = 270;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_gpu_enable_dot_strength_reduction_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool xla_gpu_enable_bf16_6way_gemm = 271;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_gpu_enable_bf16_6way_gemm_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool xla_gpu_enable_nccl_comm_splitting = 272;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_gpu_enable_nccl_comm_splitting_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // int64 xla_gpu_nccl_collective_max_nchannels = 273;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_gpu_nccl_collective_max_nchannels_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // int64 xla_gpu_nccl_p2p_max_nchannels = 274;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_gpu_nccl_p2p_max_nchannels_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // bool xla_gpu_enable_nccl_per_stream_comms = 276;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_gpu_enable_nccl_per_stream_comms_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool xla_gpu_enable_bf16_3way_gemm = 279;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_gpu_enable_bf16_3way_gemm_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool xla_gpu_multi_streamed_windowed_einsum = 280;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_gpu_multi_streamed_windowed_einsum_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // int64 xla_gpu_gemm_rewrite_size_threshold = 283;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_gpu_gemm_rewrite_size_threshold_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // bool xla_gpu_require_complete_aot_autotune_results = 284;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_gpu_require_complete_aot_autotune_results_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // int32 xla_gpu_cudnn_gemm_fusion_level = 285;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_gpu_cudnn_gemm_fusion_level_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // bool xla_gpu_use_memcpy_local_p2p = 287;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_gpu_use_memcpy_local_p2p_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // int64 xla_gpu_autotune_max_solutions = 288;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_gpu_autotune_max_solutions_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // repeated .xla.DebugOptions.CollectiveOpType xla_gpu_disable_async_collectives = 289;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_gpu_disable_async_collectives_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedOpenEnum)},
    // bool xla_dump_large_constants = 290;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_dump_large_constants_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool xla_gpu_verify_triton_fusion_numerics = 291;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_gpu_verify_triton_fusion_numerics_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // string xla_gpu_dump_autotune_logs_to = 292;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_gpu_dump_autotune_logs_to_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int64 xla_reduce_window_rewrite_base_length = 293;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_reduce_window_rewrite_base_length_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // .xla.DebugOptions.WhileLoopUnrolling xla_gpu_enable_while_loop_unrolling = 294;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_gpu_enable_while_loop_unrolling_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // string xla_gpu_override_gemm_autotuner = 295;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_gpu_override_gemm_autotuner_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bool xla_gpu_enable_host_memory_offloading = 296;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_gpu_enable_host_memory_offloading_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool xla_gpu_exclude_nondeterministic_ops = 297;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_gpu_exclude_nondeterministic_ops_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool xla_cpu_use_thunk_runtime = 298;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_cpu_use_thunk_runtime_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool xla_llvm_force_inline_before_split = 300;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_llvm_force_inline_before_split_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool xla_gpu_nccl_terminate_on_error = 301;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_gpu_nccl_terminate_on_error_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // int64 xla_gpu_mlir_emitter_level = 303;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_gpu_mlir_emitter_level_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // bool xla_gpu_shard_autotuning = 304;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_gpu_shard_autotuning_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool xla_gpu_enable_approx_costly_collectives = 305;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_gpu_enable_approx_costly_collectives_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // string xla_gpu_kernel_cache_file = 306;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_gpu_kernel_cache_file_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bool xla_cpu_enable_concurrency_optimized_scheduler = 307;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_cpu_enable_concurrency_optimized_scheduler_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // int32 xla_cpu_prefer_vector_width = 308;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_cpu_prefer_vector_width_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // bool xla_gpu_unsafe_pipelined_loop_annotator = 309;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_gpu_unsafe_pipelined_loop_annotator_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // string xla_gpu_per_fusion_autotune_cache_dir = 310;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_gpu_per_fusion_autotune_cache_dir_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int64 xla_cmd_buffer_trace_cache_size = 311;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_cmd_buffer_trace_cache_size_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // bool xla_gpu_temp_buffer_use_separate_color = 312;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_gpu_temp_buffer_use_separate_color_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool xla_gpu_run_post_layout_collective_pipeliner = 313;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_gpu_run_post_layout_collective_pipeliner_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // repeated string legacy_command_buffer_custom_call_targets = 314;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.legacy_command_buffer_custom_call_targets_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // bool xla_syntax_sugar_async_ops = 315;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_syntax_sugar_async_ops_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // float xla_gpu_autotune_gemm_rtol = 316;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_gpu_autotune_gemm_rtol_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // bool xla_enable_command_buffers_during_profiling = 317;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_enable_command_buffers_during_profiling_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // int32 xla_gpu_cudnn_gemm_max_plans = 318;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_gpu_cudnn_gemm_max_plans_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // bool xla_gpu_enable_libnvjitlink = 319;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_gpu_enable_libnvjitlink_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool xla_gpu_enable_triton_gemm_int4 = 320;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_gpu_enable_triton_gemm_int4_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool xla_gpu_async_dot = 321;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_gpu_async_dot_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool xla_gpu_unsupported_enable_triton_gemm = 322;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_gpu_unsupported_enable_triton_gemm_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // int32 xla_cpu_parallel_codegen_split_count = 323;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_cpu_parallel_codegen_split_count_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .xla.DebugOptions.AutotuneCacheMode xla_gpu_experimental_autotune_cache_mode = 324;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_gpu_experimental_autotune_cache_mode_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // bool xla_gpu_experimental_enable_triton_softmax_priority_fusion = 325;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_gpu_experimental_enable_triton_softmax_priority_fusion_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool xla_gpu_enable_pgle_accuracy_checker = 326;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_gpu_enable_pgle_accuracy_checker_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // int32 xla_gpu_executable_warn_stuck_timeout_seconds = 327;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_gpu_executable_warn_stuck_timeout_seconds_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 xla_gpu_executable_terminate_timeout_seconds = 328;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_gpu_executable_terminate_timeout_seconds_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // bool xla_gpu_experimental_disable_binary_libraries = 329;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_gpu_experimental_disable_binary_libraries_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool xla_experimental_ignore_channel_id = 330;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_experimental_ignore_channel_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // map<string, string> xla_backend_extra_options = 500;
    {PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_backend_extra_options_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
  }}, {{
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(DebugOptions()._impl_.xla_backend_extra_options_)>(
        1, 0, 0, 9,
        9)},
  }}, {{
    "\20\0\0\26\0\0\0\0\25\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\13\26\24\0\0\0\0\0\0\0\0\0\0\32\0\0\20\37\0\0\0\0\0\0\0\0\27\0\0\0\0\0\0\24\0\0\30\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\53\0\0\0\0\0\0\0\0\40\42\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\36\0\0\40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\35\0\0\37\0\0\0\0\0\0\0\0\31\0\0\0\45\0\0\0\51\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\31\0\0\0\0"
    "xla.DebugOptions"
    "xla_disable_hlo_passes"
    "xla_gpu_cuda_data_dir"
    "xla_dump_to"
    "xla_dump_hlo_module_re"
    "xla_dump_hlo_pass_re"
    "xla_enable_hlo_passes_only"
    "xla_gpu_ptx_file"
    "xla_gpu_algorithm_denylist_path"
    "xla_gpu_asm_extra_flags"
    "xla_gpu_llvm_ir_file"
    "xla_dump_hlo_pipeline_re"
    "xla_gpu_pgle_profile_file_or_directory_path"
    "xla_gpu_dump_autotune_results_to"
    "xla_gpu_load_autotune_results_from"
    "xla_gpu_target_config_filename"
    "xla_gpu_enable_custom_fusions_re"
    "xla_gpu_dump_autotune_logs_to"
    "xla_gpu_override_gemm_autotuner"
    "xla_gpu_kernel_cache_file"
    "xla_gpu_per_fusion_autotune_cache_dir"
    "legacy_command_buffer_custom_call_targets"
    "xla_backend_extra_options"
  }},
};

PROTOBUF_NOINLINE void DebugOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.DebugOptions)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.xla_disable_hlo_passes_.Clear();
  _impl_.xla_enable_hlo_passes_only_.Clear();
  _impl_.xla_gpu_ptx_file_.Clear();
  _impl_.xla_gpu_llvm_ir_file_.Clear();
  _impl_.xla_gpu_enable_command_buffer_.Clear();
  _impl_.xla_gpu_disable_async_collectives_.Clear();
  _impl_.legacy_command_buffer_custom_call_targets_.Clear();
  _impl_.xla_backend_extra_options_.Clear();
  _impl_.xla_gpu_cuda_data_dir_.ClearToEmpty();
  _impl_.xla_dump_to_.ClearToEmpty();
  _impl_.xla_dump_hlo_module_re_.ClearToEmpty();
  _impl_.xla_dump_hlo_pass_re_.ClearToEmpty();
  _impl_.xla_gpu_algorithm_denylist_path_.ClearToEmpty();
  _impl_.xla_gpu_asm_extra_flags_.ClearToEmpty();
  _impl_.xla_dump_hlo_pipeline_re_.ClearToEmpty();
  _impl_.xla_gpu_pgle_profile_file_or_directory_path_.ClearToEmpty();
  _impl_.xla_gpu_dump_autotune_results_to_.ClearToEmpty();
  _impl_.xla_gpu_load_autotune_results_from_.ClearToEmpty();
  _impl_.xla_gpu_target_config_filename_.ClearToEmpty();
  _impl_.xla_gpu_enable_custom_fusions_re_.ClearToEmpty();
  _impl_.xla_gpu_dump_autotune_logs_to_.ClearToEmpty();
  _impl_.xla_gpu_override_gemm_autotuner_.ClearToEmpty();
  _impl_.xla_gpu_kernel_cache_file_.ClearToEmpty();
  _impl_.xla_gpu_per_fusion_autotune_cache_dir_.ClearToEmpty();
  ::memset(&_impl_.xla_backend_optimization_level_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.xla_experimental_ignore_channel_id_) -
      reinterpret_cast<char*>(&_impl_.xla_backend_optimization_level_)) + sizeof(_impl_.xla_experimental_ignore_channel_id_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* DebugOptions::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const DebugOptions& this_ = static_cast<const DebugOptions&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* DebugOptions::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const DebugOptions& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:xla.DebugOptions)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // bool xla_hlo_graph_addresses = 2;
          if (this_._internal_xla_hlo_graph_addresses() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                2, this_._internal_xla_hlo_graph_addresses(), target);
          }

          // bool xla_hlo_profile = 9;
          if (this_._internal_xla_hlo_profile() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                9, this_._internal_xla_hlo_profile(), target);
          }

          // repeated string xla_disable_hlo_passes = 30;
          for (int i = 0, n = this_._internal_xla_disable_hlo_passes_size(); i < n; ++i) {
            const auto& s = this_._internal_xla_disable_hlo_passes().Get(i);
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xla.DebugOptions.xla_disable_hlo_passes");
            target = stream->WriteString(30, s, target);
          }

          // int32 xla_backend_optimization_level = 31;
          if (this_._internal_xla_backend_optimization_level() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                31, this_._internal_xla_backend_optimization_level(), target);
          }

          // bool xla_embed_ir_in_executable = 33;
          if (this_._internal_xla_embed_ir_in_executable() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                33, this_._internal_xla_embed_ir_in_executable(), target);
          }

          // bool xla_eliminate_hlo_implicit_broadcast = 35;
          if (this_._internal_xla_eliminate_hlo_implicit_broadcast() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                35, this_._internal_xla_eliminate_hlo_implicit_broadcast(), target);
          }

          // bool xla_cpu_multi_thread_eigen = 60;
          if (this_._internal_xla_cpu_multi_thread_eigen() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                60, this_._internal_xla_cpu_multi_thread_eigen(), target);
          }

          // string xla_gpu_cuda_data_dir = 61;
          if (!this_._internal_xla_gpu_cuda_data_dir().empty()) {
            const std::string& _s = this_._internal_xla_gpu_cuda_data_dir();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xla.DebugOptions.xla_gpu_cuda_data_dir");
            target = stream->WriteStringMaybeAliased(61, _s, target);
          }

          // bool xla_gpu_ftz = 62;
          if (this_._internal_xla_gpu_ftz() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                62, this_._internal_xla_gpu_ftz(), target);
          }

          // bool xla_llvm_enable_alias_scope_metadata = 70;
          if (this_._internal_xla_llvm_enable_alias_scope_metadata() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                70, this_._internal_xla_llvm_enable_alias_scope_metadata(), target);
          }

          // bool xla_llvm_enable_noalias_metadata = 71;
          if (this_._internal_xla_llvm_enable_noalias_metadata() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                71, this_._internal_xla_llvm_enable_noalias_metadata(), target);
          }

          // bool xla_llvm_enable_invariant_load_metadata = 72;
          if (this_._internal_xla_llvm_enable_invariant_load_metadata() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                72, this_._internal_xla_llvm_enable_invariant_load_metadata(), target);
          }

          // bool xla_llvm_disable_expensive_passes = 73;
          if (this_._internal_xla_llvm_disable_expensive_passes() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                73, this_._internal_xla_llvm_disable_expensive_passes(), target);
          }

          // bool xla_test_all_output_layouts = 90;
          if (this_._internal_xla_test_all_output_layouts() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                90, this_._internal_xla_test_all_output_layouts(), target);
          }

          // bool xla_test_all_input_layouts = 91;
          if (this_._internal_xla_test_all_input_layouts() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                91, this_._internal_xla_test_all_input_layouts(), target);
          }

          // bool xla_hlo_graph_sharding_color = 92;
          if (this_._internal_xla_hlo_graph_sharding_color() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                92, this_._internal_xla_hlo_graph_sharding_color(), target);
          }

          // bool xla_cpu_use_mkl_dnn = 97;
          if (this_._internal_xla_cpu_use_mkl_dnn() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                97, this_._internal_xla_cpu_use_mkl_dnn(), target);
          }

          // bool xla_cpu_enable_fast_math = 99;
          if (this_._internal_xla_cpu_enable_fast_math() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                99, this_._internal_xla_cpu_enable_fast_math(), target);
          }

          // bool xla_gpu_enable_fast_min_max = 100;
          if (this_._internal_xla_gpu_enable_fast_min_max() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                100, this_._internal_xla_gpu_enable_fast_min_max(), target);
          }

          // bool xla_gpu_crash_on_verification_failures = 101;
          if (this_._internal_xla_gpu_crash_on_verification_failures() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                101, this_._internal_xla_gpu_crash_on_verification_failures(), target);
          }

          // int32 xla_force_host_platform_device_count = 102;
          if (this_._internal_xla_force_host_platform_device_count() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                102, this_._internal_xla_force_host_platform_device_count(), target);
          }

          // bool xla_gpu_disable_gpuasm_optimizations = 103;
          if (this_._internal_xla_gpu_disable_gpuasm_optimizations() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                103, this_._internal_xla_gpu_disable_gpuasm_optimizations(), target);
          }

          // bool xla_disable_all_hlo_passes = 104;
          if (this_._internal_xla_disable_all_hlo_passes() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                104, this_._internal_xla_disable_all_hlo_passes(), target);
          }

          // bool xla_gpu_enable_dynamic_slice_fusion = 105;
          if (this_._internal_xla_gpu_enable_dynamic_slice_fusion() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                105, this_._internal_xla_gpu_enable_dynamic_slice_fusion(), target);
          }

          // bool xla_hlo_evaluator_use_fast_path = 106;
          if (this_._internal_xla_hlo_evaluator_use_fast_path() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                106, this_._internal_xla_hlo_evaluator_use_fast_path(), target);
          }

          // bool xla_allow_scalar_index_dynamic_ops = 107;
          if (this_._internal_xla_allow_scalar_index_dynamic_ops() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                107, this_._internal_xla_allow_scalar_index_dynamic_ops(), target);
          }

          // .xla.DebugOptions.StepMarkerLocation xla_step_marker_location = 108;
          if (this_._internal_xla_step_marker_location() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                108, this_._internal_xla_step_marker_location(), target);
          }

          // string xla_dump_to = 109;
          if (!this_._internal_xla_dump_to().empty()) {
            const std::string& _s = this_._internal_xla_dump_to();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xla.DebugOptions.xla_dump_to");
            target = stream->WriteStringMaybeAliased(109, _s, target);
          }

          // string xla_dump_hlo_module_re = 110;
          if (!this_._internal_xla_dump_hlo_module_re().empty()) {
            const std::string& _s = this_._internal_xla_dump_hlo_module_re();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xla.DebugOptions.xla_dump_hlo_module_re");
            target = stream->WriteStringMaybeAliased(110, _s, target);
          }

          // string xla_dump_hlo_pass_re = 111;
          if (!this_._internal_xla_dump_hlo_pass_re().empty()) {
            const std::string& _s = this_._internal_xla_dump_hlo_pass_re();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xla.DebugOptions.xla_dump_hlo_pass_re");
            target = stream->WriteStringMaybeAliased(111, _s, target);
          }

          // bool xla_dump_hlo_as_text = 112;
          if (this_._internal_xla_dump_hlo_as_text() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                112, this_._internal_xla_dump_hlo_as_text(), target);
          }

          // bool xla_dump_hlo_as_proto = 113;
          if (this_._internal_xla_dump_hlo_as_proto() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                113, this_._internal_xla_dump_hlo_as_proto(), target);
          }

          // bool xla_dump_hlo_as_dot = 114;
          if (this_._internal_xla_dump_hlo_as_dot() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                114, this_._internal_xla_dump_hlo_as_dot(), target);
          }

          // bool xla_dump_hlo_as_url = 115;
          if (this_._internal_xla_dump_hlo_as_url() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                115, this_._internal_xla_dump_hlo_as_url(), target);
          }

          // bool xla_dump_hlo_as_html = 116;
          if (this_._internal_xla_dump_hlo_as_html() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                116, this_._internal_xla_dump_hlo_as_html(), target);
          }

          // bool xla_dump_hlo_snapshots = 118;
          if (this_._internal_xla_dump_hlo_snapshots() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                118, this_._internal_xla_dump_hlo_snapshots(), target);
          }

          // bool xla_cpu_fast_math_honor_nans = 120;
          if (this_._internal_xla_cpu_fast_math_honor_nans() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                120, this_._internal_xla_cpu_fast_math_honor_nans(), target);
          }

          // bool xla_cpu_fast_math_honor_infs = 121;
          if (this_._internal_xla_cpu_fast_math_honor_infs() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                121, this_._internal_xla_cpu_fast_math_honor_infs(), target);
          }

          // bool xla_allow_excess_precision = 122;
          if (this_._internal_xla_allow_excess_precision() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                122, this_._internal_xla_allow_excess_precision(), target);
          }

          // int32 xla_gpu_autotune_level = 123;
          if (this_._internal_xla_gpu_autotune_level() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                123, this_._internal_xla_gpu_autotune_level(), target);
          }

          // repeated string xla_enable_hlo_passes_only = 124;
          for (int i = 0, n = this_._internal_xla_enable_hlo_passes_only_size(); i < n; ++i) {
            const auto& s = this_._internal_xla_enable_hlo_passes_only().Get(i);
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xla.DebugOptions.xla_enable_hlo_passes_only");
            target = stream->WriteString(124, s, target);
          }

          // bool xla_gpu_force_conv_nchw = 125;
          if (this_._internal_xla_gpu_force_conv_nchw() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                125, this_._internal_xla_gpu_force_conv_nchw(), target);
          }

          // bool xla_cpu_fast_math_honor_division = 126;
          if (this_._internal_xla_cpu_fast_math_honor_division() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                126, this_._internal_xla_cpu_fast_math_honor_division(), target);
          }

          // repeated string xla_gpu_ptx_file = 127;
          for (int i = 0, n = this_._internal_xla_gpu_ptx_file_size(); i < n; ++i) {
            const auto& s = this_._internal_xla_gpu_ptx_file().Get(i);
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xla.DebugOptions.xla_gpu_ptx_file");
            target = stream->WriteString(127, s, target);
          }

          // string xla_gpu_algorithm_denylist_path = 128;
          if (!this_._internal_xla_gpu_algorithm_denylist_path().empty()) {
            const std::string& _s = this_._internal_xla_gpu_algorithm_denylist_path();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xla.DebugOptions.xla_gpu_algorithm_denylist_path");
            target = stream->WriteStringMaybeAliased(128, _s, target);
          }

          // bool xla_cpu_fast_math_honor_functions = 129;
          if (this_._internal_xla_cpu_fast_math_honor_functions() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                129, this_._internal_xla_cpu_fast_math_honor_functions(), target);
          }

          // bool xla_dump_include_timestamp = 131;
          if (this_._internal_xla_dump_include_timestamp() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                131, this_._internal_xla_dump_include_timestamp(), target);
          }

          // int32 xla_dump_max_hlo_modules = 132;
          if (this_._internal_xla_dump_max_hlo_modules() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                132, this_._internal_xla_dump_max_hlo_modules(), target);
          }

          // bool xla_tpu_detect_nan = 135;
          if (this_._internal_xla_tpu_detect_nan() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                135, this_._internal_xla_tpu_detect_nan(), target);
          }

          // bool xla_tpu_detect_inf = 136;
          if (this_._internal_xla_tpu_detect_inf() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                136, this_._internal_xla_tpu_detect_inf(), target);
          }

          // bool xla_cpu_enable_xprof_traceme = 137;
          if (this_._internal_xla_cpu_enable_xprof_traceme() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                137, this_._internal_xla_cpu_enable_xprof_traceme(), target);
          }

          // bool xla_gpu_unsafe_fallback_to_driver_on_ptxas_not_found = 138;
          if (this_._internal_xla_gpu_unsafe_fallback_to_driver_on_ptxas_not_found() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                138, this_._internal_xla_gpu_unsafe_fallback_to_driver_on_ptxas_not_found(), target);
          }

          // bool xla_cpu_enable_fast_min_max = 140;
          if (this_._internal_xla_cpu_enable_fast_min_max() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                140, this_._internal_xla_cpu_enable_fast_min_max(), target);
          }

          // string xla_gpu_asm_extra_flags = 141;
          if (!this_._internal_xla_gpu_asm_extra_flags().empty()) {
            const std::string& _s = this_._internal_xla_gpu_asm_extra_flags();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xla.DebugOptions.xla_gpu_asm_extra_flags");
            target = stream->WriteStringMaybeAliased(141, _s, target);
          }

          // int32 xla_multiheap_size_constraint_per_heap = 142;
          if (this_._internal_xla_multiheap_size_constraint_per_heap() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                142, this_._internal_xla_multiheap_size_constraint_per_heap(), target);
          }

          // bool xla_dump_module_metadata = 144;
          if (this_._internal_xla_dump_module_metadata() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                144, this_._internal_xla_dump_module_metadata(), target);
          }

          // bool xla_gpu_force_conv_nhwc = 146;
          if (this_._internal_xla_gpu_force_conv_nhwc() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                146, this_._internal_xla_gpu_force_conv_nhwc(), target);
          }

          // int32 xla_gpu_force_compilation_parallelism = 147;
          if (this_._internal_xla_gpu_force_compilation_parallelism() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                147, this_._internal_xla_gpu_force_compilation_parallelism(), target);
          }

          // bool xla_gpu_deterministic_ops = 148;
          if (this_._internal_xla_gpu_deterministic_ops() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                148, this_._internal_xla_gpu_deterministic_ops(), target);
          }

          // bool xla_dump_fusion_visualization = 149;
          if (this_._internal_xla_dump_fusion_visualization() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                149, this_._internal_xla_dump_fusion_visualization(), target);
          }

          // repeated string xla_gpu_llvm_ir_file = 150;
          for (int i = 0, n = this_._internal_xla_gpu_llvm_ir_file_size(); i < n; ++i) {
            const auto& s = this_._internal_xla_gpu_llvm_ir_file().Get(i);
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xla.DebugOptions.xla_gpu_llvm_ir_file");
            target = stream->WriteString(150, s, target);
          }

          // bool xla_dump_compress_protos = 151;
          if (this_._internal_xla_dump_compress_protos() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                151, this_._internal_xla_dump_compress_protos(), target);
          }

          // bool xla_dump_disable_metadata = 153;
          if (this_._internal_xla_dump_disable_metadata() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                153, this_._internal_xla_dump_disable_metadata(), target);
          }

          // string xla_dump_hlo_pipeline_re = 154;
          if (!this_._internal_xla_dump_hlo_pipeline_re().empty()) {
            const std::string& _s = this_._internal_xla_dump_hlo_pipeline_re();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xla.DebugOptions.xla_dump_hlo_pipeline_re");
            target = stream->WriteStringMaybeAliased(154, _s, target);
          }

          // bool xla_gpu_dump_llvmir = 155;
          if (this_._internal_xla_gpu_dump_llvmir() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                155, this_._internal_xla_gpu_dump_llvmir(), target);
          }

          // bool xla_gpu_strict_conv_algorithm_picker = 156;
          if (this_._internal_xla_gpu_strict_conv_algorithm_picker() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                156, this_._internal_xla_gpu_strict_conv_algorithm_picker(), target);
          }

          // int64 xla_gpu_all_reduce_combine_threshold_bytes = 157;
          if (this_._internal_xla_gpu_all_reduce_combine_threshold_bytes() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt64ToArray(
                157, this_._internal_xla_gpu_all_reduce_combine_threshold_bytes(), target);
          }

          // int32 xla_gpu_all_reduce_blueconnect_num_devices_per_host = 159;
          if (this_._internal_xla_gpu_all_reduce_blueconnect_num_devices_per_host() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                159, this_._internal_xla_gpu_all_reduce_blueconnect_num_devices_per_host(), target);
          }

          // bool xla_gpu_enable_cudnn_frontend = 160;
          if (this_._internal_xla_gpu_enable_cudnn_frontend() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                160, this_._internal_xla_gpu_enable_cudnn_frontend(), target);
          }

          // int64 xla_gpu_nccl_termination_timeout_seconds = 163;
          if (this_._internal_xla_gpu_nccl_termination_timeout_seconds() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt64ToArray(
                163, this_._internal_xla_gpu_nccl_termination_timeout_seconds(), target);
          }

          // bool xla_dump_hlo_as_long_text = 164;
          if (this_._internal_xla_dump_hlo_as_long_text() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                164, this_._internal_xla_dump_hlo_as_long_text(), target);
          }

          // bool xla_gpu_enable_shared_constants = 165;
          if (this_._internal_xla_gpu_enable_shared_constants() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                165, this_._internal_xla_gpu_enable_shared_constants(), target);
          }

          // bool xla_gpu_enable_cublaslt = 166;
          if (this_._internal_xla_gpu_enable_cublaslt() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                166, this_._internal_xla_gpu_enable_cublaslt(), target);
          }

          // int64 xla_gpu_redzone_scratch_max_megabytes = 167;
          if (this_._internal_xla_gpu_redzone_scratch_max_megabytes() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt64ToArray(
                167, this_._internal_xla_gpu_redzone_scratch_max_megabytes(), target);
          }

          // .xla.DebugOptions.ShapeChecks xla_gpu_shape_checks = 170;
          if (this_._internal_xla_gpu_shape_checks() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                170, this_._internal_xla_gpu_shape_checks(), target);
          }

          // bool xla_cpu_use_acl = 174;
          if (this_._internal_xla_cpu_use_acl() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                174, this_._internal_xla_cpu_use_acl(), target);
          }

          // bool xla_cpu_strict_dot_conv_math = 175;
          if (this_._internal_xla_cpu_strict_dot_conv_math() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                175, this_._internal_xla_cpu_strict_dot_conv_math(), target);
          }

          // bool xla_gpu_use_runtime_fusion = 181;
          if (this_._internal_xla_gpu_use_runtime_fusion() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                181, this_._internal_xla_gpu_use_runtime_fusion(), target);
          }

          // bool xla_dump_latency_hiding_schedule = 182;
          if (this_._internal_xla_dump_latency_hiding_schedule() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                182, this_._internal_xla_dump_latency_hiding_schedule(), target);
          }

          // bool xla_cpu_enable_mlir_tiling_and_fusion = 184;
          if (this_._internal_xla_cpu_enable_mlir_tiling_and_fusion() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                184, this_._internal_xla_cpu_enable_mlir_tiling_and_fusion(), target);
          }

          // bool xla_dump_enable_mlir_pretty_form = 185;
          if (this_._internal_xla_dump_enable_mlir_pretty_form() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                185, this_._internal_xla_dump_enable_mlir_pretty_form(), target);
          }

          // bool xla_gpu_enable_latency_hiding_scheduler = 186;
          if (this_._internal_xla_gpu_enable_latency_hiding_scheduler() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                186, this_._internal_xla_gpu_enable_latency_hiding_scheduler(), target);
          }

          // .xla.DebugOptions.PartitioningAlgorithm xla_partitioning_algorithm = 187;
          if (this_._internal_xla_partitioning_algorithm() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                187, this_._internal_xla_partitioning_algorithm(), target);
          }

          // bool xla_gpu_enable_triton_gemm = 188;
          if (this_._internal_xla_gpu_enable_triton_gemm() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                188, this_._internal_xla_gpu_enable_triton_gemm(), target);
          }

          // bool xla_gpu_enable_cudnn_int8x32_convolution_reordering = 189;
          if (this_._internal_xla_gpu_enable_cudnn_int8x32_convolution_reordering() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                189, this_._internal_xla_gpu_enable_cudnn_int8x32_convolution_reordering(), target);
          }

          // bool xla_gpu_triton_gemm_any = 190;
          if (this_._internal_xla_gpu_triton_gemm_any() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                190, this_._internal_xla_gpu_triton_gemm_any(), target);
          }

          // bool xla_cpu_enable_experimental_deallocation = 191;
          if (this_._internal_xla_cpu_enable_experimental_deallocation() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                191, this_._internal_xla_cpu_enable_experimental_deallocation(), target);
          }

          // bool xla_cpu_enable_mlir_fusion_outlining = 192;
          if (this_._internal_xla_cpu_enable_mlir_fusion_outlining() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                192, this_._internal_xla_cpu_enable_mlir_fusion_outlining(), target);
          }

          // bool xla_cpu_enable_custom_matmul_tiling = 195;
          if (this_._internal_xla_cpu_enable_custom_matmul_tiling() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                195, this_._internal_xla_cpu_enable_custom_matmul_tiling(), target);
          }

          // int64 xla_cpu_matmul_tiling_m_dim = 196;
          if (this_._internal_xla_cpu_matmul_tiling_m_dim() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt64ToArray(
                196, this_._internal_xla_cpu_matmul_tiling_m_dim(), target);
          }

          // int64 xla_cpu_matmul_tiling_n_dim = 197;
          if (this_._internal_xla_cpu_matmul_tiling_n_dim() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt64ToArray(
                197, this_._internal_xla_cpu_matmul_tiling_n_dim(), target);
          }

          // int64 xla_cpu_matmul_tiling_k_dim = 198;
          if (this_._internal_xla_cpu_matmul_tiling_k_dim() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt64ToArray(
                198, this_._internal_xla_cpu_matmul_tiling_k_dim(), target);
          }

          // bool xla_gpu_enable_while_loop_reduce_scatter_code_motion = 203;
          if (this_._internal_xla_gpu_enable_while_loop_reduce_scatter_code_motion() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                203, this_._internal_xla_gpu_enable_while_loop_reduce_scatter_code_motion(), target);
          }

          // bool xla_gpu_lhs_enable_gpu_async_tracker = 204;
          if (this_._internal_xla_gpu_lhs_enable_gpu_async_tracker() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                204, this_._internal_xla_gpu_lhs_enable_gpu_async_tracker(), target);
          }

          // int32 xla_gpu_collective_inflation_factor = 205;
          if (this_._internal_xla_gpu_collective_inflation_factor() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                205, this_._internal_xla_gpu_collective_inflation_factor(), target);
          }

          // int32 xla_gpu_graph_min_graph_size = 208;
          if (this_._internal_xla_gpu_graph_min_graph_size() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                208, this_._internal_xla_gpu_graph_min_graph_size(), target);
          }

          // bool xla_gpu_enable_reassociation_for_converted_ar = 209;
          if (this_._internal_xla_gpu_enable_reassociation_for_converted_ar() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                209, this_._internal_xla_gpu_enable_reassociation_for_converted_ar(), target);
          }

          // string xla_gpu_pgle_profile_file_or_directory_path = 210;
          if (!this_._internal_xla_gpu_pgle_profile_file_or_directory_path().empty()) {
            const std::string& _s = this_._internal_xla_gpu_pgle_profile_file_or_directory_path();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xla.DebugOptions.xla_gpu_pgle_profile_file_or_directory_path");
            target = stream->WriteStringMaybeAliased(210, _s, target);
          }

          // int64 xla_gpu_all_gather_combine_threshold_bytes = 212;
          if (this_._internal_xla_gpu_all_gather_combine_threshold_bytes() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt64ToArray(
                212, this_._internal_xla_gpu_all_gather_combine_threshold_bytes(), target);
          }

          // int64 xla_gpu_reduce_scatter_combine_threshold_bytes = 213;
          if (this_._internal_xla_gpu_reduce_scatter_combine_threshold_bytes() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt64ToArray(
                213, this_._internal_xla_gpu_reduce_scatter_combine_threshold_bytes(), target);
          }

          // bool xla_gpu_graph_enable_concurrent_region = 215;
          if (this_._internal_xla_gpu_graph_enable_concurrent_region() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                215, this_._internal_xla_gpu_graph_enable_concurrent_region(), target);
          }

          // bool xla_gpu_enable_highest_priority_async_stream = 216;
          if (this_._internal_xla_gpu_enable_highest_priority_async_stream() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                216, this_._internal_xla_gpu_enable_highest_priority_async_stream(), target);
          }

          // bool xla_gpu_enable_pipelined_all_reduce = 217;
          if (this_._internal_xla_gpu_enable_pipelined_all_reduce() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                217, this_._internal_xla_gpu_enable_pipelined_all_reduce(), target);
          }

          // bool xla_gpu_enable_cudnn_fmha = 218;
          if (this_._internal_xla_gpu_enable_cudnn_fmha() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                218, this_._internal_xla_gpu_enable_cudnn_fmha(), target);
          }

          // bool xla_gpu_exhaustive_tiling_search = 219;
          if (this_._internal_xla_gpu_exhaustive_tiling_search() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                219, this_._internal_xla_gpu_exhaustive_tiling_search(), target);
          }

          // bool xla_gpu_enable_priority_fusion = 221;
          if (this_._internal_xla_gpu_enable_priority_fusion() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                221, this_._internal_xla_gpu_enable_priority_fusion(), target);
          }

          // string xla_gpu_dump_autotune_results_to = 222;
          if (!this_._internal_xla_gpu_dump_autotune_results_to().empty()) {
            const std::string& _s = this_._internal_xla_gpu_dump_autotune_results_to();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xla.DebugOptions.xla_gpu_dump_autotune_results_to");
            target = stream->WriteStringMaybeAliased(222, _s, target);
          }

          // string xla_gpu_load_autotune_results_from = 223;
          if (!this_._internal_xla_gpu_load_autotune_results_from().empty()) {
            const std::string& _s = this_._internal_xla_gpu_load_autotune_results_from();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xla.DebugOptions.xla_gpu_load_autotune_results_from");
            target = stream->WriteStringMaybeAliased(223, _s, target);
          }

          // int32 xla_gpu_auto_spmd_partitioning_memory_budget_gb = 224;
          if (this_._internal_xla_gpu_auto_spmd_partitioning_memory_budget_gb() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                224, this_._internal_xla_gpu_auto_spmd_partitioning_memory_budget_gb(), target);
          }

          // float xla_gpu_auto_spmd_partitioning_memory_budget_ratio = 225;
          if (::absl::bit_cast<::uint32_t>(this_._internal_xla_gpu_auto_spmd_partitioning_memory_budget_ratio()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                225, this_._internal_xla_gpu_auto_spmd_partitioning_memory_budget_ratio(), target);
          }

          // bool xla_gpu_triton_gemm_disable_reduced_precision_reduction = 226;
          if (this_._internal_xla_gpu_triton_gemm_disable_reduced_precision_reduction() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                226, this_._internal_xla_gpu_triton_gemm_disable_reduced_precision_reduction(), target);
          }

          // bool xla_gpu_enable_pipelined_all_gather = 227;
          if (this_._internal_xla_gpu_enable_pipelined_all_gather() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                227, this_._internal_xla_gpu_enable_pipelined_all_gather(), target);
          }

          // int64 xla_gpu_redzone_padding_bytes = 228;
          if (this_._internal_xla_gpu_redzone_padding_bytes() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt64ToArray(
                228, this_._internal_xla_gpu_redzone_padding_bytes(), target);
          }

          // int32 xla_gpu_triton_fusion_level = 229;
          if (this_._internal_xla_gpu_triton_fusion_level() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                229, this_._internal_xla_gpu_triton_fusion_level(), target);
          }

          // bool xla_gpu_enable_pipelined_reduce_scatter = 231;
          if (this_._internal_xla_gpu_enable_pipelined_reduce_scatter() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                231, this_._internal_xla_gpu_enable_pipelined_reduce_scatter(), target);
          }

          // bool xla_gpu_dump_autotuned_gemm_fusions = 232;
          if (this_._internal_xla_gpu_dump_autotuned_gemm_fusions() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                232, this_._internal_xla_gpu_dump_autotuned_gemm_fusions(), target);
          }

          // bool xla_gpu_fused_attention_use_cudnn_rng = 235;
          if (this_._internal_xla_gpu_fused_attention_use_cudnn_rng() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                235, this_._internal_xla_gpu_fused_attention_use_cudnn_rng(), target);
          }

          // bool xla_gpu_copy_insertion_use_region_analysis = 236;
          if (this_._internal_xla_gpu_copy_insertion_use_region_analysis() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                236, this_._internal_xla_gpu_copy_insertion_use_region_analysis(), target);
          }

          // int64 xla_gpu_collective_permute_decomposer_threshold = 237;
          if (this_._internal_xla_gpu_collective_permute_decomposer_threshold() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt64ToArray(
                237, this_._internal_xla_gpu_collective_permute_decomposer_threshold(), target);
          }

          // bool xla_gpu_enable_pipelined_collectives = 239;
          if (this_._internal_xla_gpu_enable_pipelined_collectives() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                239, this_._internal_xla_gpu_enable_pipelined_collectives(), target);
          }

          // bool xla_gpu_collect_cost_model_stats = 240;
          if (this_._internal_xla_gpu_collect_cost_model_stats() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                240, this_._internal_xla_gpu_collect_cost_model_stats(), target);
          }

          // bool xla_gpu_enable_split_k_autotuning = 241;
          if (this_._internal_xla_gpu_enable_split_k_autotuning() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                241, this_._internal_xla_gpu_enable_split_k_autotuning(), target);
          }

          // bool xla_gpu_enable_reduction_epilogue_fusion = 243;
          if (this_._internal_xla_gpu_enable_reduction_epilogue_fusion() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                243, this_._internal_xla_gpu_enable_reduction_epilogue_fusion(), target);
          }

          // bool xla_gpu_enable_nccl_clique_optimization = 244;
          if (this_._internal_xla_gpu_enable_nccl_clique_optimization() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                244, this_._internal_xla_gpu_enable_nccl_clique_optimization(), target);
          }

          // bool xla_gpu_mock_custom_calls = 245;
          if (this_._internal_xla_gpu_mock_custom_calls() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                245, this_._internal_xla_gpu_mock_custom_calls(), target);
          }

          // bool xla_gpu_enable_pipelined_p2p = 246;
          if (this_._internal_xla_gpu_enable_pipelined_p2p() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                246, this_._internal_xla_gpu_enable_pipelined_p2p(), target);
          }

          // bool xla_gpu_cublas_fallback = 247;
          if (this_._internal_xla_gpu_cublas_fallback() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                247, this_._internal_xla_gpu_cublas_fallback(), target);
          }

          // bool xla_gpu_enable_while_loop_double_buffering = 248;
          if (this_._internal_xla_gpu_enable_while_loop_double_buffering() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                248, this_._internal_xla_gpu_enable_while_loop_double_buffering(), target);
          }

          // bool xla_gpu_ensure_minor_dot_contraction_dims = 249;
          if (this_._internal_xla_gpu_ensure_minor_dot_contraction_dims() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                249, this_._internal_xla_gpu_ensure_minor_dot_contraction_dims(), target);
          }

          // bool xla_gpu_filter_kernels_spilling_registers_on_autotuning = 250;
          if (this_._internal_xla_gpu_filter_kernels_spilling_registers_on_autotuning() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                250, this_._internal_xla_gpu_filter_kernels_spilling_registers_on_autotuning(), target);
          }

          // int64 xla_debug_buffer_assignment_show_max = 251;
          if (this_._internal_xla_debug_buffer_assignment_show_max() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt64ToArray(
                251, this_._internal_xla_debug_buffer_assignment_show_max(), target);
          }

          // bool xla_detailed_logging = 252;
          if (this_._internal_xla_detailed_logging() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                252, this_._internal_xla_detailed_logging(), target);
          }

          // bool xla_enable_dumping = 253;
          if (this_._internal_xla_enable_dumping() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                253, this_._internal_xla_enable_dumping(), target);
          }

          // bool xla_gpu_enable_all_gather_combine_by_dim = 254;
          if (this_._internal_xla_gpu_enable_all_gather_combine_by_dim() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                254, this_._internal_xla_gpu_enable_all_gather_combine_by_dim(), target);
          }

          // bool xla_gpu_enable_analytical_latency_estimator = 255;
          if (this_._internal_xla_gpu_enable_analytical_latency_estimator() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                255, this_._internal_xla_gpu_enable_analytical_latency_estimator(), target);
          }

          // int32 xla_gpu_llvm_verification_level = 256;
          if (this_._internal_xla_gpu_llvm_verification_level() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                256, this_._internal_xla_gpu_llvm_verification_level(), target);
          }

          // bool xla_gpu_enable_reduce_scatter_combine_by_dim = 257;
          if (this_._internal_xla_gpu_enable_reduce_scatter_combine_by_dim() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                257, this_._internal_xla_gpu_enable_reduce_scatter_combine_by_dim(), target);
          }

          // repeated .xla.DebugOptions.CommandBufferCmdType xla_gpu_enable_command_buffer = 258;
          {
            std::size_t byte_size =
                                              this_._impl_._xla_gpu_enable_command_buffer_cached_byte_size_.Get();
            if (byte_size > 0) {
              target = stream->WriteEnumPacked(
                  258, this_._internal_xla_gpu_enable_command_buffer(), byte_size, target);
            }
          }

          // bool xla_gpu_enable_cub_radix_sort = 259;
          if (this_._internal_xla_gpu_enable_cub_radix_sort() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                259, this_._internal_xla_gpu_enable_cub_radix_sort(), target);
          }

          // int32 xla_gpu_memory_limit_slop_factor = 260;
          if (this_._internal_xla_gpu_memory_limit_slop_factor() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                260, this_._internal_xla_gpu_memory_limit_slop_factor(), target);
          }

          // string xla_gpu_target_config_filename = 261;
          if (!this_._internal_xla_gpu_target_config_filename().empty()) {
            const std::string& _s = this_._internal_xla_gpu_target_config_filename();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xla.DebugOptions.xla_gpu_target_config_filename");
            target = stream->WriteStringMaybeAliased(261, _s, target);
          }

          // bool xla_gpu_enable_cudnn_layer_norm = 262;
          if (this_._internal_xla_gpu_enable_cudnn_layer_norm() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                262, this_._internal_xla_gpu_enable_cudnn_layer_norm(), target);
          }

          // bool xla_gpu_enable_custom_fusions = 263;
          if (this_._internal_xla_gpu_enable_custom_fusions() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                263, this_._internal_xla_gpu_enable_custom_fusions(), target);
          }

          // string xla_gpu_enable_custom_fusions_re = 264;
          if (!this_._internal_xla_gpu_enable_custom_fusions_re().empty()) {
            const std::string& _s = this_._internal_xla_gpu_enable_custom_fusions_re();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xla.DebugOptions.xla_gpu_enable_custom_fusions_re");
            target = stream->WriteStringMaybeAliased(264, _s, target);
          }

          // int64 xla_gpu_threshold_for_windowed_einsum_mib = 265;
          if (this_._internal_xla_gpu_threshold_for_windowed_einsum_mib() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt64ToArray(
                265, this_._internal_xla_gpu_threshold_for_windowed_einsum_mib(), target);
          }

          // bool xla_gpu_enable_triton_hopper = 266;
          if (this_._internal_xla_gpu_enable_triton_hopper() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                266, this_._internal_xla_gpu_enable_triton_hopper(), target);
          }

          // bool xla_gpu_enable_nccl_user_buffers = 267;
          if (this_._internal_xla_gpu_enable_nccl_user_buffers() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                267, this_._internal_xla_gpu_enable_nccl_user_buffers(), target);
          }

          // bool xla_gpu_enable_llvm_module_compilation_parallelism = 268;
          if (this_._internal_xla_gpu_enable_llvm_module_compilation_parallelism() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                268, this_._internal_xla_gpu_enable_llvm_module_compilation_parallelism(), target);
          }

          // bool xla_gpu_enable_libnvptxcompiler = 269;
          if (this_._internal_xla_gpu_enable_libnvptxcompiler() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                269, this_._internal_xla_gpu_enable_libnvptxcompiler(), target);
          }

          // bool xla_gpu_enable_dot_strength_reduction = 270;
          if (this_._internal_xla_gpu_enable_dot_strength_reduction() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                270, this_._internal_xla_gpu_enable_dot_strength_reduction(), target);
          }

          // bool xla_gpu_enable_bf16_6way_gemm = 271;
          if (this_._internal_xla_gpu_enable_bf16_6way_gemm() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                271, this_._internal_xla_gpu_enable_bf16_6way_gemm(), target);
          }

          // bool xla_gpu_enable_nccl_comm_splitting = 272;
          if (this_._internal_xla_gpu_enable_nccl_comm_splitting() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                272, this_._internal_xla_gpu_enable_nccl_comm_splitting(), target);
          }

          // int64 xla_gpu_nccl_collective_max_nchannels = 273;
          if (this_._internal_xla_gpu_nccl_collective_max_nchannels() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt64ToArray(
                273, this_._internal_xla_gpu_nccl_collective_max_nchannels(), target);
          }

          // int64 xla_gpu_nccl_p2p_max_nchannels = 274;
          if (this_._internal_xla_gpu_nccl_p2p_max_nchannels() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt64ToArray(
                274, this_._internal_xla_gpu_nccl_p2p_max_nchannels(), target);
          }

          // bool xla_gpu_enable_nccl_per_stream_comms = 276;
          if (this_._internal_xla_gpu_enable_nccl_per_stream_comms() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                276, this_._internal_xla_gpu_enable_nccl_per_stream_comms(), target);
          }

          // bool xla_gpu_enable_bf16_3way_gemm = 279;
          if (this_._internal_xla_gpu_enable_bf16_3way_gemm() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                279, this_._internal_xla_gpu_enable_bf16_3way_gemm(), target);
          }

          // bool xla_gpu_multi_streamed_windowed_einsum = 280;
          if (this_._internal_xla_gpu_multi_streamed_windowed_einsum() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                280, this_._internal_xla_gpu_multi_streamed_windowed_einsum(), target);
          }

          // int64 xla_gpu_gemm_rewrite_size_threshold = 283;
          if (this_._internal_xla_gpu_gemm_rewrite_size_threshold() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt64ToArray(
                283, this_._internal_xla_gpu_gemm_rewrite_size_threshold(), target);
          }

          // bool xla_gpu_require_complete_aot_autotune_results = 284;
          if (this_._internal_xla_gpu_require_complete_aot_autotune_results() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                284, this_._internal_xla_gpu_require_complete_aot_autotune_results(), target);
          }

          // int32 xla_gpu_cudnn_gemm_fusion_level = 285;
          if (this_._internal_xla_gpu_cudnn_gemm_fusion_level() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                285, this_._internal_xla_gpu_cudnn_gemm_fusion_level(), target);
          }

          // bool xla_gpu_use_memcpy_local_p2p = 287;
          if (this_._internal_xla_gpu_use_memcpy_local_p2p() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                287, this_._internal_xla_gpu_use_memcpy_local_p2p(), target);
          }

          // int64 xla_gpu_autotune_max_solutions = 288;
          if (this_._internal_xla_gpu_autotune_max_solutions() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt64ToArray(
                288, this_._internal_xla_gpu_autotune_max_solutions(), target);
          }

          // repeated .xla.DebugOptions.CollectiveOpType xla_gpu_disable_async_collectives = 289;
          {
            std::size_t byte_size =
                                              this_._impl_._xla_gpu_disable_async_collectives_cached_byte_size_.Get();
            if (byte_size > 0) {
              target = stream->WriteEnumPacked(
                  289, this_._internal_xla_gpu_disable_async_collectives(), byte_size, target);
            }
          }

          // bool xla_dump_large_constants = 290;
          if (this_._internal_xla_dump_large_constants() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                290, this_._internal_xla_dump_large_constants(), target);
          }

          // bool xla_gpu_verify_triton_fusion_numerics = 291;
          if (this_._internal_xla_gpu_verify_triton_fusion_numerics() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                291, this_._internal_xla_gpu_verify_triton_fusion_numerics(), target);
          }

          // string xla_gpu_dump_autotune_logs_to = 292;
          if (!this_._internal_xla_gpu_dump_autotune_logs_to().empty()) {
            const std::string& _s = this_._internal_xla_gpu_dump_autotune_logs_to();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xla.DebugOptions.xla_gpu_dump_autotune_logs_to");
            target = stream->WriteStringMaybeAliased(292, _s, target);
          }

          // int64 xla_reduce_window_rewrite_base_length = 293;
          if (this_._internal_xla_reduce_window_rewrite_base_length() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt64ToArray(
                293, this_._internal_xla_reduce_window_rewrite_base_length(), target);
          }

          // .xla.DebugOptions.WhileLoopUnrolling xla_gpu_enable_while_loop_unrolling = 294;
          if (this_._internal_xla_gpu_enable_while_loop_unrolling() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                294, this_._internal_xla_gpu_enable_while_loop_unrolling(), target);
          }

          // string xla_gpu_override_gemm_autotuner = 295;
          if (!this_._internal_xla_gpu_override_gemm_autotuner().empty()) {
            const std::string& _s = this_._internal_xla_gpu_override_gemm_autotuner();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xla.DebugOptions.xla_gpu_override_gemm_autotuner");
            target = stream->WriteStringMaybeAliased(295, _s, target);
          }

          // bool xla_gpu_enable_host_memory_offloading = 296;
          if (this_._internal_xla_gpu_enable_host_memory_offloading() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                296, this_._internal_xla_gpu_enable_host_memory_offloading(), target);
          }

          // bool xla_gpu_exclude_nondeterministic_ops = 297;
          if (this_._internal_xla_gpu_exclude_nondeterministic_ops() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                297, this_._internal_xla_gpu_exclude_nondeterministic_ops(), target);
          }

          // bool xla_cpu_use_thunk_runtime = 298;
          if (this_._internal_xla_cpu_use_thunk_runtime() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                298, this_._internal_xla_cpu_use_thunk_runtime(), target);
          }

          // bool xla_llvm_force_inline_before_split = 300;
          if (this_._internal_xla_llvm_force_inline_before_split() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                300, this_._internal_xla_llvm_force_inline_before_split(), target);
          }

          // bool xla_gpu_nccl_terminate_on_error = 301;
          if (this_._internal_xla_gpu_nccl_terminate_on_error() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                301, this_._internal_xla_gpu_nccl_terminate_on_error(), target);
          }

          // int64 xla_gpu_mlir_emitter_level = 303;
          if (this_._internal_xla_gpu_mlir_emitter_level() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt64ToArray(
                303, this_._internal_xla_gpu_mlir_emitter_level(), target);
          }

          // bool xla_gpu_shard_autotuning = 304;
          if (this_._internal_xla_gpu_shard_autotuning() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                304, this_._internal_xla_gpu_shard_autotuning(), target);
          }

          // bool xla_gpu_enable_approx_costly_collectives = 305;
          if (this_._internal_xla_gpu_enable_approx_costly_collectives() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                305, this_._internal_xla_gpu_enable_approx_costly_collectives(), target);
          }

          // string xla_gpu_kernel_cache_file = 306;
          if (!this_._internal_xla_gpu_kernel_cache_file().empty()) {
            const std::string& _s = this_._internal_xla_gpu_kernel_cache_file();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xla.DebugOptions.xla_gpu_kernel_cache_file");
            target = stream->WriteStringMaybeAliased(306, _s, target);
          }

          // bool xla_cpu_enable_concurrency_optimized_scheduler = 307;
          if (this_._internal_xla_cpu_enable_concurrency_optimized_scheduler() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                307, this_._internal_xla_cpu_enable_concurrency_optimized_scheduler(), target);
          }

          // int32 xla_cpu_prefer_vector_width = 308;
          if (this_._internal_xla_cpu_prefer_vector_width() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                308, this_._internal_xla_cpu_prefer_vector_width(), target);
          }

          // bool xla_gpu_unsafe_pipelined_loop_annotator = 309;
          if (this_._internal_xla_gpu_unsafe_pipelined_loop_annotator() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                309, this_._internal_xla_gpu_unsafe_pipelined_loop_annotator(), target);
          }

          // string xla_gpu_per_fusion_autotune_cache_dir = 310;
          if (!this_._internal_xla_gpu_per_fusion_autotune_cache_dir().empty()) {
            const std::string& _s = this_._internal_xla_gpu_per_fusion_autotune_cache_dir();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xla.DebugOptions.xla_gpu_per_fusion_autotune_cache_dir");
            target = stream->WriteStringMaybeAliased(310, _s, target);
          }

          // int64 xla_cmd_buffer_trace_cache_size = 311;
          if (this_._internal_xla_cmd_buffer_trace_cache_size() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt64ToArray(
                311, this_._internal_xla_cmd_buffer_trace_cache_size(), target);
          }

          // bool xla_gpu_temp_buffer_use_separate_color = 312;
          if (this_._internal_xla_gpu_temp_buffer_use_separate_color() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                312, this_._internal_xla_gpu_temp_buffer_use_separate_color(), target);
          }

          // bool xla_gpu_run_post_layout_collective_pipeliner = 313;
          if (this_._internal_xla_gpu_run_post_layout_collective_pipeliner() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                313, this_._internal_xla_gpu_run_post_layout_collective_pipeliner(), target);
          }

          // repeated string legacy_command_buffer_custom_call_targets = 314;
          for (int i = 0, n = this_._internal_legacy_command_buffer_custom_call_targets_size(); i < n; ++i) {
            const auto& s = this_._internal_legacy_command_buffer_custom_call_targets().Get(i);
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xla.DebugOptions.legacy_command_buffer_custom_call_targets");
            target = stream->WriteString(314, s, target);
          }

          // bool xla_syntax_sugar_async_ops = 315;
          if (this_._internal_xla_syntax_sugar_async_ops() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                315, this_._internal_xla_syntax_sugar_async_ops(), target);
          }

          // float xla_gpu_autotune_gemm_rtol = 316;
          if (::absl::bit_cast<::uint32_t>(this_._internal_xla_gpu_autotune_gemm_rtol()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                316, this_._internal_xla_gpu_autotune_gemm_rtol(), target);
          }

          // bool xla_enable_command_buffers_during_profiling = 317;
          if (this_._internal_xla_enable_command_buffers_during_profiling() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                317, this_._internal_xla_enable_command_buffers_during_profiling(), target);
          }

          // int32 xla_gpu_cudnn_gemm_max_plans = 318;
          if (this_._internal_xla_gpu_cudnn_gemm_max_plans() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                318, this_._internal_xla_gpu_cudnn_gemm_max_plans(), target);
          }

          // bool xla_gpu_enable_libnvjitlink = 319;
          if (this_._internal_xla_gpu_enable_libnvjitlink() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                319, this_._internal_xla_gpu_enable_libnvjitlink(), target);
          }

          // bool xla_gpu_enable_triton_gemm_int4 = 320;
          if (this_._internal_xla_gpu_enable_triton_gemm_int4() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                320, this_._internal_xla_gpu_enable_triton_gemm_int4(), target);
          }

          // bool xla_gpu_async_dot = 321;
          if (this_._internal_xla_gpu_async_dot() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                321, this_._internal_xla_gpu_async_dot(), target);
          }

          // bool xla_gpu_unsupported_enable_triton_gemm = 322;
          if (this_._internal_xla_gpu_unsupported_enable_triton_gemm() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                322, this_._internal_xla_gpu_unsupported_enable_triton_gemm(), target);
          }

          // int32 xla_cpu_parallel_codegen_split_count = 323;
          if (this_._internal_xla_cpu_parallel_codegen_split_count() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                323, this_._internal_xla_cpu_parallel_codegen_split_count(), target);
          }

          // .xla.DebugOptions.AutotuneCacheMode xla_gpu_experimental_autotune_cache_mode = 324;
          if (this_._internal_xla_gpu_experimental_autotune_cache_mode() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                324, this_._internal_xla_gpu_experimental_autotune_cache_mode(), target);
          }

          // bool xla_gpu_experimental_enable_triton_softmax_priority_fusion = 325;
          if (this_._internal_xla_gpu_experimental_enable_triton_softmax_priority_fusion() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                325, this_._internal_xla_gpu_experimental_enable_triton_softmax_priority_fusion(), target);
          }

          // bool xla_gpu_enable_pgle_accuracy_checker = 326;
          if (this_._internal_xla_gpu_enable_pgle_accuracy_checker() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                326, this_._internal_xla_gpu_enable_pgle_accuracy_checker(), target);
          }

          // int32 xla_gpu_executable_warn_stuck_timeout_seconds = 327;
          if (this_._internal_xla_gpu_executable_warn_stuck_timeout_seconds() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                327, this_._internal_xla_gpu_executable_warn_stuck_timeout_seconds(), target);
          }

          // int32 xla_gpu_executable_terminate_timeout_seconds = 328;
          if (this_._internal_xla_gpu_executable_terminate_timeout_seconds() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                328, this_._internal_xla_gpu_executable_terminate_timeout_seconds(), target);
          }

          // bool xla_gpu_experimental_disable_binary_libraries = 329;
          if (this_._internal_xla_gpu_experimental_disable_binary_libraries() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                329, this_._internal_xla_gpu_experimental_disable_binary_libraries(), target);
          }

          // bool xla_experimental_ignore_channel_id = 330;
          if (this_._internal_xla_experimental_ignore_channel_id() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                330, this_._internal_xla_experimental_ignore_channel_id(), target);
          }

          // map<string, string> xla_backend_extra_options = 500;
          if (!this_._internal_xla_backend_extra_options().empty()) {
            using MapType = ::google::protobuf::Map<std::string, std::string>;
            using WireHelper = _pbi::MapEntryFuncs<std::string, std::string,
                                           _pbi::WireFormatLite::TYPE_STRING,
                                           _pbi::WireFormatLite::TYPE_STRING>;
            const auto& field = this_._internal_xla_backend_extra_options();

            if (stream->IsSerializationDeterministic() && field.size() > 1) {
              for (const auto& entry : ::google::protobuf::internal::MapSorterPtr<MapType>(field)) {
                target = WireHelper::InternalSerialize(
                    500, entry.first, entry.second, target, stream);
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xla.DebugOptions.xla_backend_extra_options");
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.second.data(), static_cast<int>(entry.second.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xla.DebugOptions.xla_backend_extra_options");
              }
            } else {
              for (const auto& entry : field) {
                target = WireHelper::InternalSerialize(
                    500, entry.first, entry.second, target, stream);
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xla.DebugOptions.xla_backend_extra_options");
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.second.data(), static_cast<int>(entry.second.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xla.DebugOptions.xla_backend_extra_options");
              }
            }
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:xla.DebugOptions)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t DebugOptions::ByteSizeLong(const MessageLite& base) {
          const DebugOptions& this_ = static_cast<const DebugOptions&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t DebugOptions::ByteSizeLong() const {
          const DebugOptions& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:xla.DebugOptions)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated string xla_disable_hlo_passes = 30;
            {
              total_size +=
                  2 * ::google::protobuf::internal::FromIntSize(this_._internal_xla_disable_hlo_passes().size());
              for (int i = 0, n = this_._internal_xla_disable_hlo_passes().size(); i < n; ++i) {
                total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
                    this_._internal_xla_disable_hlo_passes().Get(i));
              }
            }
            // repeated string xla_enable_hlo_passes_only = 124;
            {
              total_size +=
                  2 * ::google::protobuf::internal::FromIntSize(this_._internal_xla_enable_hlo_passes_only().size());
              for (int i = 0, n = this_._internal_xla_enable_hlo_passes_only().size(); i < n; ++i) {
                total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
                    this_._internal_xla_enable_hlo_passes_only().Get(i));
              }
            }
            // repeated string xla_gpu_ptx_file = 127;
            {
              total_size +=
                  2 * ::google::protobuf::internal::FromIntSize(this_._internal_xla_gpu_ptx_file().size());
              for (int i = 0, n = this_._internal_xla_gpu_ptx_file().size(); i < n; ++i) {
                total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
                    this_._internal_xla_gpu_ptx_file().Get(i));
              }
            }
            // repeated string xla_gpu_llvm_ir_file = 150;
            {
              total_size +=
                  2 * ::google::protobuf::internal::FromIntSize(this_._internal_xla_gpu_llvm_ir_file().size());
              for (int i = 0, n = this_._internal_xla_gpu_llvm_ir_file().size(); i < n; ++i) {
                total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
                    this_._internal_xla_gpu_llvm_ir_file().Get(i));
              }
            }
            // repeated .xla.DebugOptions.CommandBufferCmdType xla_gpu_enable_command_buffer = 258;
            {
              total_size += ::_pbi::WireFormatLite::EnumSizeWithPackedTagSize(
                  this_._internal_xla_gpu_enable_command_buffer(), 2, this_._impl_._xla_gpu_enable_command_buffer_cached_byte_size_);
            }
            // repeated .xla.DebugOptions.CollectiveOpType xla_gpu_disable_async_collectives = 289;
            {
              total_size += ::_pbi::WireFormatLite::EnumSizeWithPackedTagSize(
                  this_._internal_xla_gpu_disable_async_collectives(), 2, this_._impl_._xla_gpu_disable_async_collectives_cached_byte_size_);
            }
            // repeated string legacy_command_buffer_custom_call_targets = 314;
            {
              total_size +=
                  2 * ::google::protobuf::internal::FromIntSize(this_._internal_legacy_command_buffer_custom_call_targets().size());
              for (int i = 0, n = this_._internal_legacy_command_buffer_custom_call_targets().size(); i < n; ++i) {
                total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
                    this_._internal_legacy_command_buffer_custom_call_targets().Get(i));
              }
            }
            // map<string, string> xla_backend_extra_options = 500;
            {
              total_size +=
                  2 * ::google::protobuf::internal::FromIntSize(this_._internal_xla_backend_extra_options_size());
              for (const auto& entry : this_._internal_xla_backend_extra_options()) {
                total_size += _pbi::MapEntryFuncs<std::string, std::string,
                                               _pbi::WireFormatLite::TYPE_STRING,
                                               _pbi::WireFormatLite::TYPE_STRING>::ByteSizeLong(entry.first, entry.second);
              }
            }
          }
           {
            // string xla_gpu_cuda_data_dir = 61;
            if (!this_._internal_xla_gpu_cuda_data_dir().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_xla_gpu_cuda_data_dir());
            }
            // string xla_dump_to = 109;
            if (!this_._internal_xla_dump_to().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_xla_dump_to());
            }
            // string xla_dump_hlo_module_re = 110;
            if (!this_._internal_xla_dump_hlo_module_re().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_xla_dump_hlo_module_re());
            }
            // string xla_dump_hlo_pass_re = 111;
            if (!this_._internal_xla_dump_hlo_pass_re().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_xla_dump_hlo_pass_re());
            }
            // string xla_gpu_algorithm_denylist_path = 128;
            if (!this_._internal_xla_gpu_algorithm_denylist_path().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_xla_gpu_algorithm_denylist_path());
            }
            // string xla_gpu_asm_extra_flags = 141;
            if (!this_._internal_xla_gpu_asm_extra_flags().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_xla_gpu_asm_extra_flags());
            }
            // string xla_dump_hlo_pipeline_re = 154;
            if (!this_._internal_xla_dump_hlo_pipeline_re().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_xla_dump_hlo_pipeline_re());
            }
            // string xla_gpu_pgle_profile_file_or_directory_path = 210;
            if (!this_._internal_xla_gpu_pgle_profile_file_or_directory_path().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_xla_gpu_pgle_profile_file_or_directory_path());
            }
            // string xla_gpu_dump_autotune_results_to = 222;
            if (!this_._internal_xla_gpu_dump_autotune_results_to().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_xla_gpu_dump_autotune_results_to());
            }
            // string xla_gpu_load_autotune_results_from = 223;
            if (!this_._internal_xla_gpu_load_autotune_results_from().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_xla_gpu_load_autotune_results_from());
            }
            // string xla_gpu_target_config_filename = 261;
            if (!this_._internal_xla_gpu_target_config_filename().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_xla_gpu_target_config_filename());
            }
            // string xla_gpu_enable_custom_fusions_re = 264;
            if (!this_._internal_xla_gpu_enable_custom_fusions_re().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_xla_gpu_enable_custom_fusions_re());
            }
            // string xla_gpu_dump_autotune_logs_to = 292;
            if (!this_._internal_xla_gpu_dump_autotune_logs_to().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_xla_gpu_dump_autotune_logs_to());
            }
            // string xla_gpu_override_gemm_autotuner = 295;
            if (!this_._internal_xla_gpu_override_gemm_autotuner().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_xla_gpu_override_gemm_autotuner());
            }
            // string xla_gpu_kernel_cache_file = 306;
            if (!this_._internal_xla_gpu_kernel_cache_file().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_xla_gpu_kernel_cache_file());
            }
            // string xla_gpu_per_fusion_autotune_cache_dir = 310;
            if (!this_._internal_xla_gpu_per_fusion_autotune_cache_dir().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_xla_gpu_per_fusion_autotune_cache_dir());
            }
            // int32 xla_backend_optimization_level = 31;
            if (this_._internal_xla_backend_optimization_level() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_xla_backend_optimization_level());
            }
            // bool xla_hlo_profile = 9;
            if (this_._internal_xla_hlo_profile() != 0) {
              total_size += 2;
            }
            // bool xla_disable_all_hlo_passes = 104;
            if (this_._internal_xla_disable_all_hlo_passes() != 0) {
              total_size += 3;
            }
            // bool xla_embed_ir_in_executable = 33;
            if (this_._internal_xla_embed_ir_in_executable() != 0) {
              total_size += 3;
            }
            // bool xla_eliminate_hlo_implicit_broadcast = 35;
            if (this_._internal_xla_eliminate_hlo_implicit_broadcast() != 0) {
              total_size += 3;
            }
            // bool xla_cpu_multi_thread_eigen = 60;
            if (this_._internal_xla_cpu_multi_thread_eigen() != 0) {
              total_size += 3;
            }
            // bool xla_gpu_ftz = 62;
            if (this_._internal_xla_gpu_ftz() != 0) {
              total_size += 3;
            }
            // bool xla_llvm_enable_alias_scope_metadata = 70;
            if (this_._internal_xla_llvm_enable_alias_scope_metadata() != 0) {
              total_size += 3;
            }
            // bool xla_llvm_enable_noalias_metadata = 71;
            if (this_._internal_xla_llvm_enable_noalias_metadata() != 0) {
              total_size += 3;
            }
            // bool xla_llvm_enable_invariant_load_metadata = 72;
            if (this_._internal_xla_llvm_enable_invariant_load_metadata() != 0) {
              total_size += 3;
            }
            // bool xla_llvm_disable_expensive_passes = 73;
            if (this_._internal_xla_llvm_disable_expensive_passes() != 0) {
              total_size += 3;
            }
            // bool xla_test_all_output_layouts = 90;
            if (this_._internal_xla_test_all_output_layouts() != 0) {
              total_size += 3;
            }
            // bool xla_test_all_input_layouts = 91;
            if (this_._internal_xla_test_all_input_layouts() != 0) {
              total_size += 3;
            }
            // int32 xla_force_host_platform_device_count = 102;
            if (this_._internal_xla_force_host_platform_device_count() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_xla_force_host_platform_device_count());
            }
            // bool xla_hlo_graph_sharding_color = 92;
            if (this_._internal_xla_hlo_graph_sharding_color() != 0) {
              total_size += 3;
            }
            // bool xla_cpu_use_mkl_dnn = 97;
            if (this_._internal_xla_cpu_use_mkl_dnn() != 0) {
              total_size += 3;
            }
            // bool xla_gpu_enable_fast_min_max = 100;
            if (this_._internal_xla_gpu_enable_fast_min_max() != 0) {
              total_size += 3;
            }
            // bool xla_allow_excess_precision = 122;
            if (this_._internal_xla_allow_excess_precision() != 0) {
              total_size += 3;
            }
            // bool xla_gpu_crash_on_verification_failures = 101;
            if (this_._internal_xla_gpu_crash_on_verification_failures() != 0) {
              total_size += 3;
            }
            // bool xla_gpu_disable_gpuasm_optimizations = 103;
            if (this_._internal_xla_gpu_disable_gpuasm_optimizations() != 0) {
              total_size += 3;
            }
            // bool xla_hlo_evaluator_use_fast_path = 106;
            if (this_._internal_xla_hlo_evaluator_use_fast_path() != 0) {
              total_size += 3;
            }
            // bool xla_allow_scalar_index_dynamic_ops = 107;
            if (this_._internal_xla_allow_scalar_index_dynamic_ops() != 0) {
              total_size += 3;
            }
            // .xla.DebugOptions.StepMarkerLocation xla_step_marker_location = 108;
            if (this_._internal_xla_step_marker_location() != 0) {
              total_size += 2 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_xla_step_marker_location());
            }
            // bool xla_dump_hlo_as_text = 112;
            if (this_._internal_xla_dump_hlo_as_text() != 0) {
              total_size += 3;
            }
            // bool xla_dump_hlo_as_proto = 113;
            if (this_._internal_xla_dump_hlo_as_proto() != 0) {
              total_size += 3;
            }
            // bool xla_dump_hlo_as_dot = 114;
            if (this_._internal_xla_dump_hlo_as_dot() != 0) {
              total_size += 3;
            }
            // bool xla_dump_hlo_as_url = 115;
            if (this_._internal_xla_dump_hlo_as_url() != 0) {
              total_size += 3;
            }
            // int32 xla_gpu_autotune_level = 123;
            if (this_._internal_xla_gpu_autotune_level() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_xla_gpu_autotune_level());
            }
            // bool xla_dump_hlo_as_html = 116;
            if (this_._internal_xla_dump_hlo_as_html() != 0) {
              total_size += 3;
            }
            // bool xla_dump_fusion_visualization = 149;
            if (this_._internal_xla_dump_fusion_visualization() != 0) {
              total_size += 3;
            }
            // bool xla_dump_hlo_snapshots = 118;
            if (this_._internal_xla_dump_hlo_snapshots() != 0) {
              total_size += 3;
            }
            // bool xla_dump_include_timestamp = 131;
            if (this_._internal_xla_dump_include_timestamp() != 0) {
              total_size += 3;
            }
            // int32 xla_dump_max_hlo_modules = 132;
            if (this_._internal_xla_dump_max_hlo_modules() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_xla_dump_max_hlo_modules());
            }
            // int32 xla_multiheap_size_constraint_per_heap = 142;
            if (this_._internal_xla_multiheap_size_constraint_per_heap() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_xla_multiheap_size_constraint_per_heap());
            }
            // bool xla_dump_module_metadata = 144;
            if (this_._internal_xla_dump_module_metadata() != 0) {
              total_size += 3;
            }
            // bool xla_dump_compress_protos = 151;
            if (this_._internal_xla_dump_compress_protos() != 0) {
              total_size += 3;
            }
            // bool xla_dump_hlo_as_long_text = 164;
            if (this_._internal_xla_dump_hlo_as_long_text() != 0) {
              total_size += 3;
            }
            // bool xla_gpu_force_conv_nchw = 125;
            if (this_._internal_xla_gpu_force_conv_nchw() != 0) {
              total_size += 3;
            }
            // int32 xla_gpu_force_compilation_parallelism = 147;
            if (this_._internal_xla_gpu_force_compilation_parallelism() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_xla_gpu_force_compilation_parallelism());
            }
            // bool xla_gpu_force_conv_nhwc = 146;
            if (this_._internal_xla_gpu_force_conv_nhwc() != 0) {
              total_size += 3;
            }
            // bool xla_gpu_dump_llvmir = 155;
            if (this_._internal_xla_gpu_dump_llvmir() != 0) {
              total_size += 3;
            }
            // bool xla_dump_enable_mlir_pretty_form = 185;
            if (this_._internal_xla_dump_enable_mlir_pretty_form() != 0) {
              total_size += 3;
            }
            // bool xla_tpu_detect_nan = 135;
            if (this_._internal_xla_tpu_detect_nan() != 0) {
              total_size += 3;
            }
            // int64 xla_gpu_all_reduce_combine_threshold_bytes = 157;
            if (this_._internal_xla_gpu_all_reduce_combine_threshold_bytes() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int64Size(
                                              this_._internal_xla_gpu_all_reduce_combine_threshold_bytes());
            }
            // int64 xla_gpu_nccl_termination_timeout_seconds = 163;
            if (this_._internal_xla_gpu_nccl_termination_timeout_seconds() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int64Size(
                                              this_._internal_xla_gpu_nccl_termination_timeout_seconds());
            }
            // int32 xla_gpu_all_reduce_blueconnect_num_devices_per_host = 159;
            if (this_._internal_xla_gpu_all_reduce_blueconnect_num_devices_per_host() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_xla_gpu_all_reduce_blueconnect_num_devices_per_host());
            }
            // bool xla_tpu_detect_inf = 136;
            if (this_._internal_xla_tpu_detect_inf() != 0) {
              total_size += 3;
            }
            // bool xla_cpu_enable_xprof_traceme = 137;
            if (this_._internal_xla_cpu_enable_xprof_traceme() != 0) {
              total_size += 3;
            }
            // bool xla_gpu_unsafe_fallback_to_driver_on_ptxas_not_found = 138;
            if (this_._internal_xla_gpu_unsafe_fallback_to_driver_on_ptxas_not_found() != 0) {
              total_size += 3;
            }
            // bool xla_detailed_logging = 252;
            if (this_._internal_xla_detailed_logging() != 0) {
              total_size += 3;
            }
            // int64 xla_gpu_redzone_scratch_max_megabytes = 167;
            if (this_._internal_xla_gpu_redzone_scratch_max_megabytes() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int64Size(
                                              this_._internal_xla_gpu_redzone_scratch_max_megabytes());
            }
            // bool xla_cpu_fast_math_honor_functions = 129;
            if (this_._internal_xla_cpu_fast_math_honor_functions() != 0) {
              total_size += 3;
            }
            // bool xla_cpu_fast_math_honor_infs = 121;
            if (this_._internal_xla_cpu_fast_math_honor_infs() != 0) {
              total_size += 3;
            }
            // bool xla_cpu_fast_math_honor_nans = 120;
            if (this_._internal_xla_cpu_fast_math_honor_nans() != 0) {
              total_size += 3;
            }
            // bool xla_cpu_use_thunk_runtime = 298;
            if (this_._internal_xla_cpu_use_thunk_runtime() != 0) {
              total_size += 3;
            }
            // bool xla_cpu_enable_concurrency_optimized_scheduler = 307;
            if (this_._internal_xla_cpu_enable_concurrency_optimized_scheduler() != 0) {
              total_size += 3;
            }
            // bool xla_cpu_enable_fast_math = 99;
            if (this_._internal_xla_cpu_enable_fast_math() != 0) {
              total_size += 3;
            }
            // bool xla_cpu_enable_fast_min_max = 140;
            if (this_._internal_xla_cpu_enable_fast_min_max() != 0) {
              total_size += 3;
            }
            // bool xla_cpu_fast_math_honor_division = 126;
            if (this_._internal_xla_cpu_fast_math_honor_division() != 0) {
              total_size += 3;
            }
            // bool xla_dump_disable_metadata = 153;
            if (this_._internal_xla_dump_disable_metadata() != 0) {
              total_size += 3;
            }
            // bool xla_gpu_strict_conv_algorithm_picker = 156;
            if (this_._internal_xla_gpu_strict_conv_algorithm_picker() != 0) {
              total_size += 3;
            }
            // bool xla_gpu_enable_custom_fusions = 263;
            if (this_._internal_xla_gpu_enable_custom_fusions() != 0) {
              total_size += 3;
            }
            // bool xla_gpu_enable_dynamic_slice_fusion = 105;
            if (this_._internal_xla_gpu_enable_dynamic_slice_fusion() != 0) {
              total_size += 3;
            }
            // .xla.DebugOptions.ShapeChecks xla_gpu_shape_checks = 170;
            if (this_._internal_xla_gpu_shape_checks() != 0) {
              total_size += 2 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_xla_gpu_shape_checks());
            }
            // bool xla_gpu_enable_shared_constants = 165;
            if (this_._internal_xla_gpu_enable_shared_constants() != 0) {
              total_size += 3;
            }
            // bool xla_gpu_enable_cublaslt = 166;
            if (this_._internal_xla_gpu_enable_cublaslt() != 0) {
              total_size += 3;
            }
            // bool xla_gpu_graph_enable_concurrent_region = 215;
            if (this_._internal_xla_gpu_graph_enable_concurrent_region() != 0) {
              total_size += 3;
            }
            // bool xla_cpu_use_acl = 174;
            if (this_._internal_xla_cpu_use_acl() != 0) {
              total_size += 3;
            }
            // bool xla_cpu_strict_dot_conv_math = 175;
            if (this_._internal_xla_cpu_strict_dot_conv_math() != 0) {
              total_size += 3;
            }
            // bool xla_gpu_use_runtime_fusion = 181;
            if (this_._internal_xla_gpu_use_runtime_fusion() != 0) {
              total_size += 3;
            }
            // bool xla_dump_latency_hiding_schedule = 182;
            if (this_._internal_xla_dump_latency_hiding_schedule() != 0) {
              total_size += 3;
            }
            // bool xla_cpu_enable_mlir_tiling_and_fusion = 184;
            if (this_._internal_xla_cpu_enable_mlir_tiling_and_fusion() != 0) {
              total_size += 3;
            }
            // .xla.DebugOptions.PartitioningAlgorithm xla_partitioning_algorithm = 187;
            if (this_._internal_xla_partitioning_algorithm() != 0) {
              total_size += 2 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_xla_partitioning_algorithm());
            }
            // bool xla_cpu_enable_custom_matmul_tiling = 195;
            if (this_._internal_xla_cpu_enable_custom_matmul_tiling() != 0) {
              total_size += 3;
            }
            // bool xla_cpu_enable_mlir_fusion_outlining = 192;
            if (this_._internal_xla_cpu_enable_mlir_fusion_outlining() != 0) {
              total_size += 3;
            }
            // bool xla_cpu_enable_experimental_deallocation = 191;
            if (this_._internal_xla_cpu_enable_experimental_deallocation() != 0) {
              total_size += 3;
            }
            // bool xla_gpu_enable_latency_hiding_scheduler = 186;
            if (this_._internal_xla_gpu_enable_latency_hiding_scheduler() != 0) {
              total_size += 3;
            }
            // int64 xla_cpu_matmul_tiling_m_dim = 196;
            if (this_._internal_xla_cpu_matmul_tiling_m_dim() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int64Size(
                                              this_._internal_xla_cpu_matmul_tiling_m_dim());
            }
            // int64 xla_cpu_matmul_tiling_n_dim = 197;
            if (this_._internal_xla_cpu_matmul_tiling_n_dim() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int64Size(
                                              this_._internal_xla_cpu_matmul_tiling_n_dim());
            }
            // int64 xla_cpu_matmul_tiling_k_dim = 198;
            if (this_._internal_xla_cpu_matmul_tiling_k_dim() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int64Size(
                                              this_._internal_xla_cpu_matmul_tiling_k_dim());
            }
            // int32 xla_gpu_collective_inflation_factor = 205;
            if (this_._internal_xla_gpu_collective_inflation_factor() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_xla_gpu_collective_inflation_factor());
            }
            // int32 xla_gpu_graph_min_graph_size = 208;
            if (this_._internal_xla_gpu_graph_min_graph_size() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_xla_gpu_graph_min_graph_size());
            }
            // int64 xla_gpu_all_gather_combine_threshold_bytes = 212;
            if (this_._internal_xla_gpu_all_gather_combine_threshold_bytes() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int64Size(
                                              this_._internal_xla_gpu_all_gather_combine_threshold_bytes());
            }
            // int64 xla_gpu_reduce_scatter_combine_threshold_bytes = 213;
            if (this_._internal_xla_gpu_reduce_scatter_combine_threshold_bytes() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int64Size(
                                              this_._internal_xla_gpu_reduce_scatter_combine_threshold_bytes());
            }
            // bool xla_gpu_enable_cudnn_frontend = 160;
            if (this_._internal_xla_gpu_enable_cudnn_frontend() != 0) {
              total_size += 3;
            }
            // bool xla_gpu_enable_cudnn_fmha = 218;
            if (this_._internal_xla_gpu_enable_cudnn_fmha() != 0) {
              total_size += 3;
            }
            // bool xla_gpu_fused_attention_use_cudnn_rng = 235;
            if (this_._internal_xla_gpu_fused_attention_use_cudnn_rng() != 0) {
              total_size += 3;
            }
            // bool xla_gpu_enable_cudnn_layer_norm = 262;
            if (this_._internal_xla_gpu_enable_cudnn_layer_norm() != 0) {
              total_size += 3;
            }
            // bool xla_gpu_run_post_layout_collective_pipeliner = 313;
            if (this_._internal_xla_gpu_run_post_layout_collective_pipeliner() != 0) {
              total_size += 3;
            }
            // bool xla_gpu_enable_triton_gemm = 188;
            if (this_._internal_xla_gpu_enable_triton_gemm() != 0) {
              total_size += 3;
            }
            // bool xla_gpu_enable_cudnn_int8x32_convolution_reordering = 189;
            if (this_._internal_xla_gpu_enable_cudnn_int8x32_convolution_reordering() != 0) {
              total_size += 3;
            }
            // bool xla_gpu_triton_gemm_any = 190;
            if (this_._internal_xla_gpu_triton_gemm_any() != 0) {
              total_size += 3;
            }
            // int32 xla_gpu_auto_spmd_partitioning_memory_budget_gb = 224;
            if (this_._internal_xla_gpu_auto_spmd_partitioning_memory_budget_gb() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_xla_gpu_auto_spmd_partitioning_memory_budget_gb());
            }
            // bool xla_gpu_exhaustive_tiling_search = 219;
            if (this_._internal_xla_gpu_exhaustive_tiling_search() != 0) {
              total_size += 3;
            }
            // bool xla_gpu_enable_priority_fusion = 221;
            if (this_._internal_xla_gpu_enable_priority_fusion() != 0) {
              total_size += 3;
            }
            // bool xla_gpu_triton_gemm_disable_reduced_precision_reduction = 226;
            if (this_._internal_xla_gpu_triton_gemm_disable_reduced_precision_reduction() != 0) {
              total_size += 3;
            }
            // bool xla_gpu_dump_autotuned_gemm_fusions = 232;
            if (this_._internal_xla_gpu_dump_autotuned_gemm_fusions() != 0) {
              total_size += 3;
            }
            // float xla_gpu_auto_spmd_partitioning_memory_budget_ratio = 225;
            if (::absl::bit_cast<::uint32_t>(this_._internal_xla_gpu_auto_spmd_partitioning_memory_budget_ratio()) != 0) {
              total_size += 6;
            }
            // bool xla_gpu_enable_highest_priority_async_stream = 216;
            if (this_._internal_xla_gpu_enable_highest_priority_async_stream() != 0) {
              total_size += 3;
            }
            // bool xla_gpu_enable_analytical_latency_estimator = 255;
            if (this_._internal_xla_gpu_enable_analytical_latency_estimator() != 0) {
              total_size += 3;
            }
            // bool xla_gpu_lhs_enable_gpu_async_tracker = 204;
            if (this_._internal_xla_gpu_lhs_enable_gpu_async_tracker() != 0) {
              total_size += 3;
            }
            // bool xla_gpu_enable_pipelined_collectives = 239;
            if (this_._internal_xla_gpu_enable_pipelined_collectives() != 0) {
              total_size += 3;
            }
            // int64 xla_gpu_redzone_padding_bytes = 228;
            if (this_._internal_xla_gpu_redzone_padding_bytes() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int64Size(
                                              this_._internal_xla_gpu_redzone_padding_bytes());
            }
            // int32 xla_gpu_triton_fusion_level = 229;
            if (this_._internal_xla_gpu_triton_fusion_level() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_xla_gpu_triton_fusion_level());
            }
            // bool xla_gpu_enable_pipelined_all_reduce = 217;
            if (this_._internal_xla_gpu_enable_pipelined_all_reduce() != 0) {
              total_size += 3;
            }
            // bool xla_gpu_enable_pipelined_all_gather = 227;
            if (this_._internal_xla_gpu_enable_pipelined_all_gather() != 0) {
              total_size += 3;
            }
            // bool xla_gpu_enable_pipelined_reduce_scatter = 231;
            if (this_._internal_xla_gpu_enable_pipelined_reduce_scatter() != 0) {
              total_size += 3;
            }
            // bool xla_gpu_enable_pipelined_p2p = 246;
            if (this_._internal_xla_gpu_enable_pipelined_p2p() != 0) {
              total_size += 3;
            }
            // bool xla_enable_dumping = 253;
            if (this_._internal_xla_enable_dumping() != 0) {
              total_size += 3;
            }
            // bool xla_gpu_enable_llvm_module_compilation_parallelism = 268;
            if (this_._internal_xla_gpu_enable_llvm_module_compilation_parallelism() != 0) {
              total_size += 3;
            }
            // bool xla_gpu_deterministic_ops = 148;
            if (this_._internal_xla_gpu_deterministic_ops() != 0) {
              total_size += 3;
            }
            // bool xla_gpu_enable_all_gather_combine_by_dim = 254;
            if (this_._internal_xla_gpu_enable_all_gather_combine_by_dim() != 0) {
              total_size += 3;
            }
            // bool xla_gpu_copy_insertion_use_region_analysis = 236;
            if (this_._internal_xla_gpu_copy_insertion_use_region_analysis() != 0) {
              total_size += 3;
            }
            // bool xla_gpu_collect_cost_model_stats = 240;
            if (this_._internal_xla_gpu_collect_cost_model_stats() != 0) {
              total_size += 3;
            }
            // bool xla_gpu_enable_split_k_autotuning = 241;
            if (this_._internal_xla_gpu_enable_split_k_autotuning() != 0) {
              total_size += 3;
            }
            // bool xla_gpu_enable_reduction_epilogue_fusion = 243;
            if (this_._internal_xla_gpu_enable_reduction_epilogue_fusion() != 0) {
              total_size += 3;
            }
            // int64 xla_gpu_collective_permute_decomposer_threshold = 237;
            if (this_._internal_xla_gpu_collective_permute_decomposer_threshold() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int64Size(
                                              this_._internal_xla_gpu_collective_permute_decomposer_threshold());
            }
            // bool xla_gpu_enable_reduce_scatter_combine_by_dim = 257;
            if (this_._internal_xla_gpu_enable_reduce_scatter_combine_by_dim() != 0) {
              total_size += 3;
            }
            // bool xla_gpu_enable_reassociation_for_converted_ar = 209;
            if (this_._internal_xla_gpu_enable_reassociation_for_converted_ar() != 0) {
              total_size += 3;
            }
            // bool xla_gpu_enable_while_loop_reduce_scatter_code_motion = 203;
            if (this_._internal_xla_gpu_enable_while_loop_reduce_scatter_code_motion() != 0) {
              total_size += 3;
            }
            // bool xla_llvm_force_inline_before_split = 300;
            if (this_._internal_xla_llvm_force_inline_before_split() != 0) {
              total_size += 3;
            }
            // bool xla_gpu_experimental_disable_binary_libraries = 329;
            if (this_._internal_xla_gpu_experimental_disable_binary_libraries() != 0) {
              total_size += 3;
            }
            // bool xla_gpu_experimental_enable_triton_softmax_priority_fusion = 325;
            if (this_._internal_xla_gpu_experimental_enable_triton_softmax_priority_fusion() != 0) {
              total_size += 3;
            }
            // bool xla_gpu_unsupported_enable_triton_gemm = 322;
            if (this_._internal_xla_gpu_unsupported_enable_triton_gemm() != 0) {
              total_size += 3;
            }
            // bool xla_hlo_graph_addresses = 2;
            if (this_._internal_xla_hlo_graph_addresses() != 0) {
              total_size += 2;
            }
            // bool xla_gpu_enable_nccl_clique_optimization = 244;
            if (this_._internal_xla_gpu_enable_nccl_clique_optimization() != 0) {
              total_size += 3;
            }
            // bool xla_gpu_mock_custom_calls = 245;
            if (this_._internal_xla_gpu_mock_custom_calls() != 0) {
              total_size += 3;
            }
            // bool xla_gpu_cublas_fallback = 247;
            if (this_._internal_xla_gpu_cublas_fallback() != 0) {
              total_size += 3;
            }
            // bool xla_gpu_enable_while_loop_double_buffering = 248;
            if (this_._internal_xla_gpu_enable_while_loop_double_buffering() != 0) {
              total_size += 3;
            }
            // int32 xla_gpu_llvm_verification_level = 256;
            if (this_._internal_xla_gpu_llvm_verification_level() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_xla_gpu_llvm_verification_level());
            }
            // int64 xla_debug_buffer_assignment_show_max = 251;
            if (this_._internal_xla_debug_buffer_assignment_show_max() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int64Size(
                                              this_._internal_xla_debug_buffer_assignment_show_max());
            }
            // bool xla_gpu_ensure_minor_dot_contraction_dims = 249;
            if (this_._internal_xla_gpu_ensure_minor_dot_contraction_dims() != 0) {
              total_size += 3;
            }
            // bool xla_gpu_filter_kernels_spilling_registers_on_autotuning = 250;
            if (this_._internal_xla_gpu_filter_kernels_spilling_registers_on_autotuning() != 0) {
              total_size += 3;
            }
            // bool xla_gpu_enable_cub_radix_sort = 259;
            if (this_._internal_xla_gpu_enable_cub_radix_sort() != 0) {
              total_size += 3;
            }
            // bool xla_gpu_enable_triton_hopper = 266;
            if (this_._internal_xla_gpu_enable_triton_hopper() != 0) {
              total_size += 3;
            }
            // int32 xla_gpu_memory_limit_slop_factor = 260;
            if (this_._internal_xla_gpu_memory_limit_slop_factor() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_xla_gpu_memory_limit_slop_factor());
            }
            // int64 xla_gpu_threshold_for_windowed_einsum_mib = 265;
            if (this_._internal_xla_gpu_threshold_for_windowed_einsum_mib() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int64Size(
                                              this_._internal_xla_gpu_threshold_for_windowed_einsum_mib());
            }
            // int64 xla_gpu_nccl_collective_max_nchannels = 273;
            if (this_._internal_xla_gpu_nccl_collective_max_nchannels() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int64Size(
                                              this_._internal_xla_gpu_nccl_collective_max_nchannels());
            }
            // bool xla_gpu_enable_nccl_user_buffers = 267;
            if (this_._internal_xla_gpu_enable_nccl_user_buffers() != 0) {
              total_size += 3;
            }
            // bool xla_gpu_enable_nccl_comm_splitting = 272;
            if (this_._internal_xla_gpu_enable_nccl_comm_splitting() != 0) {
              total_size += 3;
            }
            // bool xla_gpu_enable_nccl_per_stream_comms = 276;
            if (this_._internal_xla_gpu_enable_nccl_per_stream_comms() != 0) {
              total_size += 3;
            }
            // bool xla_gpu_enable_libnvptxcompiler = 269;
            if (this_._internal_xla_gpu_enable_libnvptxcompiler() != 0) {
              total_size += 3;
            }
            // bool xla_gpu_enable_dot_strength_reduction = 270;
            if (this_._internal_xla_gpu_enable_dot_strength_reduction() != 0) {
              total_size += 3;
            }
            // bool xla_gpu_multi_streamed_windowed_einsum = 280;
            if (this_._internal_xla_gpu_multi_streamed_windowed_einsum() != 0) {
              total_size += 3;
            }
            // bool xla_gpu_enable_bf16_6way_gemm = 271;
            if (this_._internal_xla_gpu_enable_bf16_6way_gemm() != 0) {
              total_size += 3;
            }
            // bool xla_gpu_enable_bf16_3way_gemm = 279;
            if (this_._internal_xla_gpu_enable_bf16_3way_gemm() != 0) {
              total_size += 3;
            }
            // int64 xla_gpu_nccl_p2p_max_nchannels = 274;
            if (this_._internal_xla_gpu_nccl_p2p_max_nchannels() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int64Size(
                                              this_._internal_xla_gpu_nccl_p2p_max_nchannels());
            }
            // int64 xla_gpu_gemm_rewrite_size_threshold = 283;
            if (this_._internal_xla_gpu_gemm_rewrite_size_threshold() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int64Size(
                                              this_._internal_xla_gpu_gemm_rewrite_size_threshold());
            }
            // int32 xla_gpu_cudnn_gemm_fusion_level = 285;
            if (this_._internal_xla_gpu_cudnn_gemm_fusion_level() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_xla_gpu_cudnn_gemm_fusion_level());
            }
            // bool xla_gpu_require_complete_aot_autotune_results = 284;
            if (this_._internal_xla_gpu_require_complete_aot_autotune_results() != 0) {
              total_size += 3;
            }
            // bool xla_gpu_use_memcpy_local_p2p = 287;
            if (this_._internal_xla_gpu_use_memcpy_local_p2p() != 0) {
              total_size += 3;
            }
            // bool xla_dump_large_constants = 290;
            if (this_._internal_xla_dump_large_constants() != 0) {
              total_size += 3;
            }
            // bool xla_gpu_verify_triton_fusion_numerics = 291;
            if (this_._internal_xla_gpu_verify_triton_fusion_numerics() != 0) {
              total_size += 3;
            }
            // int64 xla_gpu_autotune_max_solutions = 288;
            if (this_._internal_xla_gpu_autotune_max_solutions() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int64Size(
                                              this_._internal_xla_gpu_autotune_max_solutions());
            }
            // int64 xla_reduce_window_rewrite_base_length = 293;
            if (this_._internal_xla_reduce_window_rewrite_base_length() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int64Size(
                                              this_._internal_xla_reduce_window_rewrite_base_length());
            }
            // .xla.DebugOptions.WhileLoopUnrolling xla_gpu_enable_while_loop_unrolling = 294;
            if (this_._internal_xla_gpu_enable_while_loop_unrolling() != 0) {
              total_size += 2 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_xla_gpu_enable_while_loop_unrolling());
            }
            // bool xla_gpu_enable_host_memory_offloading = 296;
            if (this_._internal_xla_gpu_enable_host_memory_offloading() != 0) {
              total_size += 3;
            }
            // bool xla_gpu_exclude_nondeterministic_ops = 297;
            if (this_._internal_xla_gpu_exclude_nondeterministic_ops() != 0) {
              total_size += 3;
            }
            // bool xla_gpu_nccl_terminate_on_error = 301;
            if (this_._internal_xla_gpu_nccl_terminate_on_error() != 0) {
              total_size += 3;
            }
            // bool xla_gpu_shard_autotuning = 304;
            if (this_._internal_xla_gpu_shard_autotuning() != 0) {
              total_size += 3;
            }
            // int64 xla_gpu_mlir_emitter_level = 303;
            if (this_._internal_xla_gpu_mlir_emitter_level() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int64Size(
                                              this_._internal_xla_gpu_mlir_emitter_level());
            }
            // int32 xla_cpu_prefer_vector_width = 308;
            if (this_._internal_xla_cpu_prefer_vector_width() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_xla_cpu_prefer_vector_width());
            }
            // bool xla_gpu_enable_approx_costly_collectives = 305;
            if (this_._internal_xla_gpu_enable_approx_costly_collectives() != 0) {
              total_size += 3;
            }
            // bool xla_gpu_unsafe_pipelined_loop_annotator = 309;
            if (this_._internal_xla_gpu_unsafe_pipelined_loop_annotator() != 0) {
              total_size += 3;
            }
            // bool xla_gpu_temp_buffer_use_separate_color = 312;
            if (this_._internal_xla_gpu_temp_buffer_use_separate_color() != 0) {
              total_size += 3;
            }
            // bool xla_syntax_sugar_async_ops = 315;
            if (this_._internal_xla_syntax_sugar_async_ops() != 0) {
              total_size += 3;
            }
            // int64 xla_cmd_buffer_trace_cache_size = 311;
            if (this_._internal_xla_cmd_buffer_trace_cache_size() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int64Size(
                                              this_._internal_xla_cmd_buffer_trace_cache_size());
            }
            // float xla_gpu_autotune_gemm_rtol = 316;
            if (::absl::bit_cast<::uint32_t>(this_._internal_xla_gpu_autotune_gemm_rtol()) != 0) {
              total_size += 6;
            }
            // int32 xla_gpu_cudnn_gemm_max_plans = 318;
            if (this_._internal_xla_gpu_cudnn_gemm_max_plans() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_xla_gpu_cudnn_gemm_max_plans());
            }
            // bool xla_enable_command_buffers_during_profiling = 317;
            if (this_._internal_xla_enable_command_buffers_during_profiling() != 0) {
              total_size += 3;
            }
            // bool xla_gpu_enable_libnvjitlink = 319;
            if (this_._internal_xla_gpu_enable_libnvjitlink() != 0) {
              total_size += 3;
            }
            // bool xla_gpu_enable_triton_gemm_int4 = 320;
            if (this_._internal_xla_gpu_enable_triton_gemm_int4() != 0) {
              total_size += 3;
            }
            // bool xla_gpu_async_dot = 321;
            if (this_._internal_xla_gpu_async_dot() != 0) {
              total_size += 3;
            }
            // int32 xla_cpu_parallel_codegen_split_count = 323;
            if (this_._internal_xla_cpu_parallel_codegen_split_count() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_xla_cpu_parallel_codegen_split_count());
            }
            // .xla.DebugOptions.AutotuneCacheMode xla_gpu_experimental_autotune_cache_mode = 324;
            if (this_._internal_xla_gpu_experimental_autotune_cache_mode() != 0) {
              total_size += 2 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_xla_gpu_experimental_autotune_cache_mode());
            }
            // int32 xla_gpu_executable_warn_stuck_timeout_seconds = 327;
            if (this_._internal_xla_gpu_executable_warn_stuck_timeout_seconds() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_xla_gpu_executable_warn_stuck_timeout_seconds());
            }
            // int32 xla_gpu_executable_terminate_timeout_seconds = 328;
            if (this_._internal_xla_gpu_executable_terminate_timeout_seconds() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_xla_gpu_executable_terminate_timeout_seconds());
            }
            // bool xla_gpu_enable_pgle_accuracy_checker = 326;
            if (this_._internal_xla_gpu_enable_pgle_accuracy_checker() != 0) {
              total_size += 3;
            }
            // bool xla_experimental_ignore_channel_id = 330;
            if (this_._internal_xla_experimental_ignore_channel_id() != 0) {
              total_size += 3;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void DebugOptions::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<DebugOptions*>(&to_msg);
  auto& from = static_cast<const DebugOptions&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xla.DebugOptions)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_xla_disable_hlo_passes()->MergeFrom(from._internal_xla_disable_hlo_passes());
  _this->_internal_mutable_xla_enable_hlo_passes_only()->MergeFrom(from._internal_xla_enable_hlo_passes_only());
  _this->_internal_mutable_xla_gpu_ptx_file()->MergeFrom(from._internal_xla_gpu_ptx_file());
  _this->_internal_mutable_xla_gpu_llvm_ir_file()->MergeFrom(from._internal_xla_gpu_llvm_ir_file());
  _this->_internal_mutable_xla_gpu_enable_command_buffer()->MergeFrom(from._internal_xla_gpu_enable_command_buffer());
  _this->_internal_mutable_xla_gpu_disable_async_collectives()->MergeFrom(from._internal_xla_gpu_disable_async_collectives());
  _this->_internal_mutable_legacy_command_buffer_custom_call_targets()->MergeFrom(from._internal_legacy_command_buffer_custom_call_targets());
  _this->_impl_.xla_backend_extra_options_.MergeFrom(from._impl_.xla_backend_extra_options_);
  if (!from._internal_xla_gpu_cuda_data_dir().empty()) {
    _this->_internal_set_xla_gpu_cuda_data_dir(from._internal_xla_gpu_cuda_data_dir());
  }
  if (!from._internal_xla_dump_to().empty()) {
    _this->_internal_set_xla_dump_to(from._internal_xla_dump_to());
  }
  if (!from._internal_xla_dump_hlo_module_re().empty()) {
    _this->_internal_set_xla_dump_hlo_module_re(from._internal_xla_dump_hlo_module_re());
  }
  if (!from._internal_xla_dump_hlo_pass_re().empty()) {
    _this->_internal_set_xla_dump_hlo_pass_re(from._internal_xla_dump_hlo_pass_re());
  }
  if (!from._internal_xla_gpu_algorithm_denylist_path().empty()) {
    _this->_internal_set_xla_gpu_algorithm_denylist_path(from._internal_xla_gpu_algorithm_denylist_path());
  }
  if (!from._internal_xla_gpu_asm_extra_flags().empty()) {
    _this->_internal_set_xla_gpu_asm_extra_flags(from._internal_xla_gpu_asm_extra_flags());
  }
  if (!from._internal_xla_dump_hlo_pipeline_re().empty()) {
    _this->_internal_set_xla_dump_hlo_pipeline_re(from._internal_xla_dump_hlo_pipeline_re());
  }
  if (!from._internal_xla_gpu_pgle_profile_file_or_directory_path().empty()) {
    _this->_internal_set_xla_gpu_pgle_profile_file_or_directory_path(from._internal_xla_gpu_pgle_profile_file_or_directory_path());
  }
  if (!from._internal_xla_gpu_dump_autotune_results_to().empty()) {
    _this->_internal_set_xla_gpu_dump_autotune_results_to(from._internal_xla_gpu_dump_autotune_results_to());
  }
  if (!from._internal_xla_gpu_load_autotune_results_from().empty()) {
    _this->_internal_set_xla_gpu_load_autotune_results_from(from._internal_xla_gpu_load_autotune_results_from());
  }
  if (!from._internal_xla_gpu_target_config_filename().empty()) {
    _this->_internal_set_xla_gpu_target_config_filename(from._internal_xla_gpu_target_config_filename());
  }
  if (!from._internal_xla_gpu_enable_custom_fusions_re().empty()) {
    _this->_internal_set_xla_gpu_enable_custom_fusions_re(from._internal_xla_gpu_enable_custom_fusions_re());
  }
  if (!from._internal_xla_gpu_dump_autotune_logs_to().empty()) {
    _this->_internal_set_xla_gpu_dump_autotune_logs_to(from._internal_xla_gpu_dump_autotune_logs_to());
  }
  if (!from._internal_xla_gpu_override_gemm_autotuner().empty()) {
    _this->_internal_set_xla_gpu_override_gemm_autotuner(from._internal_xla_gpu_override_gemm_autotuner());
  }
  if (!from._internal_xla_gpu_kernel_cache_file().empty()) {
    _this->_internal_set_xla_gpu_kernel_cache_file(from._internal_xla_gpu_kernel_cache_file());
  }
  if (!from._internal_xla_gpu_per_fusion_autotune_cache_dir().empty()) {
    _this->_internal_set_xla_gpu_per_fusion_autotune_cache_dir(from._internal_xla_gpu_per_fusion_autotune_cache_dir());
  }
  if (from._internal_xla_backend_optimization_level() != 0) {
    _this->_impl_.xla_backend_optimization_level_ = from._impl_.xla_backend_optimization_level_;
  }
  if (from._internal_xla_hlo_profile() != 0) {
    _this->_impl_.xla_hlo_profile_ = from._impl_.xla_hlo_profile_;
  }
  if (from._internal_xla_disable_all_hlo_passes() != 0) {
    _this->_impl_.xla_disable_all_hlo_passes_ = from._impl_.xla_disable_all_hlo_passes_;
  }
  if (from._internal_xla_embed_ir_in_executable() != 0) {
    _this->_impl_.xla_embed_ir_in_executable_ = from._impl_.xla_embed_ir_in_executable_;
  }
  if (from._internal_xla_eliminate_hlo_implicit_broadcast() != 0) {
    _this->_impl_.xla_eliminate_hlo_implicit_broadcast_ = from._impl_.xla_eliminate_hlo_implicit_broadcast_;
  }
  if (from._internal_xla_cpu_multi_thread_eigen() != 0) {
    _this->_impl_.xla_cpu_multi_thread_eigen_ = from._impl_.xla_cpu_multi_thread_eigen_;
  }
  if (from._internal_xla_gpu_ftz() != 0) {
    _this->_impl_.xla_gpu_ftz_ = from._impl_.xla_gpu_ftz_;
  }
  if (from._internal_xla_llvm_enable_alias_scope_metadata() != 0) {
    _this->_impl_.xla_llvm_enable_alias_scope_metadata_ = from._impl_.xla_llvm_enable_alias_scope_metadata_;
  }
  if (from._internal_xla_llvm_enable_noalias_metadata() != 0) {
    _this->_impl_.xla_llvm_enable_noalias_metadata_ = from._impl_.xla_llvm_enable_noalias_metadata_;
  }
  if (from._internal_xla_llvm_enable_invariant_load_metadata() != 0) {
    _this->_impl_.xla_llvm_enable_invariant_load_metadata_ = from._impl_.xla_llvm_enable_invariant_load_metadata_;
  }
  if (from._internal_xla_llvm_disable_expensive_passes() != 0) {
    _this->_impl_.xla_llvm_disable_expensive_passes_ = from._impl_.xla_llvm_disable_expensive_passes_;
  }
  if (from._internal_xla_test_all_output_layouts() != 0) {
    _this->_impl_.xla_test_all_output_layouts_ = from._impl_.xla_test_all_output_layouts_;
  }
  if (from._internal_xla_test_all_input_layouts() != 0) {
    _this->_impl_.xla_test_all_input_layouts_ = from._impl_.xla_test_all_input_layouts_;
  }
  if (from._internal_xla_force_host_platform_device_count() != 0) {
    _this->_impl_.xla_force_host_platform_device_count_ = from._impl_.xla_force_host_platform_device_count_;
  }
  if (from._internal_xla_hlo_graph_sharding_color() != 0) {
    _this->_impl_.xla_hlo_graph_sharding_color_ = from._impl_.xla_hlo_graph_sharding_color_;
  }
  if (from._internal_xla_cpu_use_mkl_dnn() != 0) {
    _this->_impl_.xla_cpu_use_mkl_dnn_ = from._impl_.xla_cpu_use_mkl_dnn_;
  }
  if (from._internal_xla_gpu_enable_fast_min_max() != 0) {
    _this->_impl_.xla_gpu_enable_fast_min_max_ = from._impl_.xla_gpu_enable_fast_min_max_;
  }
  if (from._internal_xla_allow_excess_precision() != 0) {
    _this->_impl_.xla_allow_excess_precision_ = from._impl_.xla_allow_excess_precision_;
  }
  if (from._internal_xla_gpu_crash_on_verification_failures() != 0) {
    _this->_impl_.xla_gpu_crash_on_verification_failures_ = from._impl_.xla_gpu_crash_on_verification_failures_;
  }
  if (from._internal_xla_gpu_disable_gpuasm_optimizations() != 0) {
    _this->_impl_.xla_gpu_disable_gpuasm_optimizations_ = from._impl_.xla_gpu_disable_gpuasm_optimizations_;
  }
  if (from._internal_xla_hlo_evaluator_use_fast_path() != 0) {
    _this->_impl_.xla_hlo_evaluator_use_fast_path_ = from._impl_.xla_hlo_evaluator_use_fast_path_;
  }
  if (from._internal_xla_allow_scalar_index_dynamic_ops() != 0) {
    _this->_impl_.xla_allow_scalar_index_dynamic_ops_ = from._impl_.xla_allow_scalar_index_dynamic_ops_;
  }
  if (from._internal_xla_step_marker_location() != 0) {
    _this->_impl_.xla_step_marker_location_ = from._impl_.xla_step_marker_location_;
  }
  if (from._internal_xla_dump_hlo_as_text() != 0) {
    _this->_impl_.xla_dump_hlo_as_text_ = from._impl_.xla_dump_hlo_as_text_;
  }
  if (from._internal_xla_dump_hlo_as_proto() != 0) {
    _this->_impl_.xla_dump_hlo_as_proto_ = from._impl_.xla_dump_hlo_as_proto_;
  }
  if (from._internal_xla_dump_hlo_as_dot() != 0) {
    _this->_impl_.xla_dump_hlo_as_dot_ = from._impl_.xla_dump_hlo_as_dot_;
  }
  if (from._internal_xla_dump_hlo_as_url() != 0) {
    _this->_impl_.xla_dump_hlo_as_url_ = from._impl_.xla_dump_hlo_as_url_;
  }
  if (from._internal_xla_gpu_autotune_level() != 0) {
    _this->_impl_.xla_gpu_autotune_level_ = from._impl_.xla_gpu_autotune_level_;
  }
  if (from._internal_xla_dump_hlo_as_html() != 0) {
    _this->_impl_.xla_dump_hlo_as_html_ = from._impl_.xla_dump_hlo_as_html_;
  }
  if (from._internal_xla_dump_fusion_visualization() != 0) {
    _this->_impl_.xla_dump_fusion_visualization_ = from._impl_.xla_dump_fusion_visualization_;
  }
  if (from._internal_xla_dump_hlo_snapshots() != 0) {
    _this->_impl_.xla_dump_hlo_snapshots_ = from._impl_.xla_dump_hlo_snapshots_;
  }
  if (from._internal_xla_dump_include_timestamp() != 0) {
    _this->_impl_.xla_dump_include_timestamp_ = from._impl_.xla_dump_include_timestamp_;
  }
  if (from._internal_xla_dump_max_hlo_modules() != 0) {
    _this->_impl_.xla_dump_max_hlo_modules_ = from._impl_.xla_dump_max_hlo_modules_;
  }
  if (from._internal_xla_multiheap_size_constraint_per_heap() != 0) {
    _this->_impl_.xla_multiheap_size_constraint_per_heap_ = from._impl_.xla_multiheap_size_constraint_per_heap_;
  }
  if (from._internal_xla_dump_module_metadata() != 0) {
    _this->_impl_.xla_dump_module_metadata_ = from._impl_.xla_dump_module_metadata_;
  }
  if (from._internal_xla_dump_compress_protos() != 0) {
    _this->_impl_.xla_dump_compress_protos_ = from._impl_.xla_dump_compress_protos_;
  }
  if (from._internal_xla_dump_hlo_as_long_text() != 0) {
    _this->_impl_.xla_dump_hlo_as_long_text_ = from._impl_.xla_dump_hlo_as_long_text_;
  }
  if (from._internal_xla_gpu_force_conv_nchw() != 0) {
    _this->_impl_.xla_gpu_force_conv_nchw_ = from._impl_.xla_gpu_force_conv_nchw_;
  }
  if (from._internal_xla_gpu_force_compilation_parallelism() != 0) {
    _this->_impl_.xla_gpu_force_compilation_parallelism_ = from._impl_.xla_gpu_force_compilation_parallelism_;
  }
  if (from._internal_xla_gpu_force_conv_nhwc() != 0) {
    _this->_impl_.xla_gpu_force_conv_nhwc_ = from._impl_.xla_gpu_force_conv_nhwc_;
  }
  if (from._internal_xla_gpu_dump_llvmir() != 0) {
    _this->_impl_.xla_gpu_dump_llvmir_ = from._impl_.xla_gpu_dump_llvmir_;
  }
  if (from._internal_xla_dump_enable_mlir_pretty_form() != 0) {
    _this->_impl_.xla_dump_enable_mlir_pretty_form_ = from._impl_.xla_dump_enable_mlir_pretty_form_;
  }
  if (from._internal_xla_tpu_detect_nan() != 0) {
    _this->_impl_.xla_tpu_detect_nan_ = from._impl_.xla_tpu_detect_nan_;
  }
  if (from._internal_xla_gpu_all_reduce_combine_threshold_bytes() != 0) {
    _this->_impl_.xla_gpu_all_reduce_combine_threshold_bytes_ = from._impl_.xla_gpu_all_reduce_combine_threshold_bytes_;
  }
  if (from._internal_xla_gpu_nccl_termination_timeout_seconds() != 0) {
    _this->_impl_.xla_gpu_nccl_termination_timeout_seconds_ = from._impl_.xla_gpu_nccl_termination_timeout_seconds_;
  }
  if (from._internal_xla_gpu_all_reduce_blueconnect_num_devices_per_host() != 0) {
    _this->_impl_.xla_gpu_all_reduce_blueconnect_num_devices_per_host_ = from._impl_.xla_gpu_all_reduce_blueconnect_num_devices_per_host_;
  }
  if (from._internal_xla_tpu_detect_inf() != 0) {
    _this->_impl_.xla_tpu_detect_inf_ = from._impl_.xla_tpu_detect_inf_;
  }
  if (from._internal_xla_cpu_enable_xprof_traceme() != 0) {
    _this->_impl_.xla_cpu_enable_xprof_traceme_ = from._impl_.xla_cpu_enable_xprof_traceme_;
  }
  if (from._internal_xla_gpu_unsafe_fallback_to_driver_on_ptxas_not_found() != 0) {
    _this->_impl_.xla_gpu_unsafe_fallback_to_driver_on_ptxas_not_found_ = from._impl_.xla_gpu_unsafe_fallback_to_driver_on_ptxas_not_found_;
  }
  if (from._internal_xla_detailed_logging() != 0) {
    _this->_impl_.xla_detailed_logging_ = from._impl_.xla_detailed_logging_;
  }
  if (from._internal_xla_gpu_redzone_scratch_max_megabytes() != 0) {
    _this->_impl_.xla_gpu_redzone_scratch_max_megabytes_ = from._impl_.xla_gpu_redzone_scratch_max_megabytes_;
  }
  if (from._internal_xla_cpu_fast_math_honor_functions() != 0) {
    _this->_impl_.xla_cpu_fast_math_honor_functions_ = from._impl_.xla_cpu_fast_math_honor_functions_;
  }
  if (from._internal_xla_cpu_fast_math_honor_infs() != 0) {
    _this->_impl_.xla_cpu_fast_math_honor_infs_ = from._impl_.xla_cpu_fast_math_honor_infs_;
  }
  if (from._internal_xla_cpu_fast_math_honor_nans() != 0) {
    _this->_impl_.xla_cpu_fast_math_honor_nans_ = from._impl_.xla_cpu_fast_math_honor_nans_;
  }
  if (from._internal_xla_cpu_use_thunk_runtime() != 0) {
    _this->_impl_.xla_cpu_use_thunk_runtime_ = from._impl_.xla_cpu_use_thunk_runtime_;
  }
  if (from._internal_xla_cpu_enable_concurrency_optimized_scheduler() != 0) {
    _this->_impl_.xla_cpu_enable_concurrency_optimized_scheduler_ = from._impl_.xla_cpu_enable_concurrency_optimized_scheduler_;
  }
  if (from._internal_xla_cpu_enable_fast_math() != 0) {
    _this->_impl_.xla_cpu_enable_fast_math_ = from._impl_.xla_cpu_enable_fast_math_;
  }
  if (from._internal_xla_cpu_enable_fast_min_max() != 0) {
    _this->_impl_.xla_cpu_enable_fast_min_max_ = from._impl_.xla_cpu_enable_fast_min_max_;
  }
  if (from._internal_xla_cpu_fast_math_honor_division() != 0) {
    _this->_impl_.xla_cpu_fast_math_honor_division_ = from._impl_.xla_cpu_fast_math_honor_division_;
  }
  if (from._internal_xla_dump_disable_metadata() != 0) {
    _this->_impl_.xla_dump_disable_metadata_ = from._impl_.xla_dump_disable_metadata_;
  }
  if (from._internal_xla_gpu_strict_conv_algorithm_picker() != 0) {
    _this->_impl_.xla_gpu_strict_conv_algorithm_picker_ = from._impl_.xla_gpu_strict_conv_algorithm_picker_;
  }
  if (from._internal_xla_gpu_enable_custom_fusions() != 0) {
    _this->_impl_.xla_gpu_enable_custom_fusions_ = from._impl_.xla_gpu_enable_custom_fusions_;
  }
  if (from._internal_xla_gpu_enable_dynamic_slice_fusion() != 0) {
    _this->_impl_.xla_gpu_enable_dynamic_slice_fusion_ = from._impl_.xla_gpu_enable_dynamic_slice_fusion_;
  }
  if (from._internal_xla_gpu_shape_checks() != 0) {
    _this->_impl_.xla_gpu_shape_checks_ = from._impl_.xla_gpu_shape_checks_;
  }
  if (from._internal_xla_gpu_enable_shared_constants() != 0) {
    _this->_impl_.xla_gpu_enable_shared_constants_ = from._impl_.xla_gpu_enable_shared_constants_;
  }
  if (from._internal_xla_gpu_enable_cublaslt() != 0) {
    _this->_impl_.xla_gpu_enable_cublaslt_ = from._impl_.xla_gpu_enable_cublaslt_;
  }
  if (from._internal_xla_gpu_graph_enable_concurrent_region() != 0) {
    _this->_impl_.xla_gpu_graph_enable_concurrent_region_ = from._impl_.xla_gpu_graph_enable_concurrent_region_;
  }
  if (from._internal_xla_cpu_use_acl() != 0) {
    _this->_impl_.xla_cpu_use_acl_ = from._impl_.xla_cpu_use_acl_;
  }
  if (from._internal_xla_cpu_strict_dot_conv_math() != 0) {
    _this->_impl_.xla_cpu_strict_dot_conv_math_ = from._impl_.xla_cpu_strict_dot_conv_math_;
  }
  if (from._internal_xla_gpu_use_runtime_fusion() != 0) {
    _this->_impl_.xla_gpu_use_runtime_fusion_ = from._impl_.xla_gpu_use_runtime_fusion_;
  }
  if (from._internal_xla_dump_latency_hiding_schedule() != 0) {
    _this->_impl_.xla_dump_latency_hiding_schedule_ = from._impl_.xla_dump_latency_hiding_schedule_;
  }
  if (from._internal_xla_cpu_enable_mlir_tiling_and_fusion() != 0) {
    _this->_impl_.xla_cpu_enable_mlir_tiling_and_fusion_ = from._impl_.xla_cpu_enable_mlir_tiling_and_fusion_;
  }
  if (from._internal_xla_partitioning_algorithm() != 0) {
    _this->_impl_.xla_partitioning_algorithm_ = from._impl_.xla_partitioning_algorithm_;
  }
  if (from._internal_xla_cpu_enable_custom_matmul_tiling() != 0) {
    _this->_impl_.xla_cpu_enable_custom_matmul_tiling_ = from._impl_.xla_cpu_enable_custom_matmul_tiling_;
  }
  if (from._internal_xla_cpu_enable_mlir_fusion_outlining() != 0) {
    _this->_impl_.xla_cpu_enable_mlir_fusion_outlining_ = from._impl_.xla_cpu_enable_mlir_fusion_outlining_;
  }
  if (from._internal_xla_cpu_enable_experimental_deallocation() != 0) {
    _this->_impl_.xla_cpu_enable_experimental_deallocation_ = from._impl_.xla_cpu_enable_experimental_deallocation_;
  }
  if (from._internal_xla_gpu_enable_latency_hiding_scheduler() != 0) {
    _this->_impl_.xla_gpu_enable_latency_hiding_scheduler_ = from._impl_.xla_gpu_enable_latency_hiding_scheduler_;
  }
  if (from._internal_xla_cpu_matmul_tiling_m_dim() != 0) {
    _this->_impl_.xla_cpu_matmul_tiling_m_dim_ = from._impl_.xla_cpu_matmul_tiling_m_dim_;
  }
  if (from._internal_xla_cpu_matmul_tiling_n_dim() != 0) {
    _this->_impl_.xla_cpu_matmul_tiling_n_dim_ = from._impl_.xla_cpu_matmul_tiling_n_dim_;
  }
  if (from._internal_xla_cpu_matmul_tiling_k_dim() != 0) {
    _this->_impl_.xla_cpu_matmul_tiling_k_dim_ = from._impl_.xla_cpu_matmul_tiling_k_dim_;
  }
  if (from._internal_xla_gpu_collective_inflation_factor() != 0) {
    _this->_impl_.xla_gpu_collective_inflation_factor_ = from._impl_.xla_gpu_collective_inflation_factor_;
  }
  if (from._internal_xla_gpu_graph_min_graph_size() != 0) {
    _this->_impl_.xla_gpu_graph_min_graph_size_ = from._impl_.xla_gpu_graph_min_graph_size_;
  }
  if (from._internal_xla_gpu_all_gather_combine_threshold_bytes() != 0) {
    _this->_impl_.xla_gpu_all_gather_combine_threshold_bytes_ = from._impl_.xla_gpu_all_gather_combine_threshold_bytes_;
  }
  if (from._internal_xla_gpu_reduce_scatter_combine_threshold_bytes() != 0) {
    _this->_impl_.xla_gpu_reduce_scatter_combine_threshold_bytes_ = from._impl_.xla_gpu_reduce_scatter_combine_threshold_bytes_;
  }
  if (from._internal_xla_gpu_enable_cudnn_frontend() != 0) {
    _this->_impl_.xla_gpu_enable_cudnn_frontend_ = from._impl_.xla_gpu_enable_cudnn_frontend_;
  }
  if (from._internal_xla_gpu_enable_cudnn_fmha() != 0) {
    _this->_impl_.xla_gpu_enable_cudnn_fmha_ = from._impl_.xla_gpu_enable_cudnn_fmha_;
  }
  if (from._internal_xla_gpu_fused_attention_use_cudnn_rng() != 0) {
    _this->_impl_.xla_gpu_fused_attention_use_cudnn_rng_ = from._impl_.xla_gpu_fused_attention_use_cudnn_rng_;
  }
  if (from._internal_xla_gpu_enable_cudnn_layer_norm() != 0) {
    _this->_impl_.xla_gpu_enable_cudnn_layer_norm_ = from._impl_.xla_gpu_enable_cudnn_layer_norm_;
  }
  if (from._internal_xla_gpu_run_post_layout_collective_pipeliner() != 0) {
    _this->_impl_.xla_gpu_run_post_layout_collective_pipeliner_ = from._impl_.xla_gpu_run_post_layout_collective_pipeliner_;
  }
  if (from._internal_xla_gpu_enable_triton_gemm() != 0) {
    _this->_impl_.xla_gpu_enable_triton_gemm_ = from._impl_.xla_gpu_enable_triton_gemm_;
  }
  if (from._internal_xla_gpu_enable_cudnn_int8x32_convolution_reordering() != 0) {
    _this->_impl_.xla_gpu_enable_cudnn_int8x32_convolution_reordering_ = from._impl_.xla_gpu_enable_cudnn_int8x32_convolution_reordering_;
  }
  if (from._internal_xla_gpu_triton_gemm_any() != 0) {
    _this->_impl_.xla_gpu_triton_gemm_any_ = from._impl_.xla_gpu_triton_gemm_any_;
  }
  if (from._internal_xla_gpu_auto_spmd_partitioning_memory_budget_gb() != 0) {
    _this->_impl_.xla_gpu_auto_spmd_partitioning_memory_budget_gb_ = from._impl_.xla_gpu_auto_spmd_partitioning_memory_budget_gb_;
  }
  if (from._internal_xla_gpu_exhaustive_tiling_search() != 0) {
    _this->_impl_.xla_gpu_exhaustive_tiling_search_ = from._impl_.xla_gpu_exhaustive_tiling_search_;
  }
  if (from._internal_xla_gpu_enable_priority_fusion() != 0) {
    _this->_impl_.xla_gpu_enable_priority_fusion_ = from._impl_.xla_gpu_enable_priority_fusion_;
  }
  if (from._internal_xla_gpu_triton_gemm_disable_reduced_precision_reduction() != 0) {
    _this->_impl_.xla_gpu_triton_gemm_disable_reduced_precision_reduction_ = from._impl_.xla_gpu_triton_gemm_disable_reduced_precision_reduction_;
  }
  if (from._internal_xla_gpu_dump_autotuned_gemm_fusions() != 0) {
    _this->_impl_.xla_gpu_dump_autotuned_gemm_fusions_ = from._impl_.xla_gpu_dump_autotuned_gemm_fusions_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_xla_gpu_auto_spmd_partitioning_memory_budget_ratio()) != 0) {
    _this->_impl_.xla_gpu_auto_spmd_partitioning_memory_budget_ratio_ = from._impl_.xla_gpu_auto_spmd_partitioning_memory_budget_ratio_;
  }
  if (from._internal_xla_gpu_enable_highest_priority_async_stream() != 0) {
    _this->_impl_.xla_gpu_enable_highest_priority_async_stream_ = from._impl_.xla_gpu_enable_highest_priority_async_stream_;
  }
  if (from._internal_xla_gpu_enable_analytical_latency_estimator() != 0) {
    _this->_impl_.xla_gpu_enable_analytical_latency_estimator_ = from._impl_.xla_gpu_enable_analytical_latency_estimator_;
  }
  if (from._internal_xla_gpu_lhs_enable_gpu_async_tracker() != 0) {
    _this->_impl_.xla_gpu_lhs_enable_gpu_async_tracker_ = from._impl_.xla_gpu_lhs_enable_gpu_async_tracker_;
  }
  if (from._internal_xla_gpu_enable_pipelined_collectives() != 0) {
    _this->_impl_.xla_gpu_enable_pipelined_collectives_ = from._impl_.xla_gpu_enable_pipelined_collectives_;
  }
  if (from._internal_xla_gpu_redzone_padding_bytes() != 0) {
    _this->_impl_.xla_gpu_redzone_padding_bytes_ = from._impl_.xla_gpu_redzone_padding_bytes_;
  }
  if (from._internal_xla_gpu_triton_fusion_level() != 0) {
    _this->_impl_.xla_gpu_triton_fusion_level_ = from._impl_.xla_gpu_triton_fusion_level_;
  }
  if (from._internal_xla_gpu_enable_pipelined_all_reduce() != 0) {
    _this->_impl_.xla_gpu_enable_pipelined_all_reduce_ = from._impl_.xla_gpu_enable_pipelined_all_reduce_;
  }
  if (from._internal_xla_gpu_enable_pipelined_all_gather() != 0) {
    _this->_impl_.xla_gpu_enable_pipelined_all_gather_ = from._impl_.xla_gpu_enable_pipelined_all_gather_;
  }
  if (from._internal_xla_gpu_enable_pipelined_reduce_scatter() != 0) {
    _this->_impl_.xla_gpu_enable_pipelined_reduce_scatter_ = from._impl_.xla_gpu_enable_pipelined_reduce_scatter_;
  }
  if (from._internal_xla_gpu_enable_pipelined_p2p() != 0) {
    _this->_impl_.xla_gpu_enable_pipelined_p2p_ = from._impl_.xla_gpu_enable_pipelined_p2p_;
  }
  if (from._internal_xla_enable_dumping() != 0) {
    _this->_impl_.xla_enable_dumping_ = from._impl_.xla_enable_dumping_;
  }
  if (from._internal_xla_gpu_enable_llvm_module_compilation_parallelism() != 0) {
    _this->_impl_.xla_gpu_enable_llvm_module_compilation_parallelism_ = from._impl_.xla_gpu_enable_llvm_module_compilation_parallelism_;
  }
  if (from._internal_xla_gpu_deterministic_ops() != 0) {
    _this->_impl_.xla_gpu_deterministic_ops_ = from._impl_.xla_gpu_deterministic_ops_;
  }
  if (from._internal_xla_gpu_enable_all_gather_combine_by_dim() != 0) {
    _this->_impl_.xla_gpu_enable_all_gather_combine_by_dim_ = from._impl_.xla_gpu_enable_all_gather_combine_by_dim_;
  }
  if (from._internal_xla_gpu_copy_insertion_use_region_analysis() != 0) {
    _this->_impl_.xla_gpu_copy_insertion_use_region_analysis_ = from._impl_.xla_gpu_copy_insertion_use_region_analysis_;
  }
  if (from._internal_xla_gpu_collect_cost_model_stats() != 0) {
    _this->_impl_.xla_gpu_collect_cost_model_stats_ = from._impl_.xla_gpu_collect_cost_model_stats_;
  }
  if (from._internal_xla_gpu_enable_split_k_autotuning() != 0) {
    _this->_impl_.xla_gpu_enable_split_k_autotuning_ = from._impl_.xla_gpu_enable_split_k_autotuning_;
  }
  if (from._internal_xla_gpu_enable_reduction_epilogue_fusion() != 0) {
    _this->_impl_.xla_gpu_enable_reduction_epilogue_fusion_ = from._impl_.xla_gpu_enable_reduction_epilogue_fusion_;
  }
  if (from._internal_xla_gpu_collective_permute_decomposer_threshold() != 0) {
    _this->_impl_.xla_gpu_collective_permute_decomposer_threshold_ = from._impl_.xla_gpu_collective_permute_decomposer_threshold_;
  }
  if (from._internal_xla_gpu_enable_reduce_scatter_combine_by_dim() != 0) {
    _this->_impl_.xla_gpu_enable_reduce_scatter_combine_by_dim_ = from._impl_.xla_gpu_enable_reduce_scatter_combine_by_dim_;
  }
  if (from._internal_xla_gpu_enable_reassociation_for_converted_ar() != 0) {
    _this->_impl_.xla_gpu_enable_reassociation_for_converted_ar_ = from._impl_.xla_gpu_enable_reassociation_for_converted_ar_;
  }
  if (from._internal_xla_gpu_enable_while_loop_reduce_scatter_code_motion() != 0) {
    _this->_impl_.xla_gpu_enable_while_loop_reduce_scatter_code_motion_ = from._impl_.xla_gpu_enable_while_loop_reduce_scatter_code_motion_;
  }
  if (from._internal_xla_llvm_force_inline_before_split() != 0) {
    _this->_impl_.xla_llvm_force_inline_before_split_ = from._impl_.xla_llvm_force_inline_before_split_;
  }
  if (from._internal_xla_gpu_experimental_disable_binary_libraries() != 0) {
    _this->_impl_.xla_gpu_experimental_disable_binary_libraries_ = from._impl_.xla_gpu_experimental_disable_binary_libraries_;
  }
  if (from._internal_xla_gpu_experimental_enable_triton_softmax_priority_fusion() != 0) {
    _this->_impl_.xla_gpu_experimental_enable_triton_softmax_priority_fusion_ = from._impl_.xla_gpu_experimental_enable_triton_softmax_priority_fusion_;
  }
  if (from._internal_xla_gpu_unsupported_enable_triton_gemm() != 0) {
    _this->_impl_.xla_gpu_unsupported_enable_triton_gemm_ = from._impl_.xla_gpu_unsupported_enable_triton_gemm_;
  }
  if (from._internal_xla_hlo_graph_addresses() != 0) {
    _this->_impl_.xla_hlo_graph_addresses_ = from._impl_.xla_hlo_graph_addresses_;
  }
  if (from._internal_xla_gpu_enable_nccl_clique_optimization() != 0) {
    _this->_impl_.xla_gpu_enable_nccl_clique_optimization_ = from._impl_.xla_gpu_enable_nccl_clique_optimization_;
  }
  if (from._internal_xla_gpu_mock_custom_calls() != 0) {
    _this->_impl_.xla_gpu_mock_custom_calls_ = from._impl_.xla_gpu_mock_custom_calls_;
  }
  if (from._internal_xla_gpu_cublas_fallback() != 0) {
    _this->_impl_.xla_gpu_cublas_fallback_ = from._impl_.xla_gpu_cublas_fallback_;
  }
  if (from._internal_xla_gpu_enable_while_loop_double_buffering() != 0) {
    _this->_impl_.xla_gpu_enable_while_loop_double_buffering_ = from._impl_.xla_gpu_enable_while_loop_double_buffering_;
  }
  if (from._internal_xla_gpu_llvm_verification_level() != 0) {
    _this->_impl_.xla_gpu_llvm_verification_level_ = from._impl_.xla_gpu_llvm_verification_level_;
  }
  if (from._internal_xla_debug_buffer_assignment_show_max() != 0) {
    _this->_impl_.xla_debug_buffer_assignment_show_max_ = from._impl_.xla_debug_buffer_assignment_show_max_;
  }
  if (from._internal_xla_gpu_ensure_minor_dot_contraction_dims() != 0) {
    _this->_impl_.xla_gpu_ensure_minor_dot_contraction_dims_ = from._impl_.xla_gpu_ensure_minor_dot_contraction_dims_;
  }
  if (from._internal_xla_gpu_filter_kernels_spilling_registers_on_autotuning() != 0) {
    _this->_impl_.xla_gpu_filter_kernels_spilling_registers_on_autotuning_ = from._impl_.xla_gpu_filter_kernels_spilling_registers_on_autotuning_;
  }
  if (from._internal_xla_gpu_enable_cub_radix_sort() != 0) {
    _this->_impl_.xla_gpu_enable_cub_radix_sort_ = from._impl_.xla_gpu_enable_cub_radix_sort_;
  }
  if (from._internal_xla_gpu_enable_triton_hopper() != 0) {
    _this->_impl_.xla_gpu_enable_triton_hopper_ = from._impl_.xla_gpu_enable_triton_hopper_;
  }
  if (from._internal_xla_gpu_memory_limit_slop_factor() != 0) {
    _this->_impl_.xla_gpu_memory_limit_slop_factor_ = from._impl_.xla_gpu_memory_limit_slop_factor_;
  }
  if (from._internal_xla_gpu_threshold_for_windowed_einsum_mib() != 0) {
    _this->_impl_.xla_gpu_threshold_for_windowed_einsum_mib_ = from._impl_.xla_gpu_threshold_for_windowed_einsum_mib_;
  }
  if (from._internal_xla_gpu_nccl_collective_max_nchannels() != 0) {
    _this->_impl_.xla_gpu_nccl_collective_max_nchannels_ = from._impl_.xla_gpu_nccl_collective_max_nchannels_;
  }
  if (from._internal_xla_gpu_enable_nccl_user_buffers() != 0) {
    _this->_impl_.xla_gpu_enable_nccl_user_buffers_ = from._impl_.xla_gpu_enable_nccl_user_buffers_;
  }
  if (from._internal_xla_gpu_enable_nccl_comm_splitting() != 0) {
    _this->_impl_.xla_gpu_enable_nccl_comm_splitting_ = from._impl_.xla_gpu_enable_nccl_comm_splitting_;
  }
  if (from._internal_xla_gpu_enable_nccl_per_stream_comms() != 0) {
    _this->_impl_.xla_gpu_enable_nccl_per_stream_comms_ = from._impl_.xla_gpu_enable_nccl_per_stream_comms_;
  }
  if (from._internal_xla_gpu_enable_libnvptxcompiler() != 0) {
    _this->_impl_.xla_gpu_enable_libnvptxcompiler_ = from._impl_.xla_gpu_enable_libnvptxcompiler_;
  }
  if (from._internal_xla_gpu_enable_dot_strength_reduction() != 0) {
    _this->_impl_.xla_gpu_enable_dot_strength_reduction_ = from._impl_.xla_gpu_enable_dot_strength_reduction_;
  }
  if (from._internal_xla_gpu_multi_streamed_windowed_einsum() != 0) {
    _this->_impl_.xla_gpu_multi_streamed_windowed_einsum_ = from._impl_.xla_gpu_multi_streamed_windowed_einsum_;
  }
  if (from._internal_xla_gpu_enable_bf16_6way_gemm() != 0) {
    _this->_impl_.xla_gpu_enable_bf16_6way_gemm_ = from._impl_.xla_gpu_enable_bf16_6way_gemm_;
  }
  if (from._internal_xla_gpu_enable_bf16_3way_gemm() != 0) {
    _this->_impl_.xla_gpu_enable_bf16_3way_gemm_ = from._impl_.xla_gpu_enable_bf16_3way_gemm_;
  }
  if (from._internal_xla_gpu_nccl_p2p_max_nchannels() != 0) {
    _this->_impl_.xla_gpu_nccl_p2p_max_nchannels_ = from._impl_.xla_gpu_nccl_p2p_max_nchannels_;
  }
  if (from._internal_xla_gpu_gemm_rewrite_size_threshold() != 0) {
    _this->_impl_.xla_gpu_gemm_rewrite_size_threshold_ = from._impl_.xla_gpu_gemm_rewrite_size_threshold_;
  }
  if (from._internal_xla_gpu_cudnn_gemm_fusion_level() != 0) {
    _this->_impl_.xla_gpu_cudnn_gemm_fusion_level_ = from._impl_.xla_gpu_cudnn_gemm_fusion_level_;
  }
  if (from._internal_xla_gpu_require_complete_aot_autotune_results() != 0) {
    _this->_impl_.xla_gpu_require_complete_aot_autotune_results_ = from._impl_.xla_gpu_require_complete_aot_autotune_results_;
  }
  if (from._internal_xla_gpu_use_memcpy_local_p2p() != 0) {
    _this->_impl_.xla_gpu_use_memcpy_local_p2p_ = from._impl_.xla_gpu_use_memcpy_local_p2p_;
  }
  if (from._internal_xla_dump_large_constants() != 0) {
    _this->_impl_.xla_dump_large_constants_ = from._impl_.xla_dump_large_constants_;
  }
  if (from._internal_xla_gpu_verify_triton_fusion_numerics() != 0) {
    _this->_impl_.xla_gpu_verify_triton_fusion_numerics_ = from._impl_.xla_gpu_verify_triton_fusion_numerics_;
  }
  if (from._internal_xla_gpu_autotune_max_solutions() != 0) {
    _this->_impl_.xla_gpu_autotune_max_solutions_ = from._impl_.xla_gpu_autotune_max_solutions_;
  }
  if (from._internal_xla_reduce_window_rewrite_base_length() != 0) {
    _this->_impl_.xla_reduce_window_rewrite_base_length_ = from._impl_.xla_reduce_window_rewrite_base_length_;
  }
  if (from._internal_xla_gpu_enable_while_loop_unrolling() != 0) {
    _this->_impl_.xla_gpu_enable_while_loop_unrolling_ = from._impl_.xla_gpu_enable_while_loop_unrolling_;
  }
  if (from._internal_xla_gpu_enable_host_memory_offloading() != 0) {
    _this->_impl_.xla_gpu_enable_host_memory_offloading_ = from._impl_.xla_gpu_enable_host_memory_offloading_;
  }
  if (from._internal_xla_gpu_exclude_nondeterministic_ops() != 0) {
    _this->_impl_.xla_gpu_exclude_nondeterministic_ops_ = from._impl_.xla_gpu_exclude_nondeterministic_ops_;
  }
  if (from._internal_xla_gpu_nccl_terminate_on_error() != 0) {
    _this->_impl_.xla_gpu_nccl_terminate_on_error_ = from._impl_.xla_gpu_nccl_terminate_on_error_;
  }
  if (from._internal_xla_gpu_shard_autotuning() != 0) {
    _this->_impl_.xla_gpu_shard_autotuning_ = from._impl_.xla_gpu_shard_autotuning_;
  }
  if (from._internal_xla_gpu_mlir_emitter_level() != 0) {
    _this->_impl_.xla_gpu_mlir_emitter_level_ = from._impl_.xla_gpu_mlir_emitter_level_;
  }
  if (from._internal_xla_cpu_prefer_vector_width() != 0) {
    _this->_impl_.xla_cpu_prefer_vector_width_ = from._impl_.xla_cpu_prefer_vector_width_;
  }
  if (from._internal_xla_gpu_enable_approx_costly_collectives() != 0) {
    _this->_impl_.xla_gpu_enable_approx_costly_collectives_ = from._impl_.xla_gpu_enable_approx_costly_collectives_;
  }
  if (from._internal_xla_gpu_unsafe_pipelined_loop_annotator() != 0) {
    _this->_impl_.xla_gpu_unsafe_pipelined_loop_annotator_ = from._impl_.xla_gpu_unsafe_pipelined_loop_annotator_;
  }
  if (from._internal_xla_gpu_temp_buffer_use_separate_color() != 0) {
    _this->_impl_.xla_gpu_temp_buffer_use_separate_color_ = from._impl_.xla_gpu_temp_buffer_use_separate_color_;
  }
  if (from._internal_xla_syntax_sugar_async_ops() != 0) {
    _this->_impl_.xla_syntax_sugar_async_ops_ = from._impl_.xla_syntax_sugar_async_ops_;
  }
  if (from._internal_xla_cmd_buffer_trace_cache_size() != 0) {
    _this->_impl_.xla_cmd_buffer_trace_cache_size_ = from._impl_.xla_cmd_buffer_trace_cache_size_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_xla_gpu_autotune_gemm_rtol()) != 0) {
    _this->_impl_.xla_gpu_autotune_gemm_rtol_ = from._impl_.xla_gpu_autotune_gemm_rtol_;
  }
  if (from._internal_xla_gpu_cudnn_gemm_max_plans() != 0) {
    _this->_impl_.xla_gpu_cudnn_gemm_max_plans_ = from._impl_.xla_gpu_cudnn_gemm_max_plans_;
  }
  if (from._internal_xla_enable_command_buffers_during_profiling() != 0) {
    _this->_impl_.xla_enable_command_buffers_during_profiling_ = from._impl_.xla_enable_command_buffers_during_profiling_;
  }
  if (from._internal_xla_gpu_enable_libnvjitlink() != 0) {
    _this->_impl_.xla_gpu_enable_libnvjitlink_ = from._impl_.xla_gpu_enable_libnvjitlink_;
  }
  if (from._internal_xla_gpu_enable_triton_gemm_int4() != 0) {
    _this->_impl_.xla_gpu_enable_triton_gemm_int4_ = from._impl_.xla_gpu_enable_triton_gemm_int4_;
  }
  if (from._internal_xla_gpu_async_dot() != 0) {
    _this->_impl_.xla_gpu_async_dot_ = from._impl_.xla_gpu_async_dot_;
  }
  if (from._internal_xla_cpu_parallel_codegen_split_count() != 0) {
    _this->_impl_.xla_cpu_parallel_codegen_split_count_ = from._impl_.xla_cpu_parallel_codegen_split_count_;
  }
  if (from._internal_xla_gpu_experimental_autotune_cache_mode() != 0) {
    _this->_impl_.xla_gpu_experimental_autotune_cache_mode_ = from._impl_.xla_gpu_experimental_autotune_cache_mode_;
  }
  if (from._internal_xla_gpu_executable_warn_stuck_timeout_seconds() != 0) {
    _this->_impl_.xla_gpu_executable_warn_stuck_timeout_seconds_ = from._impl_.xla_gpu_executable_warn_stuck_timeout_seconds_;
  }
  if (from._internal_xla_gpu_executable_terminate_timeout_seconds() != 0) {
    _this->_impl_.xla_gpu_executable_terminate_timeout_seconds_ = from._impl_.xla_gpu_executable_terminate_timeout_seconds_;
  }
  if (from._internal_xla_gpu_enable_pgle_accuracy_checker() != 0) {
    _this->_impl_.xla_gpu_enable_pgle_accuracy_checker_ = from._impl_.xla_gpu_enable_pgle_accuracy_checker_;
  }
  if (from._internal_xla_experimental_ignore_channel_id() != 0) {
    _this->_impl_.xla_experimental_ignore_channel_id_ = from._impl_.xla_experimental_ignore_channel_id_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void DebugOptions::CopyFrom(const DebugOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.DebugOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void DebugOptions::InternalSwap(DebugOptions* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.xla_disable_hlo_passes_.InternalSwap(&other->_impl_.xla_disable_hlo_passes_);
  _impl_.xla_enable_hlo_passes_only_.InternalSwap(&other->_impl_.xla_enable_hlo_passes_only_);
  _impl_.xla_gpu_ptx_file_.InternalSwap(&other->_impl_.xla_gpu_ptx_file_);
  _impl_.xla_gpu_llvm_ir_file_.InternalSwap(&other->_impl_.xla_gpu_llvm_ir_file_);
  _impl_.xla_gpu_enable_command_buffer_.InternalSwap(&other->_impl_.xla_gpu_enable_command_buffer_);
  _impl_.xla_gpu_disable_async_collectives_.InternalSwap(&other->_impl_.xla_gpu_disable_async_collectives_);
  _impl_.legacy_command_buffer_custom_call_targets_.InternalSwap(&other->_impl_.legacy_command_buffer_custom_call_targets_);
  _impl_.xla_backend_extra_options_.InternalSwap(&other->_impl_.xla_backend_extra_options_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.xla_gpu_cuda_data_dir_, &other->_impl_.xla_gpu_cuda_data_dir_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.xla_dump_to_, &other->_impl_.xla_dump_to_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.xla_dump_hlo_module_re_, &other->_impl_.xla_dump_hlo_module_re_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.xla_dump_hlo_pass_re_, &other->_impl_.xla_dump_hlo_pass_re_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.xla_gpu_algorithm_denylist_path_, &other->_impl_.xla_gpu_algorithm_denylist_path_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.xla_gpu_asm_extra_flags_, &other->_impl_.xla_gpu_asm_extra_flags_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.xla_dump_hlo_pipeline_re_, &other->_impl_.xla_dump_hlo_pipeline_re_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.xla_gpu_pgle_profile_file_or_directory_path_, &other->_impl_.xla_gpu_pgle_profile_file_or_directory_path_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.xla_gpu_dump_autotune_results_to_, &other->_impl_.xla_gpu_dump_autotune_results_to_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.xla_gpu_load_autotune_results_from_, &other->_impl_.xla_gpu_load_autotune_results_from_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.xla_gpu_target_config_filename_, &other->_impl_.xla_gpu_target_config_filename_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.xla_gpu_enable_custom_fusions_re_, &other->_impl_.xla_gpu_enable_custom_fusions_re_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.xla_gpu_dump_autotune_logs_to_, &other->_impl_.xla_gpu_dump_autotune_logs_to_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.xla_gpu_override_gemm_autotuner_, &other->_impl_.xla_gpu_override_gemm_autotuner_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.xla_gpu_kernel_cache_file_, &other->_impl_.xla_gpu_kernel_cache_file_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.xla_gpu_per_fusion_autotune_cache_dir_, &other->_impl_.xla_gpu_per_fusion_autotune_cache_dir_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_experimental_ignore_channel_id_)
      + sizeof(DebugOptions::_impl_.xla_experimental_ignore_channel_id_)
      - PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.xla_backend_optimization_level_)>(
          reinterpret_cast<char*>(&_impl_.xla_backend_optimization_level_),
          reinterpret_cast<char*>(&other->_impl_.xla_backend_optimization_level_));
}

::google::protobuf::Metadata DebugOptions::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class GpuCompilationEnvironment::_Internal {
 public:
};

GpuCompilationEnvironment::GpuCompilationEnvironment(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:xla.GpuCompilationEnvironment)
}
GpuCompilationEnvironment::GpuCompilationEnvironment(
    ::google::protobuf::Arena* arena, const GpuCompilationEnvironment& from)
    : GpuCompilationEnvironment(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE GpuCompilationEnvironment::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void GpuCompilationEnvironment::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.dummy_flag_ = {};
}
GpuCompilationEnvironment::~GpuCompilationEnvironment() {
  // @@protoc_insertion_point(destructor:xla.GpuCompilationEnvironment)
  SharedDtor(*this);
}
inline void GpuCompilationEnvironment::SharedDtor(MessageLite& self) {
  GpuCompilationEnvironment& this_ = static_cast<GpuCompilationEnvironment&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* GpuCompilationEnvironment::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) GpuCompilationEnvironment(arena);
}
constexpr auto GpuCompilationEnvironment::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(GpuCompilationEnvironment),
                                            alignof(GpuCompilationEnvironment));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull GpuCompilationEnvironment::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_GpuCompilationEnvironment_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &GpuCompilationEnvironment::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<GpuCompilationEnvironment>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &GpuCompilationEnvironment::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<GpuCompilationEnvironment>(), &GpuCompilationEnvironment::ByteSizeLong,
            &GpuCompilationEnvironment::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(GpuCompilationEnvironment, _impl_._cached_size_),
        false,
    },
    &GpuCompilationEnvironment::kDescriptorMethods,
    &descriptor_table_xla_2fxla_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* GpuCompilationEnvironment::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> GpuCompilationEnvironment::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::xla::GpuCompilationEnvironment>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // int64 dummy_flag = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(GpuCompilationEnvironment, _impl_.dummy_flag_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(GpuCompilationEnvironment, _impl_.dummy_flag_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int64 dummy_flag = 1;
    {PROTOBUF_FIELD_OFFSET(GpuCompilationEnvironment, _impl_.dummy_flag_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void GpuCompilationEnvironment::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.GpuCompilationEnvironment)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.dummy_flag_ = ::int64_t{0};
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* GpuCompilationEnvironment::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const GpuCompilationEnvironment& this_ = static_cast<const GpuCompilationEnvironment&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* GpuCompilationEnvironment::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const GpuCompilationEnvironment& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:xla.GpuCompilationEnvironment)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // int64 dummy_flag = 1;
          if (this_._internal_dummy_flag() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt64ToArrayWithField<1>(
                    stream, this_._internal_dummy_flag(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:xla.GpuCompilationEnvironment)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t GpuCompilationEnvironment::ByteSizeLong(const MessageLite& base) {
          const GpuCompilationEnvironment& this_ = static_cast<const GpuCompilationEnvironment&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t GpuCompilationEnvironment::ByteSizeLong() const {
          const GpuCompilationEnvironment& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:xla.GpuCompilationEnvironment)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // int64 dummy_flag = 1;
            if (this_._internal_dummy_flag() != 0) {
              total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
                  this_._internal_dummy_flag());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void GpuCompilationEnvironment::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<GpuCompilationEnvironment*>(&to_msg);
  auto& from = static_cast<const GpuCompilationEnvironment&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xla.GpuCompilationEnvironment)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_dummy_flag() != 0) {
    _this->_impl_.dummy_flag_ = from._impl_.dummy_flag_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GpuCompilationEnvironment::CopyFrom(const GpuCompilationEnvironment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.GpuCompilationEnvironment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void GpuCompilationEnvironment::InternalSwap(GpuCompilationEnvironment* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        swap(_impl_.dummy_flag_, other->_impl_.dummy_flag_);
}

::google::protobuf::Metadata GpuCompilationEnvironment::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ShardableValueUpdatePairProto::_Internal {
 public:
};

ShardableValueUpdatePairProto::ShardableValueUpdatePairProto(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:xla.ShardableValueUpdatePairProto)
}
inline PROTOBUF_NDEBUG_INLINE ShardableValueUpdatePairProto::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::xla::ShardableValueUpdatePairProto& from_msg)
      : parameter_shape_index_{visibility, arena, from.parameter_shape_index_},
        _parameter_shape_index_cached_byte_size_{0},
        output_shape_index_{visibility, arena, from.output_shape_index_},
        _output_shape_index_cached_byte_size_{0},
        _cached_size_{0} {}

ShardableValueUpdatePairProto::ShardableValueUpdatePairProto(
    ::google::protobuf::Arena* arena,
    const ShardableValueUpdatePairProto& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ShardableValueUpdatePairProto* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.input_parameter_number_ = from._impl_.input_parameter_number_;

  // @@protoc_insertion_point(copy_constructor:xla.ShardableValueUpdatePairProto)
}
inline PROTOBUF_NDEBUG_INLINE ShardableValueUpdatePairProto::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : parameter_shape_index_{visibility, arena},
        _parameter_shape_index_cached_byte_size_{0},
        output_shape_index_{visibility, arena},
        _output_shape_index_cached_byte_size_{0},
        _cached_size_{0} {}

inline void ShardableValueUpdatePairProto::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.input_parameter_number_ = {};
}
ShardableValueUpdatePairProto::~ShardableValueUpdatePairProto() {
  // @@protoc_insertion_point(destructor:xla.ShardableValueUpdatePairProto)
  SharedDtor(*this);
}
inline void ShardableValueUpdatePairProto::SharedDtor(MessageLite& self) {
  ShardableValueUpdatePairProto& this_ = static_cast<ShardableValueUpdatePairProto&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* ShardableValueUpdatePairProto::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) ShardableValueUpdatePairProto(arena);
}
constexpr auto ShardableValueUpdatePairProto::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(ShardableValueUpdatePairProto, _impl_.parameter_shape_index_) +
          decltype(ShardableValueUpdatePairProto::_impl_.parameter_shape_index_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(ShardableValueUpdatePairProto, _impl_.output_shape_index_) +
          decltype(ShardableValueUpdatePairProto::_impl_.output_shape_index_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(ShardableValueUpdatePairProto), alignof(ShardableValueUpdatePairProto), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&ShardableValueUpdatePairProto::PlacementNew_,
                                 sizeof(ShardableValueUpdatePairProto),
                                 alignof(ShardableValueUpdatePairProto));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull ShardableValueUpdatePairProto::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_ShardableValueUpdatePairProto_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &ShardableValueUpdatePairProto::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<ShardableValueUpdatePairProto>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &ShardableValueUpdatePairProto::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<ShardableValueUpdatePairProto>(), &ShardableValueUpdatePairProto::ByteSizeLong,
            &ShardableValueUpdatePairProto::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(ShardableValueUpdatePairProto, _impl_._cached_size_),
        false,
    },
    &ShardableValueUpdatePairProto::kDescriptorMethods,
    &descriptor_table_xla_2fxla_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* ShardableValueUpdatePairProto::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2> ShardableValueUpdatePairProto::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::xla::ShardableValueUpdatePairProto>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int64 input_parameter_number = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(ShardableValueUpdatePairProto, _impl_.input_parameter_number_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(ShardableValueUpdatePairProto, _impl_.input_parameter_number_)}},
    // repeated int64 parameter_shape_index = 2;
    {::_pbi::TcParser::FastV64P1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(ShardableValueUpdatePairProto, _impl_.parameter_shape_index_)}},
    // repeated int64 output_shape_index = 3;
    {::_pbi::TcParser::FastV64P1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(ShardableValueUpdatePairProto, _impl_.output_shape_index_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int64 input_parameter_number = 1;
    {PROTOBUF_FIELD_OFFSET(ShardableValueUpdatePairProto, _impl_.input_parameter_number_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // repeated int64 parameter_shape_index = 2;
    {PROTOBUF_FIELD_OFFSET(ShardableValueUpdatePairProto, _impl_.parameter_shape_index_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedInt64)},
    // repeated int64 output_shape_index = 3;
    {PROTOBUF_FIELD_OFFSET(ShardableValueUpdatePairProto, _impl_.output_shape_index_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedInt64)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void ShardableValueUpdatePairProto::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.ShardableValueUpdatePairProto)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.parameter_shape_index_.Clear();
  _impl_.output_shape_index_.Clear();
  _impl_.input_parameter_number_ = ::int64_t{0};
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* ShardableValueUpdatePairProto::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const ShardableValueUpdatePairProto& this_ = static_cast<const ShardableValueUpdatePairProto&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* ShardableValueUpdatePairProto::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const ShardableValueUpdatePairProto& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:xla.ShardableValueUpdatePairProto)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // int64 input_parameter_number = 1;
          if (this_._internal_input_parameter_number() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt64ToArrayWithField<1>(
                    stream, this_._internal_input_parameter_number(), target);
          }

          // repeated int64 parameter_shape_index = 2;
          {
            int byte_size = this_._impl_._parameter_shape_index_cached_byte_size_.Get();
            if (byte_size > 0) {
              target = stream->WriteInt64Packed(
                  2, this_._internal_parameter_shape_index(), byte_size, target);
            }
          }

          // repeated int64 output_shape_index = 3;
          {
            int byte_size = this_._impl_._output_shape_index_cached_byte_size_.Get();
            if (byte_size > 0) {
              target = stream->WriteInt64Packed(
                  3, this_._internal_output_shape_index(), byte_size, target);
            }
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:xla.ShardableValueUpdatePairProto)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t ShardableValueUpdatePairProto::ByteSizeLong(const MessageLite& base) {
          const ShardableValueUpdatePairProto& this_ = static_cast<const ShardableValueUpdatePairProto&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t ShardableValueUpdatePairProto::ByteSizeLong() const {
          const ShardableValueUpdatePairProto& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:xla.ShardableValueUpdatePairProto)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated int64 parameter_shape_index = 2;
            {
              total_size +=
                  ::_pbi::WireFormatLite::Int64SizeWithPackedTagSize(
                      this_._internal_parameter_shape_index(), 1,
                      this_._impl_._parameter_shape_index_cached_byte_size_);
            }
            // repeated int64 output_shape_index = 3;
            {
              total_size +=
                  ::_pbi::WireFormatLite::Int64SizeWithPackedTagSize(
                      this_._internal_output_shape_index(), 1,
                      this_._impl_._output_shape_index_cached_byte_size_);
            }
          }
           {
            // int64 input_parameter_number = 1;
            if (this_._internal_input_parameter_number() != 0) {
              total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
                  this_._internal_input_parameter_number());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void ShardableValueUpdatePairProto::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ShardableValueUpdatePairProto*>(&to_msg);
  auto& from = static_cast<const ShardableValueUpdatePairProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xla.ShardableValueUpdatePairProto)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_parameter_shape_index()->MergeFrom(from._internal_parameter_shape_index());
  _this->_internal_mutable_output_shape_index()->MergeFrom(from._internal_output_shape_index());
  if (from._internal_input_parameter_number() != 0) {
    _this->_impl_.input_parameter_number_ = from._impl_.input_parameter_number_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ShardableValueUpdatePairProto::CopyFrom(const ShardableValueUpdatePairProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.ShardableValueUpdatePairProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ShardableValueUpdatePairProto::InternalSwap(ShardableValueUpdatePairProto* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.parameter_shape_index_.InternalSwap(&other->_impl_.parameter_shape_index_);
  _impl_.output_shape_index_.InternalSwap(&other->_impl_.output_shape_index_);
        swap(_impl_.input_parameter_number_, other->_impl_.input_parameter_number_);
}

::google::protobuf::Metadata ShardableValueUpdatePairProto::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ExecutionOptions::_Internal {
 public:
  using HasBits =
      decltype(std::declval<ExecutionOptions>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(ExecutionOptions, _impl_._has_bits_);
};

void ExecutionOptions::clear_shape_with_output_layout() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.shape_with_output_layout_ != nullptr) _impl_.shape_with_output_layout_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void ExecutionOptions::clear_device_handles() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.device_handles_.Clear();
}
void ExecutionOptions::clear_device_assignment() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.device_assignment_ != nullptr) _impl_.device_assignment_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
ExecutionOptions::ExecutionOptions(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:xla.ExecutionOptions)
}
inline PROTOBUF_NDEBUG_INLINE ExecutionOptions::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::xla::ExecutionOptions& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        device_handles_{visibility, arena, from.device_handles_},
        allow_spmd_sharding_propagation_to_output_{visibility, arena, from.allow_spmd_sharding_propagation_to_output_},
        auto_spmd_partitioning_mesh_shape_{visibility, arena, from.auto_spmd_partitioning_mesh_shape_},
        _auto_spmd_partitioning_mesh_shape_cached_byte_size_{0},
        auto_spmd_partitioning_mesh_ids_{visibility, arena, from.auto_spmd_partitioning_mesh_ids_},
        _auto_spmd_partitioning_mesh_ids_cached_byte_size_{0},
        param_requires_broadcast_via_collectives_{visibility, arena, from.param_requires_broadcast_via_collectives_},
        shardable_value_update_pairs_{visibility, arena, from.shardable_value_update_pairs_},
        allow_spmd_sharding_propagation_to_parameters_{visibility, arena, from.allow_spmd_sharding_propagation_to_parameters_},
        fdo_profile_(arena, from.fdo_profile_) {}

ExecutionOptions::ExecutionOptions(
    ::google::protobuf::Arena* arena,
    const ExecutionOptions& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ExecutionOptions* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.shape_with_output_layout_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::xla::ShapeProto>(
                              arena, *from._impl_.shape_with_output_layout_)
                        : nullptr;
  _impl_.debug_options_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::xla::DebugOptions>(
                              arena, *from._impl_.debug_options_)
                        : nullptr;
  _impl_.device_assignment_ = (cached_has_bits & 0x00000004u) ? ::google::protobuf::Message::CopyConstruct<::xla::DeviceAssignmentProto>(
                              arena, *from._impl_.device_assignment_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, seed_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, seed_),
           offsetof(Impl_, use_shardy_partitioner_) -
               offsetof(Impl_, seed_) +
               sizeof(Impl_::use_shardy_partitioner_));

  // @@protoc_insertion_point(copy_constructor:xla.ExecutionOptions)
}
inline PROTOBUF_NDEBUG_INLINE ExecutionOptions::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        device_handles_{visibility, arena},
        allow_spmd_sharding_propagation_to_output_{visibility, arena},
        auto_spmd_partitioning_mesh_shape_{visibility, arena},
        _auto_spmd_partitioning_mesh_shape_cached_byte_size_{0},
        auto_spmd_partitioning_mesh_ids_{visibility, arena},
        _auto_spmd_partitioning_mesh_ids_cached_byte_size_{0},
        param_requires_broadcast_via_collectives_{visibility, arena},
        shardable_value_update_pairs_{visibility, arena},
        allow_spmd_sharding_propagation_to_parameters_{visibility, arena},
        fdo_profile_(arena) {}

inline void ExecutionOptions::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, shape_with_output_layout_),
           0,
           offsetof(Impl_, use_shardy_partitioner_) -
               offsetof(Impl_, shape_with_output_layout_) +
               sizeof(Impl_::use_shardy_partitioner_));
}
ExecutionOptions::~ExecutionOptions() {
  // @@protoc_insertion_point(destructor:xla.ExecutionOptions)
  SharedDtor(*this);
}
inline void ExecutionOptions::SharedDtor(MessageLite& self) {
  ExecutionOptions& this_ = static_cast<ExecutionOptions&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.fdo_profile_.Destroy();
  delete this_._impl_.shape_with_output_layout_;
  delete this_._impl_.debug_options_;
  delete this_._impl_.device_assignment_;
  this_._impl_.~Impl_();
}

inline void* ExecutionOptions::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) ExecutionOptions(arena);
}
constexpr auto ExecutionOptions::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(ExecutionOptions, _impl_.device_handles_) +
          decltype(ExecutionOptions::_impl_.device_handles_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(ExecutionOptions, _impl_.auto_spmd_partitioning_mesh_shape_) +
          decltype(ExecutionOptions::_impl_.auto_spmd_partitioning_mesh_shape_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(ExecutionOptions, _impl_.auto_spmd_partitioning_mesh_ids_) +
          decltype(ExecutionOptions::_impl_.auto_spmd_partitioning_mesh_ids_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(ExecutionOptions, _impl_.allow_spmd_sharding_propagation_to_parameters_) +
          decltype(ExecutionOptions::_impl_.allow_spmd_sharding_propagation_to_parameters_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(ExecutionOptions, _impl_.allow_spmd_sharding_propagation_to_output_) +
          decltype(ExecutionOptions::_impl_.allow_spmd_sharding_propagation_to_output_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(ExecutionOptions, _impl_.param_requires_broadcast_via_collectives_) +
          decltype(ExecutionOptions::_impl_.param_requires_broadcast_via_collectives_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(ExecutionOptions, _impl_.shardable_value_update_pairs_) +
          decltype(ExecutionOptions::_impl_.shardable_value_update_pairs_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(ExecutionOptions), alignof(ExecutionOptions), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&ExecutionOptions::PlacementNew_,
                                 sizeof(ExecutionOptions),
                                 alignof(ExecutionOptions));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull ExecutionOptions::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_ExecutionOptions_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &ExecutionOptions::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<ExecutionOptions>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &ExecutionOptions::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<ExecutionOptions>(), &ExecutionOptions::ByteSizeLong,
            &ExecutionOptions::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(ExecutionOptions, _impl_._cached_size_),
        false,
    },
    &ExecutionOptions::kDescriptorMethods,
    &descriptor_table_xla_2fxla_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* ExecutionOptions::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 22, 5, 0, 2> ExecutionOptions::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ExecutionOptions, _impl_._has_bits_),
    0, // no _extensions_
    24, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4278194177,  // skipmap
    offsetof(decltype(_table_), field_entries),
    22,  // num_field_entries
    5,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::xla::ExecutionOptions>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // .xla.ShapeProto shape_with_output_layout = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(ExecutionOptions, _impl_.shape_with_output_layout_)}},
    // uint64 seed = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(ExecutionOptions, _impl_.seed_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(ExecutionOptions, _impl_.seed_)}},
    // .xla.DebugOptions debug_options = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 1, 1, PROTOBUF_FIELD_OFFSET(ExecutionOptions, _impl_.debug_options_)}},
    // repeated .xla.DeviceHandle device_handles = 5;
    {::_pbi::TcParser::FastMtR1,
     {42, 63, 2, PROTOBUF_FIELD_OFFSET(ExecutionOptions, _impl_.device_handles_)}},
    // int32 num_replicas = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ExecutionOptions, _impl_.num_replicas_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(ExecutionOptions, _impl_.num_replicas_)}},
    // .xla.DeviceAssignmentProto device_assignment = 7;
    {::_pbi::TcParser::FastMtS1,
     {58, 2, 3, PROTOBUF_FIELD_OFFSET(ExecutionOptions, _impl_.device_assignment_)}},
    // bool alias_passthrough_params = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ExecutionOptions, _impl_.alias_passthrough_params_), 63>(),
     {64, 63, 0, PROTOBUF_FIELD_OFFSET(ExecutionOptions, _impl_.alias_passthrough_params_)}},
    // int32 num_partitions = 9;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ExecutionOptions, _impl_.num_partitions_), 63>(),
     {72, 63, 0, PROTOBUF_FIELD_OFFSET(ExecutionOptions, _impl_.num_partitions_)}},
    // int32 launch_id = 10;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ExecutionOptions, _impl_.launch_id_), 63>(),
     {80, 63, 0, PROTOBUF_FIELD_OFFSET(ExecutionOptions, _impl_.launch_id_)}},
    // bool use_spmd_partitioning = 11;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ExecutionOptions, _impl_.use_spmd_partitioning_), 63>(),
     {88, 63, 0, PROTOBUF_FIELD_OFFSET(ExecutionOptions, _impl_.use_spmd_partitioning_)}},
    // bool deduplicate_hlo = 12;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ExecutionOptions, _impl_.deduplicate_hlo_), 63>(),
     {96, 63, 0, PROTOBUF_FIELD_OFFSET(ExecutionOptions, _impl_.deduplicate_hlo_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // repeated bool allow_spmd_sharding_propagation_to_output = 14;
    {::_pbi::TcParser::FastV8P1,
     {114, 63, 0, PROTOBUF_FIELD_OFFSET(ExecutionOptions, _impl_.allow_spmd_sharding_propagation_to_output_)}},
    // bool use_auto_spmd_partitioning = 15;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ExecutionOptions, _impl_.use_auto_spmd_partitioning_), 63>(),
     {120, 63, 0, PROTOBUF_FIELD_OFFSET(ExecutionOptions, _impl_.use_auto_spmd_partitioning_)}},
    // repeated int64 auto_spmd_partitioning_mesh_shape = 16;
    {::_pbi::TcParser::FastV64P2,
     {386, 63, 0, PROTOBUF_FIELD_OFFSET(ExecutionOptions, _impl_.auto_spmd_partitioning_mesh_shape_)}},
    // repeated int64 auto_spmd_partitioning_mesh_ids = 17;
    {::_pbi::TcParser::FastV64P2,
     {394, 63, 0, PROTOBUF_FIELD_OFFSET(ExecutionOptions, _impl_.auto_spmd_partitioning_mesh_ids_)}},
    // repeated bool param_requires_broadcast_via_collectives = 18;
    {::_pbi::TcParser::FastV8P2,
     {402, 63, 0, PROTOBUF_FIELD_OFFSET(ExecutionOptions, _impl_.param_requires_broadcast_via_collectives_)}},
    // bool allow_separate_sharding_programs = 19;
    {::_pbi::TcParser::FastV8S2,
     {408, 63, 0, PROTOBUF_FIELD_OFFSET(ExecutionOptions, _impl_.allow_separate_sharding_programs_)}},
    // repeated .xla.ShardableValueUpdatePairProto shardable_value_update_pairs = 20;
    {::_pbi::TcParser::FastMtR2,
     {418, 63, 4, PROTOBUF_FIELD_OFFSET(ExecutionOptions, _impl_.shardable_value_update_pairs_)}},
    // bytes fdo_profile = 21;
    {::_pbi::TcParser::FastBS2,
     {426, 63, 0, PROTOBUF_FIELD_OFFSET(ExecutionOptions, _impl_.fdo_profile_)}},
    // int64 device_memory_size = 22;
    {::_pbi::TcParser::FastV64S2,
     {432, 63, 0, PROTOBUF_FIELD_OFFSET(ExecutionOptions, _impl_.device_memory_size_)}},
    // repeated bool allow_spmd_sharding_propagation_to_parameters = 23;
    {::_pbi::TcParser::FastV8P2,
     {442, 63, 0, PROTOBUF_FIELD_OFFSET(ExecutionOptions, _impl_.allow_spmd_sharding_propagation_to_parameters_)}},
    // bool use_shardy_partitioner = 24;
    {::_pbi::TcParser::FastV8S2,
     {448, 63, 0, PROTOBUF_FIELD_OFFSET(ExecutionOptions, _impl_.use_shardy_partitioner_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .xla.ShapeProto shape_with_output_layout = 2;
    {PROTOBUF_FIELD_OFFSET(ExecutionOptions, _impl_.shape_with_output_layout_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // uint64 seed = 3;
    {PROTOBUF_FIELD_OFFSET(ExecutionOptions, _impl_.seed_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
    // .xla.DebugOptions debug_options = 4;
    {PROTOBUF_FIELD_OFFSET(ExecutionOptions, _impl_.debug_options_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .xla.DeviceHandle device_handles = 5;
    {PROTOBUF_FIELD_OFFSET(ExecutionOptions, _impl_.device_handles_), -1, 2,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // int32 num_replicas = 6;
    {PROTOBUF_FIELD_OFFSET(ExecutionOptions, _impl_.num_replicas_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .xla.DeviceAssignmentProto device_assignment = 7;
    {PROTOBUF_FIELD_OFFSET(ExecutionOptions, _impl_.device_assignment_), _Internal::kHasBitsOffset + 2, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // bool alias_passthrough_params = 8;
    {PROTOBUF_FIELD_OFFSET(ExecutionOptions, _impl_.alias_passthrough_params_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // int32 num_partitions = 9;
    {PROTOBUF_FIELD_OFFSET(ExecutionOptions, _impl_.num_partitions_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 launch_id = 10;
    {PROTOBUF_FIELD_OFFSET(ExecutionOptions, _impl_.launch_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // bool use_spmd_partitioning = 11;
    {PROTOBUF_FIELD_OFFSET(ExecutionOptions, _impl_.use_spmd_partitioning_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool deduplicate_hlo = 12;
    {PROTOBUF_FIELD_OFFSET(ExecutionOptions, _impl_.deduplicate_hlo_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // repeated bool allow_spmd_sharding_propagation_to_output = 14;
    {PROTOBUF_FIELD_OFFSET(ExecutionOptions, _impl_.allow_spmd_sharding_propagation_to_output_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedBool)},
    // bool use_auto_spmd_partitioning = 15;
    {PROTOBUF_FIELD_OFFSET(ExecutionOptions, _impl_.use_auto_spmd_partitioning_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // repeated int64 auto_spmd_partitioning_mesh_shape = 16;
    {PROTOBUF_FIELD_OFFSET(ExecutionOptions, _impl_.auto_spmd_partitioning_mesh_shape_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedInt64)},
    // repeated int64 auto_spmd_partitioning_mesh_ids = 17;
    {PROTOBUF_FIELD_OFFSET(ExecutionOptions, _impl_.auto_spmd_partitioning_mesh_ids_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedInt64)},
    // repeated bool param_requires_broadcast_via_collectives = 18;
    {PROTOBUF_FIELD_OFFSET(ExecutionOptions, _impl_.param_requires_broadcast_via_collectives_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedBool)},
    // bool allow_separate_sharding_programs = 19;
    {PROTOBUF_FIELD_OFFSET(ExecutionOptions, _impl_.allow_separate_sharding_programs_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // repeated .xla.ShardableValueUpdatePairProto shardable_value_update_pairs = 20;
    {PROTOBUF_FIELD_OFFSET(ExecutionOptions, _impl_.shardable_value_update_pairs_), -1, 4,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // bytes fdo_profile = 21;
    {PROTOBUF_FIELD_OFFSET(ExecutionOptions, _impl_.fdo_profile_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // int64 device_memory_size = 22;
    {PROTOBUF_FIELD_OFFSET(ExecutionOptions, _impl_.device_memory_size_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // repeated bool allow_spmd_sharding_propagation_to_parameters = 23;
    {PROTOBUF_FIELD_OFFSET(ExecutionOptions, _impl_.allow_spmd_sharding_propagation_to_parameters_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedBool)},
    // bool use_shardy_partitioner = 24;
    {PROTOBUF_FIELD_OFFSET(ExecutionOptions, _impl_.use_shardy_partitioner_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }}, {{
    {::_pbi::TcParser::GetTable<::xla::ShapeProto>()},
    {::_pbi::TcParser::GetTable<::xla::DebugOptions>()},
    {::_pbi::TcParser::GetTable<::xla::DeviceHandle>()},
    {::_pbi::TcParser::GetTable<::xla::DeviceAssignmentProto>()},
    {::_pbi::TcParser::GetTable<::xla::ShardableValueUpdatePairProto>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void ExecutionOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.ExecutionOptions)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.device_handles_.Clear();
  _impl_.allow_spmd_sharding_propagation_to_output_.Clear();
  _impl_.auto_spmd_partitioning_mesh_shape_.Clear();
  _impl_.auto_spmd_partitioning_mesh_ids_.Clear();
  _impl_.param_requires_broadcast_via_collectives_.Clear();
  _impl_.shardable_value_update_pairs_.Clear();
  _impl_.allow_spmd_sharding_propagation_to_parameters_.Clear();
  _impl_.fdo_profile_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.shape_with_output_layout_ != nullptr);
      _impl_.shape_with_output_layout_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.debug_options_ != nullptr);
      _impl_.debug_options_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.device_assignment_ != nullptr);
      _impl_.device_assignment_->Clear();
    }
  }
  ::memset(&_impl_.seed_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.use_shardy_partitioner_) -
      reinterpret_cast<char*>(&_impl_.seed_)) + sizeof(_impl_.use_shardy_partitioner_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* ExecutionOptions::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const ExecutionOptions& this_ = static_cast<const ExecutionOptions&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* ExecutionOptions::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const ExecutionOptions& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:xla.ExecutionOptions)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .xla.ShapeProto shape_with_output_layout = 2;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.shape_with_output_layout_, this_._impl_.shape_with_output_layout_->GetCachedSize(), target,
                stream);
          }

          // uint64 seed = 3;
          if (this_._internal_seed() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
                3, this_._internal_seed(), target);
          }

          // .xla.DebugOptions debug_options = 4;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                4, *this_._impl_.debug_options_, this_._impl_.debug_options_->GetCachedSize(), target,
                stream);
          }

          // repeated .xla.DeviceHandle device_handles = 5;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_device_handles_size());
               i < n; i++) {
            const auto& repfield = this_._internal_device_handles().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    5, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          // int32 num_replicas = 6;
          if (this_._internal_num_replicas() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<6>(
                    stream, this_._internal_num_replicas(), target);
          }

          // .xla.DeviceAssignmentProto device_assignment = 7;
          if (cached_has_bits & 0x00000004u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                7, *this_._impl_.device_assignment_, this_._impl_.device_assignment_->GetCachedSize(), target,
                stream);
          }

          // bool alias_passthrough_params = 8;
          if (this_._internal_alias_passthrough_params() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                8, this_._internal_alias_passthrough_params(), target);
          }

          // int32 num_partitions = 9;
          if (this_._internal_num_partitions() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<9>(
                    stream, this_._internal_num_partitions(), target);
          }

          // int32 launch_id = 10;
          if (this_._internal_launch_id() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<10>(
                    stream, this_._internal_launch_id(), target);
          }

          // bool use_spmd_partitioning = 11;
          if (this_._internal_use_spmd_partitioning() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                11, this_._internal_use_spmd_partitioning(), target);
          }

          // bool deduplicate_hlo = 12;
          if (this_._internal_deduplicate_hlo() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                12, this_._internal_deduplicate_hlo(), target);
          }

          // repeated bool allow_spmd_sharding_propagation_to_output = 14;
          if (this_._internal_allow_spmd_sharding_propagation_to_output_size() > 0) {
            target = stream->WriteFixedPacked(14, this_._internal_allow_spmd_sharding_propagation_to_output(), target);
          }

          // bool use_auto_spmd_partitioning = 15;
          if (this_._internal_use_auto_spmd_partitioning() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                15, this_._internal_use_auto_spmd_partitioning(), target);
          }

          // repeated int64 auto_spmd_partitioning_mesh_shape = 16;
          {
            int byte_size = this_._impl_._auto_spmd_partitioning_mesh_shape_cached_byte_size_.Get();
            if (byte_size > 0) {
              target = stream->WriteInt64Packed(
                  16, this_._internal_auto_spmd_partitioning_mesh_shape(), byte_size, target);
            }
          }

          // repeated int64 auto_spmd_partitioning_mesh_ids = 17;
          {
            int byte_size = this_._impl_._auto_spmd_partitioning_mesh_ids_cached_byte_size_.Get();
            if (byte_size > 0) {
              target = stream->WriteInt64Packed(
                  17, this_._internal_auto_spmd_partitioning_mesh_ids(), byte_size, target);
            }
          }

          // repeated bool param_requires_broadcast_via_collectives = 18;
          if (this_._internal_param_requires_broadcast_via_collectives_size() > 0) {
            target = stream->WriteFixedPacked(18, this_._internal_param_requires_broadcast_via_collectives(), target);
          }

          // bool allow_separate_sharding_programs = 19;
          if (this_._internal_allow_separate_sharding_programs() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                19, this_._internal_allow_separate_sharding_programs(), target);
          }

          // repeated .xla.ShardableValueUpdatePairProto shardable_value_update_pairs = 20;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_shardable_value_update_pairs_size());
               i < n; i++) {
            const auto& repfield = this_._internal_shardable_value_update_pairs().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    20, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          // bytes fdo_profile = 21;
          if (!this_._internal_fdo_profile().empty()) {
            const std::string& _s = this_._internal_fdo_profile();
            target = stream->WriteBytesMaybeAliased(21, _s, target);
          }

          // int64 device_memory_size = 22;
          if (this_._internal_device_memory_size() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt64ToArray(
                22, this_._internal_device_memory_size(), target);
          }

          // repeated bool allow_spmd_sharding_propagation_to_parameters = 23;
          if (this_._internal_allow_spmd_sharding_propagation_to_parameters_size() > 0) {
            target = stream->WriteFixedPacked(23, this_._internal_allow_spmd_sharding_propagation_to_parameters(), target);
          }

          // bool use_shardy_partitioner = 24;
          if (this_._internal_use_shardy_partitioner() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                24, this_._internal_use_shardy_partitioner(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:xla.ExecutionOptions)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t ExecutionOptions::ByteSizeLong(const MessageLite& base) {
          const ExecutionOptions& this_ = static_cast<const ExecutionOptions&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t ExecutionOptions::ByteSizeLong() const {
          const ExecutionOptions& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:xla.ExecutionOptions)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .xla.DeviceHandle device_handles = 5;
            {
              total_size += 1UL * this_._internal_device_handles_size();
              for (const auto& msg : this_._internal_device_handles()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
            // repeated bool allow_spmd_sharding_propagation_to_output = 14;
            {
              std::size_t data_size = std::size_t{1} *
                  ::_pbi::FromIntSize(this_._internal_allow_spmd_sharding_propagation_to_output_size());
              std::size_t tag_size = data_size == 0
                  ? 0
                  : 1 + ::_pbi::WireFormatLite::Int32Size(
                                      static_cast<int32_t>(data_size));
              total_size += tag_size + data_size;
            }
            // repeated int64 auto_spmd_partitioning_mesh_shape = 16;
            {
              total_size +=
                  ::_pbi::WireFormatLite::Int64SizeWithPackedTagSize(
                      this_._internal_auto_spmd_partitioning_mesh_shape(), 2,
                      this_._impl_._auto_spmd_partitioning_mesh_shape_cached_byte_size_);
            }
            // repeated int64 auto_spmd_partitioning_mesh_ids = 17;
            {
              total_size +=
                  ::_pbi::WireFormatLite::Int64SizeWithPackedTagSize(
                      this_._internal_auto_spmd_partitioning_mesh_ids(), 2,
                      this_._impl_._auto_spmd_partitioning_mesh_ids_cached_byte_size_);
            }
            // repeated bool param_requires_broadcast_via_collectives = 18;
            {
              std::size_t data_size = std::size_t{1} *
                  ::_pbi::FromIntSize(this_._internal_param_requires_broadcast_via_collectives_size());
              std::size_t tag_size = data_size == 0
                  ? 0
                  : 2 + ::_pbi::WireFormatLite::Int32Size(
                                      static_cast<int32_t>(data_size));
              total_size += tag_size + data_size;
            }
            // repeated .xla.ShardableValueUpdatePairProto shardable_value_update_pairs = 20;
            {
              total_size += 2UL * this_._internal_shardable_value_update_pairs_size();
              for (const auto& msg : this_._internal_shardable_value_update_pairs()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
            // repeated bool allow_spmd_sharding_propagation_to_parameters = 23;
            {
              std::size_t data_size = std::size_t{1} *
                  ::_pbi::FromIntSize(this_._internal_allow_spmd_sharding_propagation_to_parameters_size());
              std::size_t tag_size = data_size == 0
                  ? 0
                  : 2 + ::_pbi::WireFormatLite::Int32Size(
                                      static_cast<int32_t>(data_size));
              total_size += tag_size + data_size;
            }
          }
           {
            // bytes fdo_profile = 21;
            if (!this_._internal_fdo_profile().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                              this_._internal_fdo_profile());
            }
          }
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000007u) {
            // .xla.ShapeProto shape_with_output_layout = 2;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.shape_with_output_layout_);
            }
            // .xla.DebugOptions debug_options = 4;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.debug_options_);
            }
            // .xla.DeviceAssignmentProto device_assignment = 7;
            if (cached_has_bits & 0x00000004u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.device_assignment_);
            }
          }
           {
            // uint64 seed = 3;
            if (this_._internal_seed() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
                  this_._internal_seed());
            }
            // int32 num_replicas = 6;
            if (this_._internal_num_replicas() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_num_replicas());
            }
            // int32 num_partitions = 9;
            if (this_._internal_num_partitions() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_num_partitions());
            }
            // int32 launch_id = 10;
            if (this_._internal_launch_id() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_launch_id());
            }
            // bool alias_passthrough_params = 8;
            if (this_._internal_alias_passthrough_params() != 0) {
              total_size += 2;
            }
            // bool use_spmd_partitioning = 11;
            if (this_._internal_use_spmd_partitioning() != 0) {
              total_size += 2;
            }
            // bool use_auto_spmd_partitioning = 15;
            if (this_._internal_use_auto_spmd_partitioning() != 0) {
              total_size += 2;
            }
            // bool deduplicate_hlo = 12;
            if (this_._internal_deduplicate_hlo() != 0) {
              total_size += 2;
            }
            // int64 device_memory_size = 22;
            if (this_._internal_device_memory_size() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int64Size(
                                              this_._internal_device_memory_size());
            }
            // bool allow_separate_sharding_programs = 19;
            if (this_._internal_allow_separate_sharding_programs() != 0) {
              total_size += 3;
            }
            // bool use_shardy_partitioner = 24;
            if (this_._internal_use_shardy_partitioner() != 0) {
              total_size += 3;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void ExecutionOptions::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ExecutionOptions*>(&to_msg);
  auto& from = static_cast<const ExecutionOptions&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:xla.ExecutionOptions)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_device_handles()->MergeFrom(
      from._internal_device_handles());
  _this->_internal_mutable_allow_spmd_sharding_propagation_to_output()->MergeFrom(from._internal_allow_spmd_sharding_propagation_to_output());
  _this->_internal_mutable_auto_spmd_partitioning_mesh_shape()->MergeFrom(from._internal_auto_spmd_partitioning_mesh_shape());
  _this->_internal_mutable_auto_spmd_partitioning_mesh_ids()->MergeFrom(from._internal_auto_spmd_partitioning_mesh_ids());
  _this->_internal_mutable_param_requires_broadcast_via_collectives()->MergeFrom(from._internal_param_requires_broadcast_via_collectives());
  _this->_internal_mutable_shardable_value_update_pairs()->MergeFrom(
      from._internal_shardable_value_update_pairs());
  _this->_internal_mutable_allow_spmd_sharding_propagation_to_parameters()->MergeFrom(from._internal_allow_spmd_sharding_propagation_to_parameters());
  if (!from._internal_fdo_profile().empty()) {
    _this->_internal_set_fdo_profile(from._internal_fdo_profile());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.shape_with_output_layout_ != nullptr);
      if (_this->_impl_.shape_with_output_layout_ == nullptr) {
        _this->_impl_.shape_with_output_layout_ =
            ::google::protobuf::Message::CopyConstruct<::xla::ShapeProto>(arena, *from._impl_.shape_with_output_layout_);
      } else {
        _this->_impl_.shape_with_output_layout_->MergeFrom(*from._impl_.shape_with_output_layout_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.debug_options_ != nullptr);
      if (_this->_impl_.debug_options_ == nullptr) {
        _this->_impl_.debug_options_ =
            ::google::protobuf::Message::CopyConstruct<::xla::DebugOptions>(arena, *from._impl_.debug_options_);
      } else {
        _this->_impl_.debug_options_->MergeFrom(*from._impl_.debug_options_);
      }
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(from._impl_.device_assignment_ != nullptr);
      if (_this->_impl_.device_assignment_ == nullptr) {
        _this->_impl_.device_assignment_ =
            ::google::protobuf::Message::CopyConstruct<::xla::DeviceAssignmentProto>(arena, *from._impl_.device_assignment_);
      } else {
        _this->_impl_.device_assignment_->MergeFrom(*from._impl_.device_assignment_);
      }
    }
  }
  if (from._internal_seed() != 0) {
    _this->_impl_.seed_ = from._impl_.seed_;
  }
  if (from._internal_num_replicas() != 0) {
    _this->_impl_.num_replicas_ = from._impl_.num_replicas_;
  }
  if (from._internal_num_partitions() != 0) {
    _this->_impl_.num_partitions_ = from._impl_.num_partitions_;
  }
  if (from._internal_launch_id() != 0) {
    _this->_impl_.launch_id_ = from._impl_.launch_id_;
  }
  if (from._internal_alias_passthrough_params() != 0) {
    _this->_impl_.alias_passthrough_params_ = from._impl_.alias_passthrough_params_;
  }
  if (from._internal_use_spmd_partitioning() != 0) {
    _this->_impl_.use_spmd_partitioning_ = from._impl_.use_spmd_partitioning_;
  }
  if (from._internal_use_auto_spmd_partitioning() != 0) {
    _this->_impl_.use_auto_spmd_partitioning_ = from._impl_.use_auto_spmd_partitioning_;
  }
  if (from._internal_deduplicate_hlo() != 0) {
    _this->_impl_.deduplicate_hlo_ = from._impl_.deduplicate_hlo_;
  }
  if (from._internal_device_memory_size() != 0) {
    _this->_impl_.device_memory_size_ = from._impl_.device_memory_size_;
  }
  if (from._internal_allow_separate_sharding_programs() != 0) {
    _this->_impl_.allow_separate_sharding_programs_ = from._impl_.allow_separate_sharding_programs_;
  }
  if (from._internal_use_shardy_partitioner() != 0) {
    _this->_impl_.use_shardy_partitioner_ = from._impl_.use_shardy_partitioner_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ExecutionOptions::CopyFrom(const ExecutionOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.ExecutionOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ExecutionOptions::InternalSwap(ExecutionOptions* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.device_handles_.InternalSwap(&other->_impl_.device_handles_);
  _impl_.allow_spmd_sharding_propagation_to_output_.InternalSwap(&other->_impl_.allow_spmd_sharding_propagation_to_output_);
  _impl_.auto_spmd_partitioning_mesh_shape_.InternalSwap(&other->_impl_.auto_spmd_partitioning_mesh_shape_);
  _impl_.auto_spmd_partitioning_mesh_ids_.InternalSwap(&other->_impl_.auto_spmd_partitioning_mesh_ids_);
  _impl_.param_requires_broadcast_via_collectives_.InternalSwap(&other->_impl_.param_requires_broadcast_via_collectives_);
  _impl_.shardable_value_update_pairs_.InternalSwap(&other->_impl_.shardable_value_update_pairs_);
  _impl_.allow_spmd_sharding_propagation_to_parameters_.InternalSwap(&other->_impl_.allow_spmd_sharding_propagation_to_parameters_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.fdo_profile_, &other->_impl_.fdo_profile_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ExecutionOptions, _impl_.use_shardy_partitioner_)
      + sizeof(ExecutionOptions::_impl_.use_shardy_partitioner_)
      - PROTOBUF_FIELD_OFFSET(ExecutionOptions, _impl_.shape_with_output_layout_)>(
          reinterpret_cast<char*>(&_impl_.shape_with_output_layout_),
          reinterpret_cast<char*>(&other->_impl_.shape_with_output_layout_));
}

::google::protobuf::Metadata ExecutionOptions::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class HloModuleConfigProto_BoolList::_Internal {
 public:
};

HloModuleConfigProto_BoolList::HloModuleConfigProto_BoolList(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:xla.HloModuleConfigProto.BoolList)
}
inline PROTOBUF_NDEBUG_INLINE HloModuleConfigProto_BoolList::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::xla::HloModuleConfigProto_BoolList& from_msg)
      : vals_{visibility, arena, from.vals_},
        _cached_size_{0} {}

HloModuleConfigProto_BoolList::HloModuleConfigProto_BoolList(
    ::google::protobuf::Arena* arena,
    const HloModuleConfigProto_BoolList& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  HloModuleConfigProto_BoolList* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:xla.HloModuleConfigProto.BoolList)
}
inline PROTOBUF_NDEBUG_INLINE HloModuleConfigProto_BoolList::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : vals_{visibility, arena},
        _cached_size_{0} {}

inline void HloModuleConfigProto_BoolList::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
HloModuleConfigProto_BoolList::~HloModuleConfigProto_BoolList() {
  // @@protoc_insertion_point(destructor:xla.HloModuleConfigProto.BoolList)
  SharedDtor(*this);
}
inline void HloModuleConfigProto_BoolList::SharedDtor(MessageLite& self) {
  HloModuleConfigProto_BoolList& this_ = static_cast<HloModuleConfigProto_BoolList&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* HloModuleConfigProto_BoolList::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) HloModuleConfigProto_BoolList(arena);
}
constexpr auto HloModuleConfigProto_BoolList::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(HloModuleConfigProto_BoolList, _impl_.vals_) +
          decltype(HloModuleConfigProto_BoolList::_impl_.vals_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(HloModuleConfigProto_BoolList), alignof(HloModuleConfigProto_BoolList), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&HloModuleConfigProto_BoolList::PlacementNew_,
                                 sizeof(HloModuleConfigProto_BoolList),
                                 alignof(HloModuleConfigProto_BoolList));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull HloModuleConfigProto_BoolList::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_HloModuleConfigProto_BoolList_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &HloModuleConfigProto_BoolList::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<HloModuleConfigProto_BoolList>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &HloModuleConfigProto_BoolList::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<HloModuleConfigProto_BoolList>(), &HloModuleConfigProto_BoolList::ByteSizeLong,
            &HloModuleConfigProto_BoolList::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(HloModuleConfigProto_BoolList, _impl_._cached_size_),
        false,
    },
    &HloModuleConfigProto_BoolList::kDescriptorMethods,
    &descriptor_table_xla_2fxla_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* HloModuleConfigProto_BoolList::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> HloModuleConfigProto_BoolList::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::xla::HloModuleConfigProto_BoolList>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated bool vals = 1;
    {::_pbi::TcParser::FastV8P1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(HloModuleConfigProto_BoolList, _impl_.vals_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated bool vals = 1;
    {PROTOBUF_FIELD_OFFSET(HloModuleConfigProto_BoolList, _impl_.vals_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedBool)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void HloModuleConfigProto_BoolList::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.HloModuleConfigProto.BoolList)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.vals_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* HloModuleConfigProto_BoolList::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const HloModuleConfigProto_BoolList& this_ = static_cast<const HloModuleConfigProto_BoolList&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* HloModuleConfigProto_BoolList::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const HloModuleConfigProto_BoolList& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:xla.HloModuleConfigProto.BoolList)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // repeated bool vals = 1;
          if (this_._internal_vals_size() > 0) {
            target = stream->WriteFixedPacked(1, this_._internal_vals(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:xla.HloModuleConfigProto.BoolList)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t HloModuleConfigProto_BoolList::ByteSizeLong(const MessageLite& base) {
          const HloModuleConfigProto_BoolList& this_ = static_cast<const HloModuleConfigProto_BoolList&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t HloModuleConfigProto_BoolList::ByteSizeLong() const {
          const HloModuleConfigProto_BoolList& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:xla.HloModuleConfigProto.BoolList)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated bool vals = 1;
            {
              std::size_t data_size = std::size_t{1} *
                  ::_pbi::FromIntSize(this_._internal_vals_size());
              std::size_t tag_size = data_size == 0
                  ? 0
                  : 1 + ::_pbi::WireFormatLite::Int32Size(
                                      static_cast<int32_t>(data_size));
              total_size += tag_size + data_size;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void HloModuleConfigProto_BoolList::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<HloModuleConfigProto_BoolList*>(&to_msg);
  auto& from = static_cast<const HloModuleConfigProto_BoolList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xla.HloModuleConfigProto.BoolList)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_vals()->MergeFrom(from._internal_vals());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void HloModuleConfigProto_BoolList::CopyFrom(const HloModuleConfigProto_BoolList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.HloModuleConfigProto.BoolList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void HloModuleConfigProto_BoolList::InternalSwap(HloModuleConfigProto_BoolList* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.vals_.InternalSwap(&other->_impl_.vals_);
}

::google::protobuf::Metadata HloModuleConfigProto_BoolList::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class HloModuleConfigProto_Int64List::_Internal {
 public:
};

HloModuleConfigProto_Int64List::HloModuleConfigProto_Int64List(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:xla.HloModuleConfigProto.Int64List)
}
inline PROTOBUF_NDEBUG_INLINE HloModuleConfigProto_Int64List::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::xla::HloModuleConfigProto_Int64List& from_msg)
      : vals_{visibility, arena, from.vals_},
        _vals_cached_byte_size_{0},
        _cached_size_{0} {}

HloModuleConfigProto_Int64List::HloModuleConfigProto_Int64List(
    ::google::protobuf::Arena* arena,
    const HloModuleConfigProto_Int64List& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  HloModuleConfigProto_Int64List* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:xla.HloModuleConfigProto.Int64List)
}
inline PROTOBUF_NDEBUG_INLINE HloModuleConfigProto_Int64List::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : vals_{visibility, arena},
        _vals_cached_byte_size_{0},
        _cached_size_{0} {}

inline void HloModuleConfigProto_Int64List::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
HloModuleConfigProto_Int64List::~HloModuleConfigProto_Int64List() {
  // @@protoc_insertion_point(destructor:xla.HloModuleConfigProto.Int64List)
  SharedDtor(*this);
}
inline void HloModuleConfigProto_Int64List::SharedDtor(MessageLite& self) {
  HloModuleConfigProto_Int64List& this_ = static_cast<HloModuleConfigProto_Int64List&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* HloModuleConfigProto_Int64List::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) HloModuleConfigProto_Int64List(arena);
}
constexpr auto HloModuleConfigProto_Int64List::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(HloModuleConfigProto_Int64List, _impl_.vals_) +
          decltype(HloModuleConfigProto_Int64List::_impl_.vals_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(HloModuleConfigProto_Int64List), alignof(HloModuleConfigProto_Int64List), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&HloModuleConfigProto_Int64List::PlacementNew_,
                                 sizeof(HloModuleConfigProto_Int64List),
                                 alignof(HloModuleConfigProto_Int64List));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull HloModuleConfigProto_Int64List::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_HloModuleConfigProto_Int64List_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &HloModuleConfigProto_Int64List::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<HloModuleConfigProto_Int64List>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &HloModuleConfigProto_Int64List::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<HloModuleConfigProto_Int64List>(), &HloModuleConfigProto_Int64List::ByteSizeLong,
            &HloModuleConfigProto_Int64List::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(HloModuleConfigProto_Int64List, _impl_._cached_size_),
        false,
    },
    &HloModuleConfigProto_Int64List::kDescriptorMethods,
    &descriptor_table_xla_2fxla_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* HloModuleConfigProto_Int64List::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> HloModuleConfigProto_Int64List::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::xla::HloModuleConfigProto_Int64List>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated int64 vals = 1;
    {::_pbi::TcParser::FastV64P1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(HloModuleConfigProto_Int64List, _impl_.vals_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated int64 vals = 1;
    {PROTOBUF_FIELD_OFFSET(HloModuleConfigProto_Int64List, _impl_.vals_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedInt64)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void HloModuleConfigProto_Int64List::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.HloModuleConfigProto.Int64List)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.vals_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* HloModuleConfigProto_Int64List::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const HloModuleConfigProto_Int64List& this_ = static_cast<const HloModuleConfigProto_Int64List&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* HloModuleConfigProto_Int64List::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const HloModuleConfigProto_Int64List& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:xla.HloModuleConfigProto.Int64List)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // repeated int64 vals = 1;
          {
            int byte_size = this_._impl_._vals_cached_byte_size_.Get();
            if (byte_size > 0) {
              target = stream->WriteInt64Packed(
                  1, this_._internal_vals(), byte_size, target);
            }
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:xla.HloModuleConfigProto.Int64List)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t HloModuleConfigProto_Int64List::ByteSizeLong(const MessageLite& base) {
          const HloModuleConfigProto_Int64List& this_ = static_cast<const HloModuleConfigProto_Int64List&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t HloModuleConfigProto_Int64List::ByteSizeLong() const {
          const HloModuleConfigProto_Int64List& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:xla.HloModuleConfigProto.Int64List)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated int64 vals = 1;
            {
              total_size +=
                  ::_pbi::WireFormatLite::Int64SizeWithPackedTagSize(
                      this_._internal_vals(), 1,
                      this_._impl_._vals_cached_byte_size_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void HloModuleConfigProto_Int64List::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<HloModuleConfigProto_Int64List*>(&to_msg);
  auto& from = static_cast<const HloModuleConfigProto_Int64List&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xla.HloModuleConfigProto.Int64List)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_vals()->MergeFrom(from._internal_vals());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void HloModuleConfigProto_Int64List::CopyFrom(const HloModuleConfigProto_Int64List& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.HloModuleConfigProto.Int64List)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void HloModuleConfigProto_Int64List::InternalSwap(HloModuleConfigProto_Int64List* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.vals_.InternalSwap(&other->_impl_.vals_);
}

::google::protobuf::Metadata HloModuleConfigProto_Int64List::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class HloModuleConfigProto_Int64ListList::_Internal {
 public:
};

HloModuleConfigProto_Int64ListList::HloModuleConfigProto_Int64ListList(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:xla.HloModuleConfigProto.Int64ListList)
}
inline PROTOBUF_NDEBUG_INLINE HloModuleConfigProto_Int64ListList::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::xla::HloModuleConfigProto_Int64ListList& from_msg)
      : lists_{visibility, arena, from.lists_},
        _cached_size_{0} {}

HloModuleConfigProto_Int64ListList::HloModuleConfigProto_Int64ListList(
    ::google::protobuf::Arena* arena,
    const HloModuleConfigProto_Int64ListList& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  HloModuleConfigProto_Int64ListList* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:xla.HloModuleConfigProto.Int64ListList)
}
inline PROTOBUF_NDEBUG_INLINE HloModuleConfigProto_Int64ListList::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : lists_{visibility, arena},
        _cached_size_{0} {}

inline void HloModuleConfigProto_Int64ListList::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
HloModuleConfigProto_Int64ListList::~HloModuleConfigProto_Int64ListList() {
  // @@protoc_insertion_point(destructor:xla.HloModuleConfigProto.Int64ListList)
  SharedDtor(*this);
}
inline void HloModuleConfigProto_Int64ListList::SharedDtor(MessageLite& self) {
  HloModuleConfigProto_Int64ListList& this_ = static_cast<HloModuleConfigProto_Int64ListList&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* HloModuleConfigProto_Int64ListList::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) HloModuleConfigProto_Int64ListList(arena);
}
constexpr auto HloModuleConfigProto_Int64ListList::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(HloModuleConfigProto_Int64ListList, _impl_.lists_) +
          decltype(HloModuleConfigProto_Int64ListList::_impl_.lists_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(HloModuleConfigProto_Int64ListList), alignof(HloModuleConfigProto_Int64ListList), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&HloModuleConfigProto_Int64ListList::PlacementNew_,
                                 sizeof(HloModuleConfigProto_Int64ListList),
                                 alignof(HloModuleConfigProto_Int64ListList));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull HloModuleConfigProto_Int64ListList::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_HloModuleConfigProto_Int64ListList_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &HloModuleConfigProto_Int64ListList::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<HloModuleConfigProto_Int64ListList>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &HloModuleConfigProto_Int64ListList::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<HloModuleConfigProto_Int64ListList>(), &HloModuleConfigProto_Int64ListList::ByteSizeLong,
            &HloModuleConfigProto_Int64ListList::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(HloModuleConfigProto_Int64ListList, _impl_._cached_size_),
        false,
    },
    &HloModuleConfigProto_Int64ListList::kDescriptorMethods,
    &descriptor_table_xla_2fxla_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* HloModuleConfigProto_Int64ListList::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> HloModuleConfigProto_Int64ListList::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::xla::HloModuleConfigProto_Int64ListList>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .xla.HloModuleConfigProto.Int64List lists = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(HloModuleConfigProto_Int64ListList, _impl_.lists_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .xla.HloModuleConfigProto.Int64List lists = 1;
    {PROTOBUF_FIELD_OFFSET(HloModuleConfigProto_Int64ListList, _impl_.lists_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::xla::HloModuleConfigProto_Int64List>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void HloModuleConfigProto_Int64ListList::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.HloModuleConfigProto.Int64ListList)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.lists_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* HloModuleConfigProto_Int64ListList::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const HloModuleConfigProto_Int64ListList& this_ = static_cast<const HloModuleConfigProto_Int64ListList&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* HloModuleConfigProto_Int64ListList::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const HloModuleConfigProto_Int64ListList& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:xla.HloModuleConfigProto.Int64ListList)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // repeated .xla.HloModuleConfigProto.Int64List lists = 1;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_lists_size());
               i < n; i++) {
            const auto& repfield = this_._internal_lists().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    1, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:xla.HloModuleConfigProto.Int64ListList)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t HloModuleConfigProto_Int64ListList::ByteSizeLong(const MessageLite& base) {
          const HloModuleConfigProto_Int64ListList& this_ = static_cast<const HloModuleConfigProto_Int64ListList&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t HloModuleConfigProto_Int64ListList::ByteSizeLong() const {
          const HloModuleConfigProto_Int64ListList& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:xla.HloModuleConfigProto.Int64ListList)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .xla.HloModuleConfigProto.Int64List lists = 1;
            {
              total_size += 1UL * this_._internal_lists_size();
              for (const auto& msg : this_._internal_lists()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void HloModuleConfigProto_Int64ListList::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<HloModuleConfigProto_Int64ListList*>(&to_msg);
  auto& from = static_cast<const HloModuleConfigProto_Int64ListList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xla.HloModuleConfigProto.Int64ListList)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_lists()->MergeFrom(
      from._internal_lists());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void HloModuleConfigProto_Int64ListList::CopyFrom(const HloModuleConfigProto_Int64ListList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.HloModuleConfigProto.Int64ListList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void HloModuleConfigProto_Int64ListList::InternalSwap(HloModuleConfigProto_Int64ListList* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.lists_.InternalSwap(&other->_impl_.lists_);
}

::google::protobuf::Metadata HloModuleConfigProto_Int64ListList::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

#if defined(PROTOBUF_CUSTOM_VTABLE)
              HloModuleConfigProto_DotConfigEntry_DoNotUse::HloModuleConfigProto_DotConfigEntry_DoNotUse() : SuperType(_class_data_.base()) {}
              HloModuleConfigProto_DotConfigEntry_DoNotUse::HloModuleConfigProto_DotConfigEntry_DoNotUse(::google::protobuf::Arena* arena)
                  : SuperType(arena, _class_data_.base()) {}
#else   // PROTOBUF_CUSTOM_VTABLE
              HloModuleConfigProto_DotConfigEntry_DoNotUse::HloModuleConfigProto_DotConfigEntry_DoNotUse() : SuperType() {}
              HloModuleConfigProto_DotConfigEntry_DoNotUse::HloModuleConfigProto_DotConfigEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
#endif  // PROTOBUF_CUSTOM_VTABLE
              inline void* HloModuleConfigProto_DotConfigEntry_DoNotUse::PlacementNew_(const void*, void* mem,
                                                      ::google::protobuf::Arena* arena) {
                return ::new (mem) HloModuleConfigProto_DotConfigEntry_DoNotUse(arena);
              }
              constexpr auto HloModuleConfigProto_DotConfigEntry_DoNotUse::InternalNewImpl_() {
                return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(HloModuleConfigProto_DotConfigEntry_DoNotUse),
                                                          alignof(HloModuleConfigProto_DotConfigEntry_DoNotUse));
              }
              PROTOBUF_CONSTINIT
              PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
              const ::google::protobuf::internal::ClassDataFull HloModuleConfigProto_DotConfigEntry_DoNotUse::_class_data_ = {
                  ::google::protobuf::internal::ClassData{
                      &_HloModuleConfigProto_DotConfigEntry_DoNotUse_default_instance_._instance,
                      &_table_.header,
                      nullptr,  // OnDemandRegisterArenaDtor
                      nullptr,  // IsInitialized
                      &HloModuleConfigProto_DotConfigEntry_DoNotUse::MergeImpl,
                      ::google::protobuf::Message::GetNewImpl<HloModuleConfigProto_DotConfigEntry_DoNotUse>(),
              #if defined(PROTOBUF_CUSTOM_VTABLE)
                      &HloModuleConfigProto_DotConfigEntry_DoNotUse::SharedDtor,
                      static_cast<void (::google::protobuf::MessageLite::*)()>(
                          &HloModuleConfigProto_DotConfigEntry_DoNotUse::ClearImpl),
                          ::google::protobuf::Message::ByteSizeLongImpl, ::google::protobuf::Message::_InternalSerializeImpl
                          ,
              #endif  // PROTOBUF_CUSTOM_VTABLE
                      PROTOBUF_FIELD_OFFSET(HloModuleConfigProto_DotConfigEntry_DoNotUse, _impl_._cached_size_),
                      false,
                  },
                  &HloModuleConfigProto_DotConfigEntry_DoNotUse::kDescriptorMethods,
                  &descriptor_table_xla_2fxla_2eproto,
                  nullptr,  // tracker
              };
              const ::google::protobuf::internal::ClassData* HloModuleConfigProto_DotConfigEntry_DoNotUse::GetClassData() const {
                ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
                ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
                return _class_data_.base();
              }
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 51, 2> HloModuleConfigProto_DotConfigEntry_DoNotUse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(HloModuleConfigProto_DotConfigEntry_DoNotUse, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::DiscardEverythingFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::xla::HloModuleConfigProto_DotConfigEntry_DoNotUse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .xla.HloModuleConfigProto.Int64List value = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(HloModuleConfigProto_DotConfigEntry_DoNotUse, _impl_.value_)}},
    // string key = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(HloModuleConfigProto_DotConfigEntry_DoNotUse, _impl_.key_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string key = 1;
    {PROTOBUF_FIELD_OFFSET(HloModuleConfigProto_DotConfigEntry_DoNotUse, _impl_.key_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .xla.HloModuleConfigProto.Int64List value = 2;
    {PROTOBUF_FIELD_OFFSET(HloModuleConfigProto_DotConfigEntry_DoNotUse, _impl_.value_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::xla::HloModuleConfigProto_Int64List>()},
  }}, {{
    "\47\3\0\0\0\0\0\0"
    "xla.HloModuleConfigProto.DotConfigEntry"
    "key"
  }},
};

// ===================================================================

#if defined(PROTOBUF_CUSTOM_VTABLE)
              HloModuleConfigProto_AnalysisAllowanceMapEntry_DoNotUse::HloModuleConfigProto_AnalysisAllowanceMapEntry_DoNotUse() : SuperType(_class_data_.base()) {}
              HloModuleConfigProto_AnalysisAllowanceMapEntry_DoNotUse::HloModuleConfigProto_AnalysisAllowanceMapEntry_DoNotUse(::google::protobuf::Arena* arena)
                  : SuperType(arena, _class_data_.base()) {}
#else   // PROTOBUF_CUSTOM_VTABLE
              HloModuleConfigProto_AnalysisAllowanceMapEntry_DoNotUse::HloModuleConfigProto_AnalysisAllowanceMapEntry_DoNotUse() : SuperType() {}
              HloModuleConfigProto_AnalysisAllowanceMapEntry_DoNotUse::HloModuleConfigProto_AnalysisAllowanceMapEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
#endif  // PROTOBUF_CUSTOM_VTABLE
              inline void* HloModuleConfigProto_AnalysisAllowanceMapEntry_DoNotUse::PlacementNew_(const void*, void* mem,
                                                      ::google::protobuf::Arena* arena) {
                return ::new (mem) HloModuleConfigProto_AnalysisAllowanceMapEntry_DoNotUse(arena);
              }
              constexpr auto HloModuleConfigProto_AnalysisAllowanceMapEntry_DoNotUse::InternalNewImpl_() {
                return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(HloModuleConfigProto_AnalysisAllowanceMapEntry_DoNotUse),
                                                          alignof(HloModuleConfigProto_AnalysisAllowanceMapEntry_DoNotUse));
              }
              PROTOBUF_CONSTINIT
              PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
              const ::google::protobuf::internal::ClassDataFull HloModuleConfigProto_AnalysisAllowanceMapEntry_DoNotUse::_class_data_ = {
                  ::google::protobuf::internal::ClassData{
                      &_HloModuleConfigProto_AnalysisAllowanceMapEntry_DoNotUse_default_instance_._instance,
                      &_table_.header,
                      nullptr,  // OnDemandRegisterArenaDtor
                      nullptr,  // IsInitialized
                      &HloModuleConfigProto_AnalysisAllowanceMapEntry_DoNotUse::MergeImpl,
                      ::google::protobuf::Message::GetNewImpl<HloModuleConfigProto_AnalysisAllowanceMapEntry_DoNotUse>(),
              #if defined(PROTOBUF_CUSTOM_VTABLE)
                      &HloModuleConfigProto_AnalysisAllowanceMapEntry_DoNotUse::SharedDtor,
                      static_cast<void (::google::protobuf::MessageLite::*)()>(
                          &HloModuleConfigProto_AnalysisAllowanceMapEntry_DoNotUse::ClearImpl),
                          ::google::protobuf::Message::ByteSizeLongImpl, ::google::protobuf::Message::_InternalSerializeImpl
                          ,
              #endif  // PROTOBUF_CUSTOM_VTABLE
                      PROTOBUF_FIELD_OFFSET(HloModuleConfigProto_AnalysisAllowanceMapEntry_DoNotUse, _impl_._cached_size_),
                      false,
                  },
                  &HloModuleConfigProto_AnalysisAllowanceMapEntry_DoNotUse::kDescriptorMethods,
                  &descriptor_table_xla_2fxla_2eproto,
                  nullptr,  // tracker
              };
              const ::google::protobuf::internal::ClassData* HloModuleConfigProto_AnalysisAllowanceMapEntry_DoNotUse::GetClassData() const {
                ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
                ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
                return _class_data_.base();
              }
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 62, 2> HloModuleConfigProto_AnalysisAllowanceMapEntry_DoNotUse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(HloModuleConfigProto_AnalysisAllowanceMapEntry_DoNotUse, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::DiscardEverythingFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::xla::HloModuleConfigProto_AnalysisAllowanceMapEntry_DoNotUse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // int64 value = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(HloModuleConfigProto_AnalysisAllowanceMapEntry_DoNotUse, _impl_.value_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(HloModuleConfigProto_AnalysisAllowanceMapEntry_DoNotUse, _impl_.value_)}},
    // string key = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(HloModuleConfigProto_AnalysisAllowanceMapEntry_DoNotUse, _impl_.key_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string key = 1;
    {PROTOBUF_FIELD_OFFSET(HloModuleConfigProto_AnalysisAllowanceMapEntry_DoNotUse, _impl_.key_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int64 value = 2;
    {PROTOBUF_FIELD_OFFSET(HloModuleConfigProto_AnalysisAllowanceMapEntry_DoNotUse, _impl_.value_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
  }},
  // no aux_entries
  {{
    "\62\3\0\0\0\0\0\0"
    "xla.HloModuleConfigProto.AnalysisAllowanceMapEntry"
    "key"
  }},
};

// ===================================================================

class HloModuleConfigProto::_Internal {
 public:
  using HasBits =
      decltype(std::declval<HloModuleConfigProto>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(HloModuleConfigProto, _impl_._has_bits_);
};

void HloModuleConfigProto::clear_entry_computation_layout() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.entry_computation_layout_ != nullptr) _impl_.entry_computation_layout_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void HloModuleConfigProto::clear_static_device_assignment() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.static_device_assignment_ != nullptr) _impl_.static_device_assignment_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void HloModuleConfigProto::clear_pre_simulation_device_assignment() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.pre_simulation_device_assignment_ != nullptr) _impl_.pre_simulation_device_assignment_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
HloModuleConfigProto::HloModuleConfigProto(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:xla.HloModuleConfigProto)
}
inline PROTOBUF_NDEBUG_INLINE HloModuleConfigProto::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::xla::HloModuleConfigProto& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        param_requires_broadcast_via_collectives_{visibility, arena, from.param_requires_broadcast_via_collectives_},
        auto_spmd_partitioning_mesh_shape_{visibility, arena, from.auto_spmd_partitioning_mesh_shape_},
        _auto_spmd_partitioning_mesh_shape_cached_byte_size_{0},
        auto_spmd_partitioning_mesh_ids_{visibility, arena, from.auto_spmd_partitioning_mesh_ids_},
        _auto_spmd_partitioning_mesh_ids_cached_byte_size_{0},
        shardable_value_update_pairs_{visibility, arena, from.shardable_value_update_pairs_},
        fusion_config_{visibility, arena, from.fusion_config_},
        dot_config_{visibility, arena, from.dot_config_},
        layout_config_{visibility, arena, from.layout_config_},
        memory_space_assignment_config_{visibility, arena, from.memory_space_assignment_config_},
        _memory_space_assignment_config_cached_byte_size_{0},
        phase_ordering_config_{visibility, arena, from.phase_ordering_config_},
        allow_spmd_sharding_propagation_to_output_{visibility, arena, from.allow_spmd_sharding_propagation_to_output_},
        analysis_allowance_map_{visibility, arena, from.analysis_allowance_map_},
        allow_spmd_sharding_propagation_to_parameters_{visibility, arena, from.allow_spmd_sharding_propagation_to_parameters_},
        device_type_(arena, from.device_type_),
        fdo_profile_(arena, from.fdo_profile_) {}

HloModuleConfigProto::HloModuleConfigProto(
    ::google::protobuf::Arena* arena,
    const HloModuleConfigProto& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  HloModuleConfigProto* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.entry_computation_layout_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::xla::ProgramShapeProto>(
                              arena, *from._impl_.entry_computation_layout_)
                        : nullptr;
  _impl_.debug_options_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::xla::DebugOptions>(
                              arena, *from._impl_.debug_options_)
                        : nullptr;
  _impl_.static_device_assignment_ = (cached_has_bits & 0x00000004u) ? ::google::protobuf::Message::CopyConstruct<::xla::DeviceAssignmentProto>(
                              arena, *from._impl_.static_device_assignment_)
                        : nullptr;
  _impl_.pre_simulation_device_assignment_ = (cached_has_bits & 0x00000008u) ? ::google::protobuf::Message::CopyConstruct<::xla::DeviceAssignmentProto>(
                              arena, *from._impl_.pre_simulation_device_assignment_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, seed_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, seed_),
           offsetof(Impl_, device_memory_size_) -
               offsetof(Impl_, seed_) +
               sizeof(Impl_::device_memory_size_));

  // @@protoc_insertion_point(copy_constructor:xla.HloModuleConfigProto)
}
inline PROTOBUF_NDEBUG_INLINE HloModuleConfigProto::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        param_requires_broadcast_via_collectives_{visibility, arena},
        auto_spmd_partitioning_mesh_shape_{visibility, arena},
        _auto_spmd_partitioning_mesh_shape_cached_byte_size_{0},
        auto_spmd_partitioning_mesh_ids_{visibility, arena},
        _auto_spmd_partitioning_mesh_ids_cached_byte_size_{0},
        shardable_value_update_pairs_{visibility, arena},
        fusion_config_{visibility, arena},
        dot_config_{visibility, arena},
        layout_config_{visibility, arena},
        memory_space_assignment_config_{visibility, arena},
        _memory_space_assignment_config_cached_byte_size_{0},
        phase_ordering_config_{visibility, arena},
        allow_spmd_sharding_propagation_to_output_{visibility, arena},
        analysis_allowance_map_{visibility, arena},
        allow_spmd_sharding_propagation_to_parameters_{visibility, arena},
        device_type_(arena),
        fdo_profile_(arena) {}

inline void HloModuleConfigProto::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, entry_computation_layout_),
           0,
           offsetof(Impl_, device_memory_size_) -
               offsetof(Impl_, entry_computation_layout_) +
               sizeof(Impl_::device_memory_size_));
}
HloModuleConfigProto::~HloModuleConfigProto() {
  // @@protoc_insertion_point(destructor:xla.HloModuleConfigProto)
  SharedDtor(*this);
}
inline void HloModuleConfigProto::SharedDtor(MessageLite& self) {
  HloModuleConfigProto& this_ = static_cast<HloModuleConfigProto&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.device_type_.Destroy();
  this_._impl_.fdo_profile_.Destroy();
  delete this_._impl_.entry_computation_layout_;
  delete this_._impl_.debug_options_;
  delete this_._impl_.static_device_assignment_;
  delete this_._impl_.pre_simulation_device_assignment_;
  this_._impl_.~Impl_();
}

inline void* HloModuleConfigProto::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) HloModuleConfigProto(arena);
}
constexpr auto HloModuleConfigProto::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(HloModuleConfigProto, _impl_.param_requires_broadcast_via_collectives_) +
          decltype(HloModuleConfigProto::_impl_.param_requires_broadcast_via_collectives_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(HloModuleConfigProto, _impl_.auto_spmd_partitioning_mesh_shape_) +
          decltype(HloModuleConfigProto::_impl_.auto_spmd_partitioning_mesh_shape_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(HloModuleConfigProto, _impl_.auto_spmd_partitioning_mesh_ids_) +
          decltype(HloModuleConfigProto::_impl_.auto_spmd_partitioning_mesh_ids_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(HloModuleConfigProto, _impl_.shardable_value_update_pairs_) +
          decltype(HloModuleConfigProto::_impl_.shardable_value_update_pairs_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(HloModuleConfigProto, _impl_.fusion_config_) +
          decltype(HloModuleConfigProto::_impl_.fusion_config_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(HloModuleConfigProto, _impl_.dot_config_) +
          decltype(HloModuleConfigProto::_impl_.dot_config_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(HloModuleConfigProto, _impl_.dot_config_) +
          decltype(HloModuleConfigProto::_impl_.dot_config_)::
              InternalGetArenaOffsetAlt(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(HloModuleConfigProto, _impl_.layout_config_) +
          decltype(HloModuleConfigProto::_impl_.layout_config_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(HloModuleConfigProto, _impl_.memory_space_assignment_config_) +
          decltype(HloModuleConfigProto::_impl_.memory_space_assignment_config_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(HloModuleConfigProto, _impl_.phase_ordering_config_) +
          decltype(HloModuleConfigProto::_impl_.phase_ordering_config_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(HloModuleConfigProto, _impl_.allow_spmd_sharding_propagation_to_parameters_) +
          decltype(HloModuleConfigProto::_impl_.allow_spmd_sharding_propagation_to_parameters_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(HloModuleConfigProto, _impl_.allow_spmd_sharding_propagation_to_output_) +
          decltype(HloModuleConfigProto::_impl_.allow_spmd_sharding_propagation_to_output_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(HloModuleConfigProto, _impl_.analysis_allowance_map_) +
          decltype(HloModuleConfigProto::_impl_.analysis_allowance_map_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(HloModuleConfigProto, _impl_.analysis_allowance_map_) +
          decltype(HloModuleConfigProto::_impl_.analysis_allowance_map_)::
              InternalGetArenaOffsetAlt(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(HloModuleConfigProto), alignof(HloModuleConfigProto), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&HloModuleConfigProto::PlacementNew_,
                                 sizeof(HloModuleConfigProto),
                                 alignof(HloModuleConfigProto));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull HloModuleConfigProto::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_HloModuleConfigProto_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &HloModuleConfigProto::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<HloModuleConfigProto>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &HloModuleConfigProto::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<HloModuleConfigProto>(), &HloModuleConfigProto::ByteSizeLong,
            &HloModuleConfigProto::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(HloModuleConfigProto, _impl_._cached_size_),
        false,
    },
    &HloModuleConfigProto::kDescriptorMethods,
    &descriptor_table_xla_2fxla_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* HloModuleConfigProto::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 34, 11, 108, 7> HloModuleConfigProto::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(HloModuleConfigProto, _impl_._has_bits_),
    0, // no _extensions_
    35, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    33554432,  // skipmap
    offsetof(decltype(_table_), field_entries),
    34,  // num_field_entries
    11,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::xla::HloModuleConfigProto>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .xla.ProgramShapeProto entry_computation_layout = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(HloModuleConfigProto, _impl_.entry_computation_layout_)}},
    // uint64 seed = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(HloModuleConfigProto, _impl_.seed_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(HloModuleConfigProto, _impl_.seed_)}},
    // int32 launch_id = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(HloModuleConfigProto, _impl_.launch_id_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(HloModuleConfigProto, _impl_.launch_id_)}},
    // int64 replica_count = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(HloModuleConfigProto, _impl_.replica_count_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(HloModuleConfigProto, _impl_.replica_count_)}},
    // int64 num_partitions = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(HloModuleConfigProto, _impl_.num_partitions_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(HloModuleConfigProto, _impl_.num_partitions_)}},
    // repeated bool param_requires_broadcast_via_collectives = 6;
    {::_pbi::TcParser::FastV8P1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(HloModuleConfigProto, _impl_.param_requires_broadcast_via_collectives_)}},
    // bool use_spmd_partitioning = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(HloModuleConfigProto, _impl_.use_spmd_partitioning_), 63>(),
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(HloModuleConfigProto, _impl_.use_spmd_partitioning_)}},
    // bool use_auto_spmd_partitioning = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(HloModuleConfigProto, _impl_.use_auto_spmd_partitioning_), 63>(),
     {64, 63, 0, PROTOBUF_FIELD_OFFSET(HloModuleConfigProto, _impl_.use_auto_spmd_partitioning_)}},
    // repeated int64 auto_spmd_partitioning_mesh_shape = 9;
    {::_pbi::TcParser::FastV64P1,
     {74, 63, 0, PROTOBUF_FIELD_OFFSET(HloModuleConfigProto, _impl_.auto_spmd_partitioning_mesh_shape_)}},
    // repeated int64 auto_spmd_partitioning_mesh_ids = 10;
    {::_pbi::TcParser::FastV64P1,
     {82, 63, 0, PROTOBUF_FIELD_OFFSET(HloModuleConfigProto, _impl_.auto_spmd_partitioning_mesh_ids_)}},
    // bool deduplicate_hlo = 11;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(HloModuleConfigProto, _impl_.deduplicate_hlo_), 63>(),
     {88, 63, 0, PROTOBUF_FIELD_OFFSET(HloModuleConfigProto, _impl_.deduplicate_hlo_)}},
    // int64 intra_op_parallelism_threads = 12;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(HloModuleConfigProto, _impl_.intra_op_parallelism_threads_), 63>(),
     {96, 63, 0, PROTOBUF_FIELD_OFFSET(HloModuleConfigProto, _impl_.intra_op_parallelism_threads_)}},
    // string device_type = 13;
    {::_pbi::TcParser::FastUS1,
     {106, 63, 0, PROTOBUF_FIELD_OFFSET(HloModuleConfigProto, _impl_.device_type_)}},
    // .xla.DebugOptions debug_options = 14;
    {::_pbi::TcParser::FastMtS1,
     {114, 1, 1, PROTOBUF_FIELD_OFFSET(HloModuleConfigProto, _impl_.debug_options_)}},
    // .xla.DeviceAssignmentProto static_device_assignment = 15;
    {::_pbi::TcParser::FastMtS1,
     {122, 2, 2, PROTOBUF_FIELD_OFFSET(HloModuleConfigProto, _impl_.static_device_assignment_)}},
    // repeated .xla.ShardableValueUpdatePairProto shardable_value_update_pairs = 16;
    {::_pbi::TcParser::FastMtR2,
     {386, 63, 3, PROTOBUF_FIELD_OFFSET(HloModuleConfigProto, _impl_.shardable_value_update_pairs_)}},
    // bool alias_passthrough_params = 17;
    {::_pbi::TcParser::FastV8S2,
     {392, 63, 0, PROTOBUF_FIELD_OFFSET(HloModuleConfigProto, _impl_.alias_passthrough_params_)}},
    // bool content_aware_computation_sorting = 18;
    {::_pbi::TcParser::FastV8S2,
     {400, 63, 0, PROTOBUF_FIELD_OFFSET(HloModuleConfigProto, _impl_.content_aware_computation_sorting_)}},
    // .xla.HloModuleConfigProto.FusionConfigCollection fusion_config_collection = 19;
    {::_pbi::TcParser::FastV32S2,
     {408, 63, 0, PROTOBUF_FIELD_OFFSET(HloModuleConfigProto, _impl_.fusion_config_collection_)}},
    // repeated .xla.HloModuleConfigProto.BoolList fusion_config = 20;
    {::_pbi::TcParser::FastMtR2,
     {418, 63, 4, PROTOBUF_FIELD_OFFSET(HloModuleConfigProto, _impl_.fusion_config_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // repeated .xla.HloModuleConfigProto.Int64ListList layout_config = 22;
    {::_pbi::TcParser::FastMtR2,
     {434, 63, 5, PROTOBUF_FIELD_OFFSET(HloModuleConfigProto, _impl_.layout_config_)}},
    // repeated uint64 memory_space_assignment_config = 23;
    {::_pbi::TcParser::FastV64P2,
     {442, 63, 0, PROTOBUF_FIELD_OFFSET(HloModuleConfigProto, _impl_.memory_space_assignment_config_)}},
    // repeated .xla.HloModuleConfigProto.BoolList phase_ordering_config = 24;
    {::_pbi::TcParser::FastMtR2,
     {450, 63, 6, PROTOBUF_FIELD_OFFSET(HloModuleConfigProto, _impl_.phase_ordering_config_)}},
    // int32 phase_index = 25;
    {::_pbi::TcParser::FastV32S2,
     {456, 63, 0, PROTOBUF_FIELD_OFFSET(HloModuleConfigProto, _impl_.phase_index_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // repeated bool allow_spmd_sharding_propagation_to_output = 27;
    {::_pbi::TcParser::FastV8P2,
     {474, 63, 0, PROTOBUF_FIELD_OFFSET(HloModuleConfigProto, _impl_.allow_spmd_sharding_propagation_to_output_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // .xla.PrecisionConfig.Precision matrix_unit_operand_precision = 29;
    {::_pbi::TcParser::FastV32S2,
     {488, 63, 0, PROTOBUF_FIELD_OFFSET(HloModuleConfigProto, _impl_.matrix_unit_operand_precision_)}},
    // bool allow_separate_sharding_programs = 30;
    {::_pbi::TcParser::FastV8S2,
     {496, 63, 0, PROTOBUF_FIELD_OFFSET(HloModuleConfigProto, _impl_.allow_separate_sharding_programs_)}},
    // bytes fdo_profile = 31;
    {::_pbi::TcParser::FastBS2,
     {506, 63, 0, PROTOBUF_FIELD_OFFSET(HloModuleConfigProto, _impl_.fdo_profile_)}},
  }}, {{
    33, 0, 1,
    65528, 31,
    65535, 65535
  }}, {{
    // .xla.ProgramShapeProto entry_computation_layout = 1;
    {PROTOBUF_FIELD_OFFSET(HloModuleConfigProto, _impl_.entry_computation_layout_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // uint64 seed = 2;
    {PROTOBUF_FIELD_OFFSET(HloModuleConfigProto, _impl_.seed_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
    // int32 launch_id = 3;
    {PROTOBUF_FIELD_OFFSET(HloModuleConfigProto, _impl_.launch_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int64 replica_count = 4;
    {PROTOBUF_FIELD_OFFSET(HloModuleConfigProto, _impl_.replica_count_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // int64 num_partitions = 5;
    {PROTOBUF_FIELD_OFFSET(HloModuleConfigProto, _impl_.num_partitions_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // repeated bool param_requires_broadcast_via_collectives = 6;
    {PROTOBUF_FIELD_OFFSET(HloModuleConfigProto, _impl_.param_requires_broadcast_via_collectives_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedBool)},
    // bool use_spmd_partitioning = 7;
    {PROTOBUF_FIELD_OFFSET(HloModuleConfigProto, _impl_.use_spmd_partitioning_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool use_auto_spmd_partitioning = 8;
    {PROTOBUF_FIELD_OFFSET(HloModuleConfigProto, _impl_.use_auto_spmd_partitioning_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // repeated int64 auto_spmd_partitioning_mesh_shape = 9;
    {PROTOBUF_FIELD_OFFSET(HloModuleConfigProto, _impl_.auto_spmd_partitioning_mesh_shape_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedInt64)},
    // repeated int64 auto_spmd_partitioning_mesh_ids = 10;
    {PROTOBUF_FIELD_OFFSET(HloModuleConfigProto, _impl_.auto_spmd_partitioning_mesh_ids_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedInt64)},
    // bool deduplicate_hlo = 11;
    {PROTOBUF_FIELD_OFFSET(HloModuleConfigProto, _impl_.deduplicate_hlo_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // int64 intra_op_parallelism_threads = 12;
    {PROTOBUF_FIELD_OFFSET(HloModuleConfigProto, _impl_.intra_op_parallelism_threads_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // string device_type = 13;
    {PROTOBUF_FIELD_OFFSET(HloModuleConfigProto, _impl_.device_type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .xla.DebugOptions debug_options = 14;
    {PROTOBUF_FIELD_OFFSET(HloModuleConfigProto, _impl_.debug_options_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .xla.DeviceAssignmentProto static_device_assignment = 15;
    {PROTOBUF_FIELD_OFFSET(HloModuleConfigProto, _impl_.static_device_assignment_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .xla.ShardableValueUpdatePairProto shardable_value_update_pairs = 16;
    {PROTOBUF_FIELD_OFFSET(HloModuleConfigProto, _impl_.shardable_value_update_pairs_), -1, 3,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // bool alias_passthrough_params = 17;
    {PROTOBUF_FIELD_OFFSET(HloModuleConfigProto, _impl_.alias_passthrough_params_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool content_aware_computation_sorting = 18;
    {PROTOBUF_FIELD_OFFSET(HloModuleConfigProto, _impl_.content_aware_computation_sorting_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // .xla.HloModuleConfigProto.FusionConfigCollection fusion_config_collection = 19;
    {PROTOBUF_FIELD_OFFSET(HloModuleConfigProto, _impl_.fusion_config_collection_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // repeated .xla.HloModuleConfigProto.BoolList fusion_config = 20;
    {PROTOBUF_FIELD_OFFSET(HloModuleConfigProto, _impl_.fusion_config_), -1, 4,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // map<string, .xla.HloModuleConfigProto.Int64List> dot_config = 21;
    {PROTOBUF_FIELD_OFFSET(HloModuleConfigProto, _impl_.dot_config_), -1, 8,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
    // repeated .xla.HloModuleConfigProto.Int64ListList layout_config = 22;
    {PROTOBUF_FIELD_OFFSET(HloModuleConfigProto, _impl_.layout_config_), -1, 5,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated uint64 memory_space_assignment_config = 23;
    {PROTOBUF_FIELD_OFFSET(HloModuleConfigProto, _impl_.memory_space_assignment_config_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedUInt64)},
    // repeated .xla.HloModuleConfigProto.BoolList phase_ordering_config = 24;
    {PROTOBUF_FIELD_OFFSET(HloModuleConfigProto, _impl_.phase_ordering_config_), -1, 6,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // int32 phase_index = 25;
    {PROTOBUF_FIELD_OFFSET(HloModuleConfigProto, _impl_.phase_index_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // repeated bool allow_spmd_sharding_propagation_to_output = 27;
    {PROTOBUF_FIELD_OFFSET(HloModuleConfigProto, _impl_.allow_spmd_sharding_propagation_to_output_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedBool)},
    // map<string, int64> analysis_allowance_map = 28;
    {PROTOBUF_FIELD_OFFSET(HloModuleConfigProto, _impl_.analysis_allowance_map_), -1, 10,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
    // .xla.PrecisionConfig.Precision matrix_unit_operand_precision = 29;
    {PROTOBUF_FIELD_OFFSET(HloModuleConfigProto, _impl_.matrix_unit_operand_precision_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // bool allow_separate_sharding_programs = 30;
    {PROTOBUF_FIELD_OFFSET(HloModuleConfigProto, _impl_.allow_separate_sharding_programs_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bytes fdo_profile = 31;
    {PROTOBUF_FIELD_OFFSET(HloModuleConfigProto, _impl_.fdo_profile_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // int64 device_memory_size = 32;
    {PROTOBUF_FIELD_OFFSET(HloModuleConfigProto, _impl_.device_memory_size_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // repeated bool allow_spmd_sharding_propagation_to_parameters = 33;
    {PROTOBUF_FIELD_OFFSET(HloModuleConfigProto, _impl_.allow_spmd_sharding_propagation_to_parameters_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedBool)},
    // bool use_shardy_partitioner = 34;
    {PROTOBUF_FIELD_OFFSET(HloModuleConfigProto, _impl_.use_shardy_partitioner_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // .xla.DeviceAssignmentProto pre_simulation_device_assignment = 35;
    {PROTOBUF_FIELD_OFFSET(HloModuleConfigProto, _impl_.pre_simulation_device_assignment_), _Internal::kHasBitsOffset + 3, 7,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::xla::ProgramShapeProto>()},
    {::_pbi::TcParser::GetTable<::xla::DebugOptions>()},
    {::_pbi::TcParser::GetTable<::xla::DeviceAssignmentProto>()},
    {::_pbi::TcParser::GetTable<::xla::ShardableValueUpdatePairProto>()},
    {::_pbi::TcParser::GetTable<::xla::HloModuleConfigProto_BoolList>()},
    {::_pbi::TcParser::GetTable<::xla::HloModuleConfigProto_Int64ListList>()},
    {::_pbi::TcParser::GetTable<::xla::HloModuleConfigProto_BoolList>()},
    {::_pbi::TcParser::GetTable<::xla::DeviceAssignmentProto>()},
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(HloModuleConfigProto()._impl_.dot_config_)>(
        1, 0, 0, 9,
        11)},
    {::_pbi::TcParser::GetTable<::xla::HloModuleConfigProto_Int64List>()},
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(HloModuleConfigProto()._impl_.analysis_allowance_map_)>(
        1, 0, 0, 9,
        3)},
  }}, {{
    "\30\0\0\0\0\0\0\0\0\0\0\0\0\13\0\0\0\0\0\0\0\12\0\0\0\0\0\26\0\0\0\0\0\0\0\0\0\0\0\0"
    "xla.HloModuleConfigProto"
    "device_type"
    "dot_config"
    "analysis_allowance_map"
  }},
};

PROTOBUF_NOINLINE void HloModuleConfigProto::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.HloModuleConfigProto)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.param_requires_broadcast_via_collectives_.Clear();
  _impl_.auto_spmd_partitioning_mesh_shape_.Clear();
  _impl_.auto_spmd_partitioning_mesh_ids_.Clear();
  _impl_.shardable_value_update_pairs_.Clear();
  _impl_.fusion_config_.Clear();
  _impl_.dot_config_.Clear();
  _impl_.layout_config_.Clear();
  _impl_.memory_space_assignment_config_.Clear();
  _impl_.phase_ordering_config_.Clear();
  _impl_.allow_spmd_sharding_propagation_to_output_.Clear();
  _impl_.analysis_allowance_map_.Clear();
  _impl_.allow_spmd_sharding_propagation_to_parameters_.Clear();
  _impl_.device_type_.ClearToEmpty();
  _impl_.fdo_profile_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.entry_computation_layout_ != nullptr);
      _impl_.entry_computation_layout_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.debug_options_ != nullptr);
      _impl_.debug_options_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.static_device_assignment_ != nullptr);
      _impl_.static_device_assignment_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.pre_simulation_device_assignment_ != nullptr);
      _impl_.pre_simulation_device_assignment_->Clear();
    }
  }
  ::memset(&_impl_.seed_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.device_memory_size_) -
      reinterpret_cast<char*>(&_impl_.seed_)) + sizeof(_impl_.device_memory_size_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* HloModuleConfigProto::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const HloModuleConfigProto& this_ = static_cast<const HloModuleConfigProto&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* HloModuleConfigProto::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const HloModuleConfigProto& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:xla.HloModuleConfigProto)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .xla.ProgramShapeProto entry_computation_layout = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.entry_computation_layout_, this_._impl_.entry_computation_layout_->GetCachedSize(), target,
                stream);
          }

          // uint64 seed = 2;
          if (this_._internal_seed() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
                2, this_._internal_seed(), target);
          }

          // int32 launch_id = 3;
          if (this_._internal_launch_id() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<3>(
                    stream, this_._internal_launch_id(), target);
          }

          // int64 replica_count = 4;
          if (this_._internal_replica_count() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt64ToArrayWithField<4>(
                    stream, this_._internal_replica_count(), target);
          }

          // int64 num_partitions = 5;
          if (this_._internal_num_partitions() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt64ToArrayWithField<5>(
                    stream, this_._internal_num_partitions(), target);
          }

          // repeated bool param_requires_broadcast_via_collectives = 6;
          if (this_._internal_param_requires_broadcast_via_collectives_size() > 0) {
            target = stream->WriteFixedPacked(6, this_._internal_param_requires_broadcast_via_collectives(), target);
          }

          // bool use_spmd_partitioning = 7;
          if (this_._internal_use_spmd_partitioning() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                7, this_._internal_use_spmd_partitioning(), target);
          }

          // bool use_auto_spmd_partitioning = 8;
          if (this_._internal_use_auto_spmd_partitioning() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                8, this_._internal_use_auto_spmd_partitioning(), target);
          }

          // repeated int64 auto_spmd_partitioning_mesh_shape = 9;
          {
            int byte_size = this_._impl_._auto_spmd_partitioning_mesh_shape_cached_byte_size_.Get();
            if (byte_size > 0) {
              target = stream->WriteInt64Packed(
                  9, this_._internal_auto_spmd_partitioning_mesh_shape(), byte_size, target);
            }
          }

          // repeated int64 auto_spmd_partitioning_mesh_ids = 10;
          {
            int byte_size = this_._impl_._auto_spmd_partitioning_mesh_ids_cached_byte_size_.Get();
            if (byte_size > 0) {
              target = stream->WriteInt64Packed(
                  10, this_._internal_auto_spmd_partitioning_mesh_ids(), byte_size, target);
            }
          }

          // bool deduplicate_hlo = 11;
          if (this_._internal_deduplicate_hlo() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                11, this_._internal_deduplicate_hlo(), target);
          }

          // int64 intra_op_parallelism_threads = 12;
          if (this_._internal_intra_op_parallelism_threads() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt64ToArrayWithField<12>(
                    stream, this_._internal_intra_op_parallelism_threads(), target);
          }

          // string device_type = 13;
          if (!this_._internal_device_type().empty()) {
            const std::string& _s = this_._internal_device_type();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xla.HloModuleConfigProto.device_type");
            target = stream->WriteStringMaybeAliased(13, _s, target);
          }

          // .xla.DebugOptions debug_options = 14;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                14, *this_._impl_.debug_options_, this_._impl_.debug_options_->GetCachedSize(), target,
                stream);
          }

          // .xla.DeviceAssignmentProto static_device_assignment = 15;
          if (cached_has_bits & 0x00000004u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                15, *this_._impl_.static_device_assignment_, this_._impl_.static_device_assignment_->GetCachedSize(), target,
                stream);
          }

          // repeated .xla.ShardableValueUpdatePairProto shardable_value_update_pairs = 16;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_shardable_value_update_pairs_size());
               i < n; i++) {
            const auto& repfield = this_._internal_shardable_value_update_pairs().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    16, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          // bool alias_passthrough_params = 17;
          if (this_._internal_alias_passthrough_params() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                17, this_._internal_alias_passthrough_params(), target);
          }

          // bool content_aware_computation_sorting = 18;
          if (this_._internal_content_aware_computation_sorting() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                18, this_._internal_content_aware_computation_sorting(), target);
          }

          // .xla.HloModuleConfigProto.FusionConfigCollection fusion_config_collection = 19;
          if (this_._internal_fusion_config_collection() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                19, this_._internal_fusion_config_collection(), target);
          }

          // repeated .xla.HloModuleConfigProto.BoolList fusion_config = 20;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_fusion_config_size());
               i < n; i++) {
            const auto& repfield = this_._internal_fusion_config().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    20, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          // map<string, .xla.HloModuleConfigProto.Int64List> dot_config = 21;
          if (!this_._internal_dot_config().empty()) {
            using MapType = ::google::protobuf::Map<std::string, ::xla::HloModuleConfigProto_Int64List>;
            using WireHelper = _pbi::MapEntryFuncs<std::string, ::xla::HloModuleConfigProto_Int64List,
                                           _pbi::WireFormatLite::TYPE_STRING,
                                           _pbi::WireFormatLite::TYPE_MESSAGE>;
            const auto& field = this_._internal_dot_config();

            if (stream->IsSerializationDeterministic() && field.size() > 1) {
              for (const auto& entry : ::google::protobuf::internal::MapSorterPtr<MapType>(field)) {
                target = WireHelper::InternalSerialize(
                    21, entry.first, entry.second, target, stream);
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xla.HloModuleConfigProto.dot_config");
              }
            } else {
              for (const auto& entry : field) {
                target = WireHelper::InternalSerialize(
                    21, entry.first, entry.second, target, stream);
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xla.HloModuleConfigProto.dot_config");
              }
            }
          }

          // repeated .xla.HloModuleConfigProto.Int64ListList layout_config = 22;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_layout_config_size());
               i < n; i++) {
            const auto& repfield = this_._internal_layout_config().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    22, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          // repeated uint64 memory_space_assignment_config = 23;
          {
            int byte_size = this_._impl_._memory_space_assignment_config_cached_byte_size_.Get();
            if (byte_size > 0) {
              target = stream->WriteUInt64Packed(
                  23, this_._internal_memory_space_assignment_config(), byte_size, target);
            }
          }

          // repeated .xla.HloModuleConfigProto.BoolList phase_ordering_config = 24;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_phase_ordering_config_size());
               i < n; i++) {
            const auto& repfield = this_._internal_phase_ordering_config().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    24, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          // int32 phase_index = 25;
          if (this_._internal_phase_index() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                25, this_._internal_phase_index(), target);
          }

          // repeated bool allow_spmd_sharding_propagation_to_output = 27;
          if (this_._internal_allow_spmd_sharding_propagation_to_output_size() > 0) {
            target = stream->WriteFixedPacked(27, this_._internal_allow_spmd_sharding_propagation_to_output(), target);
          }

          // map<string, int64> analysis_allowance_map = 28;
          if (!this_._internal_analysis_allowance_map().empty()) {
            using MapType = ::google::protobuf::Map<std::string, ::int64_t>;
            using WireHelper = _pbi::MapEntryFuncs<std::string, ::int64_t,
                                           _pbi::WireFormatLite::TYPE_STRING,
                                           _pbi::WireFormatLite::TYPE_INT64>;
            const auto& field = this_._internal_analysis_allowance_map();

            if (stream->IsSerializationDeterministic() && field.size() > 1) {
              for (const auto& entry : ::google::protobuf::internal::MapSorterPtr<MapType>(field)) {
                target = WireHelper::InternalSerialize(
                    28, entry.first, entry.second, target, stream);
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xla.HloModuleConfigProto.analysis_allowance_map");
              }
            } else {
              for (const auto& entry : field) {
                target = WireHelper::InternalSerialize(
                    28, entry.first, entry.second, target, stream);
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xla.HloModuleConfigProto.analysis_allowance_map");
              }
            }
          }

          // .xla.PrecisionConfig.Precision matrix_unit_operand_precision = 29;
          if (this_._internal_matrix_unit_operand_precision() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                29, this_._internal_matrix_unit_operand_precision(), target);
          }

          // bool allow_separate_sharding_programs = 30;
          if (this_._internal_allow_separate_sharding_programs() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                30, this_._internal_allow_separate_sharding_programs(), target);
          }

          // bytes fdo_profile = 31;
          if (!this_._internal_fdo_profile().empty()) {
            const std::string& _s = this_._internal_fdo_profile();
            target = stream->WriteBytesMaybeAliased(31, _s, target);
          }

          // int64 device_memory_size = 32;
          if (this_._internal_device_memory_size() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt64ToArray(
                32, this_._internal_device_memory_size(), target);
          }

          // repeated bool allow_spmd_sharding_propagation_to_parameters = 33;
          if (this_._internal_allow_spmd_sharding_propagation_to_parameters_size() > 0) {
            target = stream->WriteFixedPacked(33, this_._internal_allow_spmd_sharding_propagation_to_parameters(), target);
          }

          // bool use_shardy_partitioner = 34;
          if (this_._internal_use_shardy_partitioner() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                34, this_._internal_use_shardy_partitioner(), target);
          }

          // .xla.DeviceAssignmentProto pre_simulation_device_assignment = 35;
          if (cached_has_bits & 0x00000008u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                35, *this_._impl_.pre_simulation_device_assignment_, this_._impl_.pre_simulation_device_assignment_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:xla.HloModuleConfigProto)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t HloModuleConfigProto::ByteSizeLong(const MessageLite& base) {
          const HloModuleConfigProto& this_ = static_cast<const HloModuleConfigProto&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t HloModuleConfigProto::ByteSizeLong() const {
          const HloModuleConfigProto& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:xla.HloModuleConfigProto)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated bool param_requires_broadcast_via_collectives = 6;
            {
              std::size_t data_size = std::size_t{1} *
                  ::_pbi::FromIntSize(this_._internal_param_requires_broadcast_via_collectives_size());
              std::size_t tag_size = data_size == 0
                  ? 0
                  : 1 + ::_pbi::WireFormatLite::Int32Size(
                                      static_cast<int32_t>(data_size));
              total_size += tag_size + data_size;
            }
            // repeated int64 auto_spmd_partitioning_mesh_shape = 9;
            {
              total_size +=
                  ::_pbi::WireFormatLite::Int64SizeWithPackedTagSize(
                      this_._internal_auto_spmd_partitioning_mesh_shape(), 1,
                      this_._impl_._auto_spmd_partitioning_mesh_shape_cached_byte_size_);
            }
            // repeated int64 auto_spmd_partitioning_mesh_ids = 10;
            {
              total_size +=
                  ::_pbi::WireFormatLite::Int64SizeWithPackedTagSize(
                      this_._internal_auto_spmd_partitioning_mesh_ids(), 1,
                      this_._impl_._auto_spmd_partitioning_mesh_ids_cached_byte_size_);
            }
            // repeated .xla.ShardableValueUpdatePairProto shardable_value_update_pairs = 16;
            {
              total_size += 2UL * this_._internal_shardable_value_update_pairs_size();
              for (const auto& msg : this_._internal_shardable_value_update_pairs()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
            // repeated .xla.HloModuleConfigProto.BoolList fusion_config = 20;
            {
              total_size += 2UL * this_._internal_fusion_config_size();
              for (const auto& msg : this_._internal_fusion_config()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
            // map<string, .xla.HloModuleConfigProto.Int64List> dot_config = 21;
            {
              total_size +=
                  2 * ::google::protobuf::internal::FromIntSize(this_._internal_dot_config_size());
              for (const auto& entry : this_._internal_dot_config()) {
                total_size += _pbi::MapEntryFuncs<std::string, ::xla::HloModuleConfigProto_Int64List,
                                               _pbi::WireFormatLite::TYPE_STRING,
                                               _pbi::WireFormatLite::TYPE_MESSAGE>::ByteSizeLong(entry.first, entry.second);
              }
            }
            // repeated .xla.HloModuleConfigProto.Int64ListList layout_config = 22;
            {
              total_size += 2UL * this_._internal_layout_config_size();
              for (const auto& msg : this_._internal_layout_config()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
            // repeated uint64 memory_space_assignment_config = 23;
            {
              total_size +=
                  ::_pbi::WireFormatLite::UInt64SizeWithPackedTagSize(
                      this_._internal_memory_space_assignment_config(), 2,
                      this_._impl_._memory_space_assignment_config_cached_byte_size_);
            }
            // repeated .xla.HloModuleConfigProto.BoolList phase_ordering_config = 24;
            {
              total_size += 2UL * this_._internal_phase_ordering_config_size();
              for (const auto& msg : this_._internal_phase_ordering_config()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
            // repeated bool allow_spmd_sharding_propagation_to_output = 27;
            {
              std::size_t data_size = std::size_t{1} *
                  ::_pbi::FromIntSize(this_._internal_allow_spmd_sharding_propagation_to_output_size());
              std::size_t tag_size = data_size == 0
                  ? 0
                  : 2 + ::_pbi::WireFormatLite::Int32Size(
                                      static_cast<int32_t>(data_size));
              total_size += tag_size + data_size;
            }
            // map<string, int64> analysis_allowance_map = 28;
            {
              total_size +=
                  2 * ::google::protobuf::internal::FromIntSize(this_._internal_analysis_allowance_map_size());
              for (const auto& entry : this_._internal_analysis_allowance_map()) {
                total_size += _pbi::MapEntryFuncs<std::string, ::int64_t,
                                               _pbi::WireFormatLite::TYPE_STRING,
                                               _pbi::WireFormatLite::TYPE_INT64>::ByteSizeLong(entry.first, entry.second);
              }
            }
            // repeated bool allow_spmd_sharding_propagation_to_parameters = 33;
            {
              std::size_t data_size = std::size_t{1} *
                  ::_pbi::FromIntSize(this_._internal_allow_spmd_sharding_propagation_to_parameters_size());
              std::size_t tag_size = data_size == 0
                  ? 0
                  : 2 + ::_pbi::WireFormatLite::Int32Size(
                                      static_cast<int32_t>(data_size));
              total_size += tag_size + data_size;
            }
          }
           {
            // string device_type = 13;
            if (!this_._internal_device_type().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_device_type());
            }
            // bytes fdo_profile = 31;
            if (!this_._internal_fdo_profile().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                              this_._internal_fdo_profile());
            }
          }
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x0000000fu) {
            // .xla.ProgramShapeProto entry_computation_layout = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.entry_computation_layout_);
            }
            // .xla.DebugOptions debug_options = 14;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.debug_options_);
            }
            // .xla.DeviceAssignmentProto static_device_assignment = 15;
            if (cached_has_bits & 0x00000004u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.static_device_assignment_);
            }
            // .xla.DeviceAssignmentProto pre_simulation_device_assignment = 35;
            if (cached_has_bits & 0x00000008u) {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.pre_simulation_device_assignment_);
            }
          }
           {
            // uint64 seed = 2;
            if (this_._internal_seed() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
                  this_._internal_seed());
            }
            // int64 replica_count = 4;
            if (this_._internal_replica_count() != 0) {
              total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
                  this_._internal_replica_count());
            }
            // int64 num_partitions = 5;
            if (this_._internal_num_partitions() != 0) {
              total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
                  this_._internal_num_partitions());
            }
            // int32 launch_id = 3;
            if (this_._internal_launch_id() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_launch_id());
            }
            // bool use_spmd_partitioning = 7;
            if (this_._internal_use_spmd_partitioning() != 0) {
              total_size += 2;
            }
            // bool use_auto_spmd_partitioning = 8;
            if (this_._internal_use_auto_spmd_partitioning() != 0) {
              total_size += 2;
            }
            // bool deduplicate_hlo = 11;
            if (this_._internal_deduplicate_hlo() != 0) {
              total_size += 2;
            }
            // bool allow_separate_sharding_programs = 30;
            if (this_._internal_allow_separate_sharding_programs() != 0) {
              total_size += 3;
            }
            // int64 intra_op_parallelism_threads = 12;
            if (this_._internal_intra_op_parallelism_threads() != 0) {
              total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
                  this_._internal_intra_op_parallelism_threads());
            }
            // .xla.HloModuleConfigProto.FusionConfigCollection fusion_config_collection = 19;
            if (this_._internal_fusion_config_collection() != 0) {
              total_size += 2 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_fusion_config_collection());
            }
            // bool alias_passthrough_params = 17;
            if (this_._internal_alias_passthrough_params() != 0) {
              total_size += 3;
            }
            // bool content_aware_computation_sorting = 18;
            if (this_._internal_content_aware_computation_sorting() != 0) {
              total_size += 3;
            }
            // bool use_shardy_partitioner = 34;
            if (this_._internal_use_shardy_partitioner() != 0) {
              total_size += 3;
            }
            // int32 phase_index = 25;
            if (this_._internal_phase_index() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_phase_index());
            }
            // .xla.PrecisionConfig.Precision matrix_unit_operand_precision = 29;
            if (this_._internal_matrix_unit_operand_precision() != 0) {
              total_size += 2 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_matrix_unit_operand_precision());
            }
            // int64 device_memory_size = 32;
            if (this_._internal_device_memory_size() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int64Size(
                                              this_._internal_device_memory_size());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void HloModuleConfigProto::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<HloModuleConfigProto*>(&to_msg);
  auto& from = static_cast<const HloModuleConfigProto&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:xla.HloModuleConfigProto)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_param_requires_broadcast_via_collectives()->MergeFrom(from._internal_param_requires_broadcast_via_collectives());
  _this->_internal_mutable_auto_spmd_partitioning_mesh_shape()->MergeFrom(from._internal_auto_spmd_partitioning_mesh_shape());
  _this->_internal_mutable_auto_spmd_partitioning_mesh_ids()->MergeFrom(from._internal_auto_spmd_partitioning_mesh_ids());
  _this->_internal_mutable_shardable_value_update_pairs()->MergeFrom(
      from._internal_shardable_value_update_pairs());
  _this->_internal_mutable_fusion_config()->MergeFrom(
      from._internal_fusion_config());
  _this->_impl_.dot_config_.MergeFrom(from._impl_.dot_config_);
  _this->_internal_mutable_layout_config()->MergeFrom(
      from._internal_layout_config());
  _this->_internal_mutable_memory_space_assignment_config()->MergeFrom(from._internal_memory_space_assignment_config());
  _this->_internal_mutable_phase_ordering_config()->MergeFrom(
      from._internal_phase_ordering_config());
  _this->_internal_mutable_allow_spmd_sharding_propagation_to_output()->MergeFrom(from._internal_allow_spmd_sharding_propagation_to_output());
  _this->_impl_.analysis_allowance_map_.MergeFrom(from._impl_.analysis_allowance_map_);
  _this->_internal_mutable_allow_spmd_sharding_propagation_to_parameters()->MergeFrom(from._internal_allow_spmd_sharding_propagation_to_parameters());
  if (!from._internal_device_type().empty()) {
    _this->_internal_set_device_type(from._internal_device_type());
  }
  if (!from._internal_fdo_profile().empty()) {
    _this->_internal_set_fdo_profile(from._internal_fdo_profile());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.entry_computation_layout_ != nullptr);
      if (_this->_impl_.entry_computation_layout_ == nullptr) {
        _this->_impl_.entry_computation_layout_ =
            ::google::protobuf::Message::CopyConstruct<::xla::ProgramShapeProto>(arena, *from._impl_.entry_computation_layout_);
      } else {
        _this->_impl_.entry_computation_layout_->MergeFrom(*from._impl_.entry_computation_layout_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.debug_options_ != nullptr);
      if (_this->_impl_.debug_options_ == nullptr) {
        _this->_impl_.debug_options_ =
            ::google::protobuf::Message::CopyConstruct<::xla::DebugOptions>(arena, *from._impl_.debug_options_);
      } else {
        _this->_impl_.debug_options_->MergeFrom(*from._impl_.debug_options_);
      }
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(from._impl_.static_device_assignment_ != nullptr);
      if (_this->_impl_.static_device_assignment_ == nullptr) {
        _this->_impl_.static_device_assignment_ =
            ::google::protobuf::Message::CopyConstruct<::xla::DeviceAssignmentProto>(arena, *from._impl_.static_device_assignment_);
      } else {
        _this->_impl_.static_device_assignment_->MergeFrom(*from._impl_.static_device_assignment_);
      }
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(from._impl_.pre_simulation_device_assignment_ != nullptr);
      if (_this->_impl_.pre_simulation_device_assignment_ == nullptr) {
        _this->_impl_.pre_simulation_device_assignment_ =
            ::google::protobuf::Message::CopyConstruct<::xla::DeviceAssignmentProto>(arena, *from._impl_.pre_simulation_device_assignment_);
      } else {
        _this->_impl_.pre_simulation_device_assignment_->MergeFrom(*from._impl_.pre_simulation_device_assignment_);
      }
    }
  }
  if (from._internal_seed() != 0) {
    _this->_impl_.seed_ = from._impl_.seed_;
  }
  if (from._internal_replica_count() != 0) {
    _this->_impl_.replica_count_ = from._impl_.replica_count_;
  }
  if (from._internal_num_partitions() != 0) {
    _this->_impl_.num_partitions_ = from._impl_.num_partitions_;
  }
  if (from._internal_launch_id() != 0) {
    _this->_impl_.launch_id_ = from._impl_.launch_id_;
  }
  if (from._internal_use_spmd_partitioning() != 0) {
    _this->_impl_.use_spmd_partitioning_ = from._impl_.use_spmd_partitioning_;
  }
  if (from._internal_use_auto_spmd_partitioning() != 0) {
    _this->_impl_.use_auto_spmd_partitioning_ = from._impl_.use_auto_spmd_partitioning_;
  }
  if (from._internal_deduplicate_hlo() != 0) {
    _this->_impl_.deduplicate_hlo_ = from._impl_.deduplicate_hlo_;
  }
  if (from._internal_allow_separate_sharding_programs() != 0) {
    _this->_impl_.allow_separate_sharding_programs_ = from._impl_.allow_separate_sharding_programs_;
  }
  if (from._internal_intra_op_parallelism_threads() != 0) {
    _this->_impl_.intra_op_parallelism_threads_ = from._impl_.intra_op_parallelism_threads_;
  }
  if (from._internal_fusion_config_collection() != 0) {
    _this->_impl_.fusion_config_collection_ = from._impl_.fusion_config_collection_;
  }
  if (from._internal_alias_passthrough_params() != 0) {
    _this->_impl_.alias_passthrough_params_ = from._impl_.alias_passthrough_params_;
  }
  if (from._internal_content_aware_computation_sorting() != 0) {
    _this->_impl_.content_aware_computation_sorting_ = from._impl_.content_aware_computation_sorting_;
  }
  if (from._internal_use_shardy_partitioner() != 0) {
    _this->_impl_.use_shardy_partitioner_ = from._impl_.use_shardy_partitioner_;
  }
  if (from._internal_phase_index() != 0) {
    _this->_impl_.phase_index_ = from._impl_.phase_index_;
  }
  if (from._internal_matrix_unit_operand_precision() != 0) {
    _this->_impl_.matrix_unit_operand_precision_ = from._impl_.matrix_unit_operand_precision_;
  }
  if (from._internal_device_memory_size() != 0) {
    _this->_impl_.device_memory_size_ = from._impl_.device_memory_size_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void HloModuleConfigProto::CopyFrom(const HloModuleConfigProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.HloModuleConfigProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void HloModuleConfigProto::InternalSwap(HloModuleConfigProto* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.param_requires_broadcast_via_collectives_.InternalSwap(&other->_impl_.param_requires_broadcast_via_collectives_);
  _impl_.auto_spmd_partitioning_mesh_shape_.InternalSwap(&other->_impl_.auto_spmd_partitioning_mesh_shape_);
  _impl_.auto_spmd_partitioning_mesh_ids_.InternalSwap(&other->_impl_.auto_spmd_partitioning_mesh_ids_);
  _impl_.shardable_value_update_pairs_.InternalSwap(&other->_impl_.shardable_value_update_pairs_);
  _impl_.fusion_config_.InternalSwap(&other->_impl_.fusion_config_);
  _impl_.dot_config_.InternalSwap(&other->_impl_.dot_config_);
  _impl_.layout_config_.InternalSwap(&other->_impl_.layout_config_);
  _impl_.memory_space_assignment_config_.InternalSwap(&other->_impl_.memory_space_assignment_config_);
  _impl_.phase_ordering_config_.InternalSwap(&other->_impl_.phase_ordering_config_);
  _impl_.allow_spmd_sharding_propagation_to_output_.InternalSwap(&other->_impl_.allow_spmd_sharding_propagation_to_output_);
  _impl_.analysis_allowance_map_.InternalSwap(&other->_impl_.analysis_allowance_map_);
  _impl_.allow_spmd_sharding_propagation_to_parameters_.InternalSwap(&other->_impl_.allow_spmd_sharding_propagation_to_parameters_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.device_type_, &other->_impl_.device_type_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.fdo_profile_, &other->_impl_.fdo_profile_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HloModuleConfigProto, _impl_.device_memory_size_)
      + sizeof(HloModuleConfigProto::_impl_.device_memory_size_)
      - PROTOBUF_FIELD_OFFSET(HloModuleConfigProto, _impl_.entry_computation_layout_)>(
          reinterpret_cast<char*>(&_impl_.entry_computation_layout_),
          reinterpret_cast<char*>(&other->_impl_.entry_computation_layout_));
}

::google::protobuf::Metadata HloModuleConfigProto::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class HloModuleProtoWithConfig::_Internal {
 public:
  using HasBits =
      decltype(std::declval<HloModuleProtoWithConfig>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(HloModuleProtoWithConfig, _impl_._has_bits_);
};

void HloModuleProtoWithConfig::clear_hlo_module() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.hlo_module_ != nullptr) _impl_.hlo_module_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
HloModuleProtoWithConfig::HloModuleProtoWithConfig(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:xla.HloModuleProtoWithConfig)
}
inline PROTOBUF_NDEBUG_INLINE HloModuleProtoWithConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::xla::HloModuleProtoWithConfig& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

HloModuleProtoWithConfig::HloModuleProtoWithConfig(
    ::google::protobuf::Arena* arena,
    const HloModuleProtoWithConfig& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  HloModuleProtoWithConfig* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.hlo_module_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::xla::HloModuleProto>(
                              arena, *from._impl_.hlo_module_)
                        : nullptr;
  _impl_.config_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::xla::HloModuleConfigProto>(
                              arena, *from._impl_.config_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:xla.HloModuleProtoWithConfig)
}
inline PROTOBUF_NDEBUG_INLINE HloModuleProtoWithConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void HloModuleProtoWithConfig::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, hlo_module_),
           0,
           offsetof(Impl_, config_) -
               offsetof(Impl_, hlo_module_) +
               sizeof(Impl_::config_));
}
HloModuleProtoWithConfig::~HloModuleProtoWithConfig() {
  // @@protoc_insertion_point(destructor:xla.HloModuleProtoWithConfig)
  SharedDtor(*this);
}
inline void HloModuleProtoWithConfig::SharedDtor(MessageLite& self) {
  HloModuleProtoWithConfig& this_ = static_cast<HloModuleProtoWithConfig&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.hlo_module_;
  delete this_._impl_.config_;
  this_._impl_.~Impl_();
}

inline void* HloModuleProtoWithConfig::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) HloModuleProtoWithConfig(arena);
}
constexpr auto HloModuleProtoWithConfig::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(HloModuleProtoWithConfig),
                                            alignof(HloModuleProtoWithConfig));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull HloModuleProtoWithConfig::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_HloModuleProtoWithConfig_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &HloModuleProtoWithConfig::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<HloModuleProtoWithConfig>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &HloModuleProtoWithConfig::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<HloModuleProtoWithConfig>(), &HloModuleProtoWithConfig::ByteSizeLong,
            &HloModuleProtoWithConfig::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(HloModuleProtoWithConfig, _impl_._cached_size_),
        false,
    },
    &HloModuleProtoWithConfig::kDescriptorMethods,
    &descriptor_table_xla_2fxla_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* HloModuleProtoWithConfig::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> HloModuleProtoWithConfig::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(HloModuleProtoWithConfig, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::xla::HloModuleProtoWithConfig>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .xla.HloModuleConfigProto config = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(HloModuleProtoWithConfig, _impl_.config_)}},
    // .xla.HloModuleProto hlo_module = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(HloModuleProtoWithConfig, _impl_.hlo_module_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .xla.HloModuleProto hlo_module = 1;
    {PROTOBUF_FIELD_OFFSET(HloModuleProtoWithConfig, _impl_.hlo_module_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .xla.HloModuleConfigProto config = 2;
    {PROTOBUF_FIELD_OFFSET(HloModuleProtoWithConfig, _impl_.config_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::xla::HloModuleProto>()},
    {::_pbi::TcParser::GetTable<::xla::HloModuleConfigProto>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void HloModuleProtoWithConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.HloModuleProtoWithConfig)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.hlo_module_ != nullptr);
      _impl_.hlo_module_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.config_ != nullptr);
      _impl_.config_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* HloModuleProtoWithConfig::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const HloModuleProtoWithConfig& this_ = static_cast<const HloModuleProtoWithConfig&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* HloModuleProtoWithConfig::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const HloModuleProtoWithConfig& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:xla.HloModuleProtoWithConfig)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .xla.HloModuleProto hlo_module = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.hlo_module_, this_._impl_.hlo_module_->GetCachedSize(), target,
                stream);
          }

          // .xla.HloModuleConfigProto config = 2;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.config_, this_._impl_.config_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:xla.HloModuleProtoWithConfig)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t HloModuleProtoWithConfig::ByteSizeLong(const MessageLite& base) {
          const HloModuleProtoWithConfig& this_ = static_cast<const HloModuleProtoWithConfig&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t HloModuleProtoWithConfig::ByteSizeLong() const {
          const HloModuleProtoWithConfig& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:xla.HloModuleProtoWithConfig)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // .xla.HloModuleProto hlo_module = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.hlo_module_);
            }
            // .xla.HloModuleConfigProto config = 2;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.config_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void HloModuleProtoWithConfig::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<HloModuleProtoWithConfig*>(&to_msg);
  auto& from = static_cast<const HloModuleProtoWithConfig&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:xla.HloModuleProtoWithConfig)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.hlo_module_ != nullptr);
      if (_this->_impl_.hlo_module_ == nullptr) {
        _this->_impl_.hlo_module_ =
            ::google::protobuf::Message::CopyConstruct<::xla::HloModuleProto>(arena, *from._impl_.hlo_module_);
      } else {
        _this->_impl_.hlo_module_->MergeFrom(*from._impl_.hlo_module_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.config_ != nullptr);
      if (_this->_impl_.config_ == nullptr) {
        _this->_impl_.config_ =
            ::google::protobuf::Message::CopyConstruct<::xla::HloModuleConfigProto>(arena, *from._impl_.config_);
      } else {
        _this->_impl_.config_->MergeFrom(*from._impl_.config_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void HloModuleProtoWithConfig::CopyFrom(const HloModuleProtoWithConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.HloModuleProtoWithConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void HloModuleProtoWithConfig::InternalSwap(HloModuleProtoWithConfig* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HloModuleProtoWithConfig, _impl_.config_)
      + sizeof(HloModuleProtoWithConfig::_impl_.config_)
      - PROTOBUF_FIELD_OFFSET(HloModuleProtoWithConfig, _impl_.hlo_module_)>(
          reinterpret_cast<char*>(&_impl_.hlo_module_),
          reinterpret_cast<char*>(&other->_impl_.hlo_module_));
}

::google::protobuf::Metadata HloModuleProtoWithConfig::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ScheduleProto_Instruction::_Internal {
 public:
};

ScheduleProto_Instruction::ScheduleProto_Instruction(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:xla.ScheduleProto.Instruction)
}
ScheduleProto_Instruction::ScheduleProto_Instruction(
    ::google::protobuf::Arena* arena, const ScheduleProto_Instruction& from)
    : ScheduleProto_Instruction(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE ScheduleProto_Instruction::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void ScheduleProto_Instruction::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, id_),
           0,
           offsetof(Impl_, end_timestamp_cycles_) -
               offsetof(Impl_, id_) +
               sizeof(Impl_::end_timestamp_cycles_));
}
ScheduleProto_Instruction::~ScheduleProto_Instruction() {
  // @@protoc_insertion_point(destructor:xla.ScheduleProto.Instruction)
  SharedDtor(*this);
}
inline void ScheduleProto_Instruction::SharedDtor(MessageLite& self) {
  ScheduleProto_Instruction& this_ = static_cast<ScheduleProto_Instruction&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* ScheduleProto_Instruction::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) ScheduleProto_Instruction(arena);
}
constexpr auto ScheduleProto_Instruction::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(ScheduleProto_Instruction),
                                            alignof(ScheduleProto_Instruction));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull ScheduleProto_Instruction::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_ScheduleProto_Instruction_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &ScheduleProto_Instruction::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<ScheduleProto_Instruction>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &ScheduleProto_Instruction::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<ScheduleProto_Instruction>(), &ScheduleProto_Instruction::ByteSizeLong,
            &ScheduleProto_Instruction::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(ScheduleProto_Instruction, _impl_._cached_size_),
        false,
    },
    &ScheduleProto_Instruction::kDescriptorMethods,
    &descriptor_table_xla_2fxla_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* ScheduleProto_Instruction::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2> ScheduleProto_Instruction::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::xla::ScheduleProto_Instruction>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int64 id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(ScheduleProto_Instruction, _impl_.id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(ScheduleProto_Instruction, _impl_.id_)}},
    // double start_timestamp_cycles = 2;
    {::_pbi::TcParser::FastF64S1,
     {17, 63, 0, PROTOBUF_FIELD_OFFSET(ScheduleProto_Instruction, _impl_.start_timestamp_cycles_)}},
    // double end_timestamp_cycles = 3;
    {::_pbi::TcParser::FastF64S1,
     {25, 63, 0, PROTOBUF_FIELD_OFFSET(ScheduleProto_Instruction, _impl_.end_timestamp_cycles_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int64 id = 1;
    {PROTOBUF_FIELD_OFFSET(ScheduleProto_Instruction, _impl_.id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // double start_timestamp_cycles = 2;
    {PROTOBUF_FIELD_OFFSET(ScheduleProto_Instruction, _impl_.start_timestamp_cycles_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double end_timestamp_cycles = 3;
    {PROTOBUF_FIELD_OFFSET(ScheduleProto_Instruction, _impl_.end_timestamp_cycles_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void ScheduleProto_Instruction::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.ScheduleProto.Instruction)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.end_timestamp_cycles_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.end_timestamp_cycles_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* ScheduleProto_Instruction::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const ScheduleProto_Instruction& this_ = static_cast<const ScheduleProto_Instruction&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* ScheduleProto_Instruction::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const ScheduleProto_Instruction& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:xla.ScheduleProto.Instruction)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // int64 id = 1;
          if (this_._internal_id() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt64ToArrayWithField<1>(
                    stream, this_._internal_id(), target);
          }

          // double start_timestamp_cycles = 2;
          if (::absl::bit_cast<::uint64_t>(this_._internal_start_timestamp_cycles()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                2, this_._internal_start_timestamp_cycles(), target);
          }

          // double end_timestamp_cycles = 3;
          if (::absl::bit_cast<::uint64_t>(this_._internal_end_timestamp_cycles()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                3, this_._internal_end_timestamp_cycles(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:xla.ScheduleProto.Instruction)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t ScheduleProto_Instruction::ByteSizeLong(const MessageLite& base) {
          const ScheduleProto_Instruction& this_ = static_cast<const ScheduleProto_Instruction&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t ScheduleProto_Instruction::ByteSizeLong() const {
          const ScheduleProto_Instruction& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:xla.ScheduleProto.Instruction)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // int64 id = 1;
            if (this_._internal_id() != 0) {
              total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
                  this_._internal_id());
            }
            // double start_timestamp_cycles = 2;
            if (::absl::bit_cast<::uint64_t>(this_._internal_start_timestamp_cycles()) != 0) {
              total_size += 9;
            }
            // double end_timestamp_cycles = 3;
            if (::absl::bit_cast<::uint64_t>(this_._internal_end_timestamp_cycles()) != 0) {
              total_size += 9;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void ScheduleProto_Instruction::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ScheduleProto_Instruction*>(&to_msg);
  auto& from = static_cast<const ScheduleProto_Instruction&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xla.ScheduleProto.Instruction)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _this->_impl_.id_ = from._impl_.id_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_start_timestamp_cycles()) != 0) {
    _this->_impl_.start_timestamp_cycles_ = from._impl_.start_timestamp_cycles_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_end_timestamp_cycles()) != 0) {
    _this->_impl_.end_timestamp_cycles_ = from._impl_.end_timestamp_cycles_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ScheduleProto_Instruction::CopyFrom(const ScheduleProto_Instruction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.ScheduleProto.Instruction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ScheduleProto_Instruction::InternalSwap(ScheduleProto_Instruction* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ScheduleProto_Instruction, _impl_.end_timestamp_cycles_)
      + sizeof(ScheduleProto_Instruction::_impl_.end_timestamp_cycles_)
      - PROTOBUF_FIELD_OFFSET(ScheduleProto_Instruction, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::google::protobuf::Metadata ScheduleProto_Instruction::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ScheduleProto::_Internal {
 public:
  using HasBits =
      decltype(std::declval<ScheduleProto>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(ScheduleProto, _impl_._has_bits_);
};

void ScheduleProto::clear_hlo_module() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.hlo_module_ != nullptr) _impl_.hlo_module_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ScheduleProto::ScheduleProto(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:xla.ScheduleProto)
}
inline PROTOBUF_NDEBUG_INLINE ScheduleProto::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::xla::ScheduleProto& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        instructions_{visibility, arena, from.instructions_} {}

ScheduleProto::ScheduleProto(
    ::google::protobuf::Arena* arena,
    const ScheduleProto& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ScheduleProto* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.hlo_module_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::xla::HloModuleProto>(
                              arena, *from._impl_.hlo_module_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, computation_id_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, computation_id_),
           offsetof(Impl_, cycles_per_microsecond_) -
               offsetof(Impl_, computation_id_) +
               sizeof(Impl_::cycles_per_microsecond_));

  // @@protoc_insertion_point(copy_constructor:xla.ScheduleProto)
}
inline PROTOBUF_NDEBUG_INLINE ScheduleProto::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        instructions_{visibility, arena} {}

inline void ScheduleProto::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, hlo_module_),
           0,
           offsetof(Impl_, cycles_per_microsecond_) -
               offsetof(Impl_, hlo_module_) +
               sizeof(Impl_::cycles_per_microsecond_));
}
ScheduleProto::~ScheduleProto() {
  // @@protoc_insertion_point(destructor:xla.ScheduleProto)
  SharedDtor(*this);
}
inline void ScheduleProto::SharedDtor(MessageLite& self) {
  ScheduleProto& this_ = static_cast<ScheduleProto&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.hlo_module_;
  this_._impl_.~Impl_();
}

inline void* ScheduleProto::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) ScheduleProto(arena);
}
constexpr auto ScheduleProto::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(ScheduleProto, _impl_.instructions_) +
          decltype(ScheduleProto::_impl_.instructions_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(ScheduleProto), alignof(ScheduleProto), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&ScheduleProto::PlacementNew_,
                                 sizeof(ScheduleProto),
                                 alignof(ScheduleProto));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull ScheduleProto::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_ScheduleProto_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &ScheduleProto::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<ScheduleProto>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &ScheduleProto::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<ScheduleProto>(), &ScheduleProto::ByteSizeLong,
            &ScheduleProto::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(ScheduleProto, _impl_._cached_size_),
        false,
    },
    &ScheduleProto::kDescriptorMethods,
    &descriptor_table_xla_2fxla_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* ScheduleProto::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 2, 0, 2> ScheduleProto::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ScheduleProto, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::xla::ScheduleProto>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // int64 cycles_per_microsecond = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(ScheduleProto, _impl_.cycles_per_microsecond_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(ScheduleProto, _impl_.cycles_per_microsecond_)}},
    // repeated .xla.ScheduleProto.Instruction instructions = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(ScheduleProto, _impl_.instructions_)}},
    // int64 computation_id = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(ScheduleProto, _impl_.computation_id_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(ScheduleProto, _impl_.computation_id_)}},
    // .xla.HloModuleProto hlo_module = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 0, 1, PROTOBUF_FIELD_OFFSET(ScheduleProto, _impl_.hlo_module_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .xla.ScheduleProto.Instruction instructions = 1;
    {PROTOBUF_FIELD_OFFSET(ScheduleProto, _impl_.instructions_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // int64 computation_id = 2;
    {PROTOBUF_FIELD_OFFSET(ScheduleProto, _impl_.computation_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // .xla.HloModuleProto hlo_module = 3;
    {PROTOBUF_FIELD_OFFSET(ScheduleProto, _impl_.hlo_module_), _Internal::kHasBitsOffset + 0, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // int64 cycles_per_microsecond = 4;
    {PROTOBUF_FIELD_OFFSET(ScheduleProto, _impl_.cycles_per_microsecond_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
  }}, {{
    {::_pbi::TcParser::GetTable<::xla::ScheduleProto_Instruction>()},
    {::_pbi::TcParser::GetTable<::xla::HloModuleProto>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void ScheduleProto::Clear() {
// @@protoc_insertion_point(message_clear_start:xla.ScheduleProto)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.instructions_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.hlo_module_ != nullptr);
    _impl_.hlo_module_->Clear();
  }
  ::memset(&_impl_.computation_id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.cycles_per_microsecond_) -
      reinterpret_cast<char*>(&_impl_.computation_id_)) + sizeof(_impl_.cycles_per_microsecond_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* ScheduleProto::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const ScheduleProto& this_ = static_cast<const ScheduleProto&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* ScheduleProto::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const ScheduleProto& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:xla.ScheduleProto)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // repeated .xla.ScheduleProto.Instruction instructions = 1;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_instructions_size());
               i < n; i++) {
            const auto& repfield = this_._internal_instructions().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    1, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          // int64 computation_id = 2;
          if (this_._internal_computation_id() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt64ToArrayWithField<2>(
                    stream, this_._internal_computation_id(), target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .xla.HloModuleProto hlo_module = 3;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                3, *this_._impl_.hlo_module_, this_._impl_.hlo_module_->GetCachedSize(), target,
                stream);
          }

          // int64 cycles_per_microsecond = 4;
          if (this_._internal_cycles_per_microsecond() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt64ToArrayWithField<4>(
                    stream, this_._internal_cycles_per_microsecond(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:xla.ScheduleProto)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t ScheduleProto::ByteSizeLong(const MessageLite& base) {
          const ScheduleProto& this_ = static_cast<const ScheduleProto&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t ScheduleProto::ByteSizeLong() const {
          const ScheduleProto& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:xla.ScheduleProto)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .xla.ScheduleProto.Instruction instructions = 1;
            {
              total_size += 1UL * this_._internal_instructions_size();
              for (const auto& msg : this_._internal_instructions()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
           {
            // .xla.HloModuleProto hlo_module = 3;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.hlo_module_);
            }
          }
           {
            // int64 computation_id = 2;
            if (this_._internal_computation_id() != 0) {
              total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
                  this_._internal_computation_id());
            }
            // int64 cycles_per_microsecond = 4;
            if (this_._internal_cycles_per_microsecond() != 0) {
              total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
                  this_._internal_cycles_per_microsecond());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void ScheduleProto::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ScheduleProto*>(&to_msg);
  auto& from = static_cast<const ScheduleProto&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:xla.ScheduleProto)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_instructions()->MergeFrom(
      from._internal_instructions());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.hlo_module_ != nullptr);
    if (_this->_impl_.hlo_module_ == nullptr) {
      _this->_impl_.hlo_module_ =
          ::google::protobuf::Message::CopyConstruct<::xla::HloModuleProto>(arena, *from._impl_.hlo_module_);
    } else {
      _this->_impl_.hlo_module_->MergeFrom(*from._impl_.hlo_module_);
    }
  }
  if (from._internal_computation_id() != 0) {
    _this->_impl_.computation_id_ = from._impl_.computation_id_;
  }
  if (from._internal_cycles_per_microsecond() != 0) {
    _this->_impl_.cycles_per_microsecond_ = from._impl_.cycles_per_microsecond_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ScheduleProto::CopyFrom(const ScheduleProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xla.ScheduleProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ScheduleProto::InternalSwap(ScheduleProto* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.instructions_.InternalSwap(&other->_impl_.instructions_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ScheduleProto, _impl_.cycles_per_microsecond_)
      + sizeof(ScheduleProto::_impl_.cycles_per_microsecond_)
      - PROTOBUF_FIELD_OFFSET(ScheduleProto, _impl_.hlo_module_)>(
          reinterpret_cast<char*>(&_impl_.hlo_module_),
          reinterpret_cast<char*>(&other->_impl_.hlo_module_));
}

::google::protobuf::Metadata ScheduleProto::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace xla
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_xla_2fxla_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
