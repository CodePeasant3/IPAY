// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: tsl/protobuf/rpc_options.proto
// Protobuf C++ Version: 5.29.0

#include "tsl/protobuf/rpc_options.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace tensorflow {

inline constexpr RPCOptions::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : compression_algorithm_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        compression_level_{0},
        use_rpc_for_inprocess_master_{false},
        cache_rpc_response_{false},
        disable_session_connection_sharing_{false},
        num_channels_per_target_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR RPCOptions::RPCOptions(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct RPCOptionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RPCOptionsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RPCOptionsDefaultTypeInternal() {}
  union {
    RPCOptions _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RPCOptionsDefaultTypeInternal _RPCOptions_default_instance_;
}  // namespace tensorflow
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_tsl_2fprotobuf_2frpc_5foptions_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_tsl_2fprotobuf_2frpc_5foptions_2eproto = nullptr;
const ::uint32_t
    TableStruct_tsl_2fprotobuf_2frpc_5foptions_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::tensorflow::RPCOptions, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::tensorflow::RPCOptions, _impl_.use_rpc_for_inprocess_master_),
        PROTOBUF_FIELD_OFFSET(::tensorflow::RPCOptions, _impl_.compression_algorithm_),
        PROTOBUF_FIELD_OFFSET(::tensorflow::RPCOptions, _impl_.compression_level_),
        PROTOBUF_FIELD_OFFSET(::tensorflow::RPCOptions, _impl_.cache_rpc_response_),
        PROTOBUF_FIELD_OFFSET(::tensorflow::RPCOptions, _impl_.disable_session_connection_sharing_),
        PROTOBUF_FIELD_OFFSET(::tensorflow::RPCOptions, _impl_.num_channels_per_target_),
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::tensorflow::RPCOptions)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::tensorflow::_RPCOptions_default_instance_._instance,
};
const char descriptor_table_protodef_tsl_2fprotobuf_2frpc_5foptions_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\036tsl/protobuf/rpc_options.proto\022\ntensor"
    "flow\"\325\001\n\nRPCOptions\022$\n\034use_rpc_for_inpro"
    "cess_master\030\001 \001(\010\022\035\n\025compression_algorit"
    "hm\030\002 \001(\t\022\031\n\021compression_level\030\003 \001(\005\022\032\n\022c"
    "ache_rpc_response\030\004 \001(\010\022*\n\"disable_sessi"
    "on_connection_sharing\030\005 \001(\010\022\037\n\027num_chann"
    "els_per_target\030\006 \001(\005B@Z>github.com/googl"
    "e/tsl/tsl/go/protobuf/for_core_protos_go"
    "_protob\006proto3"
};
static ::absl::once_flag descriptor_table_tsl_2fprotobuf_2frpc_5foptions_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_tsl_2fprotobuf_2frpc_5foptions_2eproto = {
    false,
    false,
    334,
    descriptor_table_protodef_tsl_2fprotobuf_2frpc_5foptions_2eproto,
    "tsl/protobuf/rpc_options.proto",
    &descriptor_table_tsl_2fprotobuf_2frpc_5foptions_2eproto_once,
    nullptr,
    0,
    1,
    schemas,
    file_default_instances,
    TableStruct_tsl_2fprotobuf_2frpc_5foptions_2eproto::offsets,
    file_level_enum_descriptors_tsl_2fprotobuf_2frpc_5foptions_2eproto,
    file_level_service_descriptors_tsl_2fprotobuf_2frpc_5foptions_2eproto,
};
namespace tensorflow {
// ===================================================================

class RPCOptions::_Internal {
 public:
};

RPCOptions::RPCOptions(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.RPCOptions)
}
inline PROTOBUF_NDEBUG_INLINE RPCOptions::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::tensorflow::RPCOptions& from_msg)
      : compression_algorithm_(arena, from.compression_algorithm_),
        _cached_size_{0} {}

RPCOptions::RPCOptions(
    ::google::protobuf::Arena* arena,
    const RPCOptions& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  RPCOptions* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, compression_level_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, compression_level_),
           offsetof(Impl_, num_channels_per_target_) -
               offsetof(Impl_, compression_level_) +
               sizeof(Impl_::num_channels_per_target_));

  // @@protoc_insertion_point(copy_constructor:tensorflow.RPCOptions)
}
inline PROTOBUF_NDEBUG_INLINE RPCOptions::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : compression_algorithm_(arena),
        _cached_size_{0} {}

inline void RPCOptions::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, compression_level_),
           0,
           offsetof(Impl_, num_channels_per_target_) -
               offsetof(Impl_, compression_level_) +
               sizeof(Impl_::num_channels_per_target_));
}
RPCOptions::~RPCOptions() {
  // @@protoc_insertion_point(destructor:tensorflow.RPCOptions)
  SharedDtor(*this);
}
inline void RPCOptions::SharedDtor(MessageLite& self) {
  RPCOptions& this_ = static_cast<RPCOptions&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.compression_algorithm_.Destroy();
  this_._impl_.~Impl_();
}

inline void* RPCOptions::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) RPCOptions(arena);
}
constexpr auto RPCOptions::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(RPCOptions),
                                            alignof(RPCOptions));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull RPCOptions::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_RPCOptions_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &RPCOptions::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<RPCOptions>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &RPCOptions::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<RPCOptions>(), &RPCOptions::ByteSizeLong,
            &RPCOptions::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(RPCOptions, _impl_._cached_size_),
        false,
    },
    &RPCOptions::kDescriptorMethods,
    &descriptor_table_tsl_2fprotobuf_2frpc_5foptions_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* RPCOptions::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 0, 51, 2> RPCOptions::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tensorflow::RPCOptions>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // bool use_rpc_for_inprocess_master = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(RPCOptions, _impl_.use_rpc_for_inprocess_master_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(RPCOptions, _impl_.use_rpc_for_inprocess_master_)}},
    // string compression_algorithm = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(RPCOptions, _impl_.compression_algorithm_)}},
    // int32 compression_level = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RPCOptions, _impl_.compression_level_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(RPCOptions, _impl_.compression_level_)}},
    // bool cache_rpc_response = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(RPCOptions, _impl_.cache_rpc_response_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(RPCOptions, _impl_.cache_rpc_response_)}},
    // bool disable_session_connection_sharing = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(RPCOptions, _impl_.disable_session_connection_sharing_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(RPCOptions, _impl_.disable_session_connection_sharing_)}},
    // int32 num_channels_per_target = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RPCOptions, _impl_.num_channels_per_target_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(RPCOptions, _impl_.num_channels_per_target_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // bool use_rpc_for_inprocess_master = 1;
    {PROTOBUF_FIELD_OFFSET(RPCOptions, _impl_.use_rpc_for_inprocess_master_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // string compression_algorithm = 2;
    {PROTOBUF_FIELD_OFFSET(RPCOptions, _impl_.compression_algorithm_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 compression_level = 3;
    {PROTOBUF_FIELD_OFFSET(RPCOptions, _impl_.compression_level_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // bool cache_rpc_response = 4;
    {PROTOBUF_FIELD_OFFSET(RPCOptions, _impl_.cache_rpc_response_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool disable_session_connection_sharing = 5;
    {PROTOBUF_FIELD_OFFSET(RPCOptions, _impl_.disable_session_connection_sharing_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // int32 num_channels_per_target = 6;
    {PROTOBUF_FIELD_OFFSET(RPCOptions, _impl_.num_channels_per_target_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
    "\25\0\25\0\0\0\0\0"
    "tensorflow.RPCOptions"
    "compression_algorithm"
  }},
};

PROTOBUF_NOINLINE void RPCOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.RPCOptions)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.compression_algorithm_.ClearToEmpty();
  ::memset(&_impl_.compression_level_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.num_channels_per_target_) -
      reinterpret_cast<char*>(&_impl_.compression_level_)) + sizeof(_impl_.num_channels_per_target_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* RPCOptions::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const RPCOptions& this_ = static_cast<const RPCOptions&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* RPCOptions::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const RPCOptions& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:tensorflow.RPCOptions)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // bool use_rpc_for_inprocess_master = 1;
          if (this_._internal_use_rpc_for_inprocess_master() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                1, this_._internal_use_rpc_for_inprocess_master(), target);
          }

          // string compression_algorithm = 2;
          if (!this_._internal_compression_algorithm().empty()) {
            const std::string& _s = this_._internal_compression_algorithm();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tensorflow.RPCOptions.compression_algorithm");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          // int32 compression_level = 3;
          if (this_._internal_compression_level() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<3>(
                    stream, this_._internal_compression_level(), target);
          }

          // bool cache_rpc_response = 4;
          if (this_._internal_cache_rpc_response() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                4, this_._internal_cache_rpc_response(), target);
          }

          // bool disable_session_connection_sharing = 5;
          if (this_._internal_disable_session_connection_sharing() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                5, this_._internal_disable_session_connection_sharing(), target);
          }

          // int32 num_channels_per_target = 6;
          if (this_._internal_num_channels_per_target() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<6>(
                    stream, this_._internal_num_channels_per_target(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:tensorflow.RPCOptions)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t RPCOptions::ByteSizeLong(const MessageLite& base) {
          const RPCOptions& this_ = static_cast<const RPCOptions&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t RPCOptions::ByteSizeLong() const {
          const RPCOptions& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:tensorflow.RPCOptions)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string compression_algorithm = 2;
            if (!this_._internal_compression_algorithm().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_compression_algorithm());
            }
            // int32 compression_level = 3;
            if (this_._internal_compression_level() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_compression_level());
            }
            // bool use_rpc_for_inprocess_master = 1;
            if (this_._internal_use_rpc_for_inprocess_master() != 0) {
              total_size += 2;
            }
            // bool cache_rpc_response = 4;
            if (this_._internal_cache_rpc_response() != 0) {
              total_size += 2;
            }
            // bool disable_session_connection_sharing = 5;
            if (this_._internal_disable_session_connection_sharing() != 0) {
              total_size += 2;
            }
            // int32 num_channels_per_target = 6;
            if (this_._internal_num_channels_per_target() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_num_channels_per_target());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void RPCOptions::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<RPCOptions*>(&to_msg);
  auto& from = static_cast<const RPCOptions&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.RPCOptions)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_compression_algorithm().empty()) {
    _this->_internal_set_compression_algorithm(from._internal_compression_algorithm());
  }
  if (from._internal_compression_level() != 0) {
    _this->_impl_.compression_level_ = from._impl_.compression_level_;
  }
  if (from._internal_use_rpc_for_inprocess_master() != 0) {
    _this->_impl_.use_rpc_for_inprocess_master_ = from._impl_.use_rpc_for_inprocess_master_;
  }
  if (from._internal_cache_rpc_response() != 0) {
    _this->_impl_.cache_rpc_response_ = from._impl_.cache_rpc_response_;
  }
  if (from._internal_disable_session_connection_sharing() != 0) {
    _this->_impl_.disable_session_connection_sharing_ = from._impl_.disable_session_connection_sharing_;
  }
  if (from._internal_num_channels_per_target() != 0) {
    _this->_impl_.num_channels_per_target_ = from._impl_.num_channels_per_target_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RPCOptions::CopyFrom(const RPCOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.RPCOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void RPCOptions::InternalSwap(RPCOptions* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.compression_algorithm_, &other->_impl_.compression_algorithm_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RPCOptions, _impl_.num_channels_per_target_)
      + sizeof(RPCOptions::_impl_.num_channels_per_target_)
      - PROTOBUF_FIELD_OFFSET(RPCOptions, _impl_.compression_level_)>(
          reinterpret_cast<char*>(&_impl_.compression_level_),
          reinterpret_cast<char*>(&other->_impl_.compression_level_));
}

::google::protobuf::Metadata RPCOptions::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace tensorflow
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_tsl_2fprotobuf_2frpc_5foptions_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
