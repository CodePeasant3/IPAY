// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: tsl/protobuf/histogram.proto
// Protobuf C++ Version: 5.29.0

#include "tsl/protobuf/histogram.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace tensorflow {

inline constexpr HistogramProto::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : bucket_limit_{},
        bucket_{},
        min_{0},
        max_{0},
        num_{0},
        sum_{0},
        sum_squares_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR HistogramProto::HistogramProto(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct HistogramProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HistogramProtoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HistogramProtoDefaultTypeInternal() {}
  union {
    HistogramProto _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HistogramProtoDefaultTypeInternal _HistogramProto_default_instance_;
}  // namespace tensorflow
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_tsl_2fprotobuf_2fhistogram_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_tsl_2fprotobuf_2fhistogram_2eproto = nullptr;
const ::uint32_t
    TableStruct_tsl_2fprotobuf_2fhistogram_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::tensorflow::HistogramProto, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::tensorflow::HistogramProto, _impl_.min_),
        PROTOBUF_FIELD_OFFSET(::tensorflow::HistogramProto, _impl_.max_),
        PROTOBUF_FIELD_OFFSET(::tensorflow::HistogramProto, _impl_.num_),
        PROTOBUF_FIELD_OFFSET(::tensorflow::HistogramProto, _impl_.sum_),
        PROTOBUF_FIELD_OFFSET(::tensorflow::HistogramProto, _impl_.sum_squares_),
        PROTOBUF_FIELD_OFFSET(::tensorflow::HistogramProto, _impl_.bucket_limit_),
        PROTOBUF_FIELD_OFFSET(::tensorflow::HistogramProto, _impl_.bucket_),
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::tensorflow::HistogramProto)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::tensorflow::_HistogramProto_default_instance_._instance,
};
const char descriptor_table_protodef_tsl_2fprotobuf_2fhistogram_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\034tsl/protobuf/histogram.proto\022\ntensorfl"
    "ow\"\207\001\n\016HistogramProto\022\013\n\003min\030\001 \001(\001\022\013\n\003ma"
    "x\030\002 \001(\001\022\013\n\003num\030\003 \001(\001\022\013\n\003sum\030\004 \001(\001\022\023\n\013sum"
    "_squares\030\005 \001(\001\022\030\n\014bucket_limit\030\006 \003(\001B\002\020\001"
    "\022\022\n\006bucket\030\007 \003(\001B\002\020\001B\\\n\030org.tensorflow.f"
    "rameworkP\001Z;github.com/google/tsl/tsl/go"
    "/core/protobuf/summary_go_proto\370\001\001b\006prot"
    "o3"
};
static ::absl::once_flag descriptor_table_tsl_2fprotobuf_2fhistogram_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_tsl_2fprotobuf_2fhistogram_2eproto = {
    false,
    false,
    282,
    descriptor_table_protodef_tsl_2fprotobuf_2fhistogram_2eproto,
    "tsl/protobuf/histogram.proto",
    &descriptor_table_tsl_2fprotobuf_2fhistogram_2eproto_once,
    nullptr,
    0,
    1,
    schemas,
    file_default_instances,
    TableStruct_tsl_2fprotobuf_2fhistogram_2eproto::offsets,
    file_level_enum_descriptors_tsl_2fprotobuf_2fhistogram_2eproto,
    file_level_service_descriptors_tsl_2fprotobuf_2fhistogram_2eproto,
};
namespace tensorflow {
// ===================================================================

class HistogramProto::_Internal {
 public:
};

HistogramProto::HistogramProto(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.HistogramProto)
}
inline PROTOBUF_NDEBUG_INLINE HistogramProto::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::tensorflow::HistogramProto& from_msg)
      : bucket_limit_{visibility, arena, from.bucket_limit_},
        bucket_{visibility, arena, from.bucket_},
        _cached_size_{0} {}

HistogramProto::HistogramProto(
    ::google::protobuf::Arena* arena,
    const HistogramProto& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  HistogramProto* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, min_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, min_),
           offsetof(Impl_, sum_squares_) -
               offsetof(Impl_, min_) +
               sizeof(Impl_::sum_squares_));

  // @@protoc_insertion_point(copy_constructor:tensorflow.HistogramProto)
}
inline PROTOBUF_NDEBUG_INLINE HistogramProto::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : bucket_limit_{visibility, arena},
        bucket_{visibility, arena},
        _cached_size_{0} {}

inline void HistogramProto::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, min_),
           0,
           offsetof(Impl_, sum_squares_) -
               offsetof(Impl_, min_) +
               sizeof(Impl_::sum_squares_));
}
HistogramProto::~HistogramProto() {
  // @@protoc_insertion_point(destructor:tensorflow.HistogramProto)
  SharedDtor(*this);
}
inline void HistogramProto::SharedDtor(MessageLite& self) {
  HistogramProto& this_ = static_cast<HistogramProto&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* HistogramProto::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) HistogramProto(arena);
}
constexpr auto HistogramProto::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(HistogramProto, _impl_.bucket_limit_) +
          decltype(HistogramProto::_impl_.bucket_limit_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(HistogramProto, _impl_.bucket_) +
          decltype(HistogramProto::_impl_.bucket_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(HistogramProto), alignof(HistogramProto), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&HistogramProto::PlacementNew_,
                                 sizeof(HistogramProto),
                                 alignof(HistogramProto));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull HistogramProto::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_HistogramProto_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &HistogramProto::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<HistogramProto>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &HistogramProto::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<HistogramProto>(), &HistogramProto::ByteSizeLong,
            &HistogramProto::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(HistogramProto, _impl_._cached_size_),
        false,
    },
    &HistogramProto::kDescriptorMethods,
    &descriptor_table_tsl_2fprotobuf_2fhistogram_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* HistogramProto::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 0, 0, 2> HistogramProto::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967168,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tensorflow::HistogramProto>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // double min = 1;
    {::_pbi::TcParser::FastF64S1,
     {9, 63, 0, PROTOBUF_FIELD_OFFSET(HistogramProto, _impl_.min_)}},
    // double max = 2;
    {::_pbi::TcParser::FastF64S1,
     {17, 63, 0, PROTOBUF_FIELD_OFFSET(HistogramProto, _impl_.max_)}},
    // double num = 3;
    {::_pbi::TcParser::FastF64S1,
     {25, 63, 0, PROTOBUF_FIELD_OFFSET(HistogramProto, _impl_.num_)}},
    // double sum = 4;
    {::_pbi::TcParser::FastF64S1,
     {33, 63, 0, PROTOBUF_FIELD_OFFSET(HistogramProto, _impl_.sum_)}},
    // double sum_squares = 5;
    {::_pbi::TcParser::FastF64S1,
     {41, 63, 0, PROTOBUF_FIELD_OFFSET(HistogramProto, _impl_.sum_squares_)}},
    // repeated double bucket_limit = 6 [packed = true];
    {::_pbi::TcParser::FastF64P1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(HistogramProto, _impl_.bucket_limit_)}},
    // repeated double bucket = 7 [packed = true];
    {::_pbi::TcParser::FastF64P1,
     {58, 63, 0, PROTOBUF_FIELD_OFFSET(HistogramProto, _impl_.bucket_)}},
  }}, {{
    65535, 65535
  }}, {{
    // double min = 1;
    {PROTOBUF_FIELD_OFFSET(HistogramProto, _impl_.min_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double max = 2;
    {PROTOBUF_FIELD_OFFSET(HistogramProto, _impl_.max_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double num = 3;
    {PROTOBUF_FIELD_OFFSET(HistogramProto, _impl_.num_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double sum = 4;
    {PROTOBUF_FIELD_OFFSET(HistogramProto, _impl_.sum_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double sum_squares = 5;
    {PROTOBUF_FIELD_OFFSET(HistogramProto, _impl_.sum_squares_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // repeated double bucket_limit = 6 [packed = true];
    {PROTOBUF_FIELD_OFFSET(HistogramProto, _impl_.bucket_limit_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedDouble)},
    // repeated double bucket = 7 [packed = true];
    {PROTOBUF_FIELD_OFFSET(HistogramProto, _impl_.bucket_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedDouble)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void HistogramProto::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.HistogramProto)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bucket_limit_.Clear();
  _impl_.bucket_.Clear();
  ::memset(&_impl_.min_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.sum_squares_) -
      reinterpret_cast<char*>(&_impl_.min_)) + sizeof(_impl_.sum_squares_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* HistogramProto::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const HistogramProto& this_ = static_cast<const HistogramProto&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* HistogramProto::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const HistogramProto& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:tensorflow.HistogramProto)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // double min = 1;
          if (::absl::bit_cast<::uint64_t>(this_._internal_min()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                1, this_._internal_min(), target);
          }

          // double max = 2;
          if (::absl::bit_cast<::uint64_t>(this_._internal_max()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                2, this_._internal_max(), target);
          }

          // double num = 3;
          if (::absl::bit_cast<::uint64_t>(this_._internal_num()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                3, this_._internal_num(), target);
          }

          // double sum = 4;
          if (::absl::bit_cast<::uint64_t>(this_._internal_sum()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                4, this_._internal_sum(), target);
          }

          // double sum_squares = 5;
          if (::absl::bit_cast<::uint64_t>(this_._internal_sum_squares()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                5, this_._internal_sum_squares(), target);
          }

          // repeated double bucket_limit = 6 [packed = true];
          if (this_._internal_bucket_limit_size() > 0) {
            target = stream->WriteFixedPacked(6, this_._internal_bucket_limit(), target);
          }

          // repeated double bucket = 7 [packed = true];
          if (this_._internal_bucket_size() > 0) {
            target = stream->WriteFixedPacked(7, this_._internal_bucket(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:tensorflow.HistogramProto)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t HistogramProto::ByteSizeLong(const MessageLite& base) {
          const HistogramProto& this_ = static_cast<const HistogramProto&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t HistogramProto::ByteSizeLong() const {
          const HistogramProto& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:tensorflow.HistogramProto)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated double bucket_limit = 6 [packed = true];
            {
              std::size_t data_size = std::size_t{8} *
                  ::_pbi::FromIntSize(this_._internal_bucket_limit_size());
              std::size_t tag_size = data_size == 0
                  ? 0
                  : 1 + ::_pbi::WireFormatLite::Int32Size(
                                      static_cast<int32_t>(data_size));
              total_size += tag_size + data_size;
            }
            // repeated double bucket = 7 [packed = true];
            {
              std::size_t data_size = std::size_t{8} *
                  ::_pbi::FromIntSize(this_._internal_bucket_size());
              std::size_t tag_size = data_size == 0
                  ? 0
                  : 1 + ::_pbi::WireFormatLite::Int32Size(
                                      static_cast<int32_t>(data_size));
              total_size += tag_size + data_size;
            }
          }
           {
            // double min = 1;
            if (::absl::bit_cast<::uint64_t>(this_._internal_min()) != 0) {
              total_size += 9;
            }
            // double max = 2;
            if (::absl::bit_cast<::uint64_t>(this_._internal_max()) != 0) {
              total_size += 9;
            }
            // double num = 3;
            if (::absl::bit_cast<::uint64_t>(this_._internal_num()) != 0) {
              total_size += 9;
            }
            // double sum = 4;
            if (::absl::bit_cast<::uint64_t>(this_._internal_sum()) != 0) {
              total_size += 9;
            }
            // double sum_squares = 5;
            if (::absl::bit_cast<::uint64_t>(this_._internal_sum_squares()) != 0) {
              total_size += 9;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void HistogramProto::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<HistogramProto*>(&to_msg);
  auto& from = static_cast<const HistogramProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.HistogramProto)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_bucket_limit()->MergeFrom(from._internal_bucket_limit());
  _this->_internal_mutable_bucket()->MergeFrom(from._internal_bucket());
  if (::absl::bit_cast<::uint64_t>(from._internal_min()) != 0) {
    _this->_impl_.min_ = from._impl_.min_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_max()) != 0) {
    _this->_impl_.max_ = from._impl_.max_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_num()) != 0) {
    _this->_impl_.num_ = from._impl_.num_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_sum()) != 0) {
    _this->_impl_.sum_ = from._impl_.sum_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_sum_squares()) != 0) {
    _this->_impl_.sum_squares_ = from._impl_.sum_squares_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void HistogramProto::CopyFrom(const HistogramProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.HistogramProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void HistogramProto::InternalSwap(HistogramProto* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.bucket_limit_.InternalSwap(&other->_impl_.bucket_limit_);
  _impl_.bucket_.InternalSwap(&other->_impl_.bucket_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HistogramProto, _impl_.sum_squares_)
      + sizeof(HistogramProto::_impl_.sum_squares_)
      - PROTOBUF_FIELD_OFFSET(HistogramProto, _impl_.min_)>(
          reinterpret_cast<char*>(&_impl_.min_),
          reinterpret_cast<char*>(&other->_impl_.min_));
}

::google::protobuf::Metadata HistogramProto::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace tensorflow
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_tsl_2fprotobuf_2fhistogram_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
