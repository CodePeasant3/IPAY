// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: tensorflow/core/protobuf/replay_log.proto
// Protobuf C++ Version: 5.29.0

#include "tensorflow/core/protobuf/replay_log.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace tensorflow {

inline constexpr NewReplaySession::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        session_handle_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        devices_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR NewReplaySession::NewReplaySession(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct NewReplaySessionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NewReplaySessionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~NewReplaySessionDefaultTypeInternal() {}
  union {
    NewReplaySession _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NewReplaySessionDefaultTypeInternal _NewReplaySession_default_instance_;

inline constexpr ReplayOp::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : start_time_us_{0},
        end_time_us_{0},
        op_{},
        response_{},
        _cached_size_{0},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR ReplayOp::ReplayOp(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ReplayOpDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReplayOpDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReplayOpDefaultTypeInternal() {}
  union {
    ReplayOp _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReplayOpDefaultTypeInternal _ReplayOp_default_instance_;
}  // namespace tensorflow
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_tensorflow_2fcore_2fprotobuf_2freplay_5flog_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_tensorflow_2fcore_2fprotobuf_2freplay_5flog_2eproto = nullptr;
const ::uint32_t
    TableStruct_tensorflow_2fcore_2fprotobuf_2freplay_5flog_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        PROTOBUF_FIELD_OFFSET(::tensorflow::NewReplaySession, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::tensorflow::NewReplaySession, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::tensorflow::NewReplaySession, _impl_.devices_),
        PROTOBUF_FIELD_OFFSET(::tensorflow::NewReplaySession, _impl_.session_handle_),
        0,
        ~0u,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::tensorflow::ReplayOp, _internal_metadata_),
        ~0u,  // no _extensions_
        PROTOBUF_FIELD_OFFSET(::tensorflow::ReplayOp, _impl_._oneof_case_[0]),
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::tensorflow::ReplayOp, _impl_.start_time_us_),
        PROTOBUF_FIELD_OFFSET(::tensorflow::ReplayOp, _impl_.end_time_us_),
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        PROTOBUF_FIELD_OFFSET(::tensorflow::ReplayOp, _impl_.op_),
        PROTOBUF_FIELD_OFFSET(::tensorflow::ReplayOp, _impl_.response_),
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, 10, -1, sizeof(::tensorflow::NewReplaySession)},
        {12, -1, -1, sizeof(::tensorflow::ReplayOp)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::tensorflow::_NewReplaySession_default_instance_._instance,
    &::tensorflow::_ReplayOp_default_instance_._instance,
};
const char descriptor_table_protodef_tensorflow_2fcore_2fprotobuf_2freplay_5flog_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n)tensorflow/core/protobuf/replay_log.pr"
    "oto\022\ntensorflow\032%tensorflow/core/protobu"
    "f/master.proto\"\\\n\020NewReplaySession\0220\n\007de"
    "vices\030\001 \001(\0132\037.tensorflow.ListDevicesResp"
    "onse\022\026\n\016session_handle\030\002 \001(\t\"\350\n\n\010ReplayO"
    "p\022\025\n\rstart_time_us\030\037 \001(\001\022\023\n\013end_time_us\030"
    "  \001(\001\022:\n\016create_session\030\001 \001(\0132 .tensorfl"
    "ow.CreateSessionRequestH\000\022:\n\016extend_sess"
    "ion\030\002 \001(\0132 .tensorflow.ExtendSessionRequ"
    "estH\000\022\?\n\021partial_run_setup\030\003 \001(\0132\".tenso"
    "rflow.PartialRunSetupRequestH\000\022.\n\010run_st"
    "ep\030\004 \001(\0132\032.tensorflow.RunStepRequestH\000\0228"
    "\n\rclose_session\030\005 \001(\0132\037.tensorflow.Close"
    "SessionRequestH\000\0226\n\014list_devices\030\006 \001(\0132\036"
    ".tensorflow.ListDevicesRequestH\000\0221\n\rrese"
    "t_request\030\007 \001(\0132\030.tensorflow.ResetReques"
    "tH\000\0228\n\rmake_callable\030\010 \001(\0132\037.tensorflow."
    "MakeCallableRequestH\000\0226\n\014run_callable\030\t "
    "\001(\0132\036.tensorflow.RunCallableRequestH\000\022>\n"
    "\020release_callable\030\n \001(\0132\".tensorflow.Rel"
    "easeCallableRequestH\000\022:\n\022new_replay_sess"
    "ion\030\013 \001(\0132\034.tensorflow.NewReplaySessionH"
    "\000\022D\n\027create_session_response\030\025 \001(\0132!.ten"
    "sorflow.CreateSessionResponseH\001\022D\n\027exten"
    "d_session_response\030\026 \001(\0132!.tensorflow.Ex"
    "tendSessionResponseH\001\022I\n\032partial_run_set"
    "up_response\030\027 \001(\0132#.tensorflow.PartialRu"
    "nSetupResponseH\001\0228\n\021run_step_response\030\030 "
    "\001(\0132\033.tensorflow.RunStepResponseH\001\022B\n\026cl"
    "ose_session_response\030\031 \001(\0132 .tensorflow."
    "CloseSessionResponseH\001\022@\n\025list_devices_r"
    "esponse\030\032 \001(\0132\037.tensorflow.ListDevicesRe"
    "sponseH\001\022;\n\026reset_request_response\030\033 \001(\013"
    "2\031.tensorflow.ResetResponseH\001\022B\n\026make_ca"
    "llable_response\030\034 \001(\0132 .tensorflow.MakeC"
    "allableResponseH\001\022@\n\025run_callable_respon"
    "se\030\035 \001(\0132\037.tensorflow.RunCallableRespons"
    "eH\001\022H\n\031release_callable_response\030\036 \001(\0132#"
    ".tensorflow.ReleaseCallableResponseH\001B\004\n"
    "\002opB\n\n\010responseBZZUgithub.com/tensorflow"
    "/tensorflow/tensorflow/go/core/protobuf/"
    "for_core_protos_go_proto\370\001\001b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_tensorflow_2fcore_2fprotobuf_2freplay_5flog_2eproto_deps[1] =
    {
        &::descriptor_table_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto,
};
static ::absl::once_flag descriptor_table_tensorflow_2fcore_2fprotobuf_2freplay_5flog_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_tensorflow_2fcore_2fprotobuf_2freplay_5flog_2eproto = {
    false,
    false,
    1675,
    descriptor_table_protodef_tensorflow_2fcore_2fprotobuf_2freplay_5flog_2eproto,
    "tensorflow/core/protobuf/replay_log.proto",
    &descriptor_table_tensorflow_2fcore_2fprotobuf_2freplay_5flog_2eproto_once,
    descriptor_table_tensorflow_2fcore_2fprotobuf_2freplay_5flog_2eproto_deps,
    1,
    2,
    schemas,
    file_default_instances,
    TableStruct_tensorflow_2fcore_2fprotobuf_2freplay_5flog_2eproto::offsets,
    file_level_enum_descriptors_tensorflow_2fcore_2fprotobuf_2freplay_5flog_2eproto,
    file_level_service_descriptors_tensorflow_2fcore_2fprotobuf_2freplay_5flog_2eproto,
};
namespace tensorflow {
// ===================================================================

class NewReplaySession::_Internal {
 public:
  using HasBits =
      decltype(std::declval<NewReplaySession>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(NewReplaySession, _impl_._has_bits_);
};

void NewReplaySession::clear_devices() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.devices_ != nullptr) _impl_.devices_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
NewReplaySession::NewReplaySession(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.NewReplaySession)
}
inline PROTOBUF_NDEBUG_INLINE NewReplaySession::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::tensorflow::NewReplaySession& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        session_handle_(arena, from.session_handle_) {}

NewReplaySession::NewReplaySession(
    ::google::protobuf::Arena* arena,
    const NewReplaySession& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  NewReplaySession* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.devices_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::tensorflow::ListDevicesResponse>(
                              arena, *from._impl_.devices_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:tensorflow.NewReplaySession)
}
inline PROTOBUF_NDEBUG_INLINE NewReplaySession::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        session_handle_(arena) {}

inline void NewReplaySession::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.devices_ = {};
}
NewReplaySession::~NewReplaySession() {
  // @@protoc_insertion_point(destructor:tensorflow.NewReplaySession)
  SharedDtor(*this);
}
inline void NewReplaySession::SharedDtor(MessageLite& self) {
  NewReplaySession& this_ = static_cast<NewReplaySession&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.session_handle_.Destroy();
  delete this_._impl_.devices_;
  this_._impl_.~Impl_();
}

inline void* NewReplaySession::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) NewReplaySession(arena);
}
constexpr auto NewReplaySession::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(NewReplaySession),
                                            alignof(NewReplaySession));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull NewReplaySession::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_NewReplaySession_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &NewReplaySession::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<NewReplaySession>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &NewReplaySession::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<NewReplaySession>(), &NewReplaySession::ByteSizeLong,
            &NewReplaySession::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(NewReplaySession, _impl_._cached_size_),
        false,
    },
    &NewReplaySession::kDescriptorMethods,
    &descriptor_table_tensorflow_2fcore_2fprotobuf_2freplay_5flog_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* NewReplaySession::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 50, 2> NewReplaySession::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(NewReplaySession, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tensorflow::NewReplaySession>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string session_handle = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(NewReplaySession, _impl_.session_handle_)}},
    // .tensorflow.ListDevicesResponse devices = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(NewReplaySession, _impl_.devices_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .tensorflow.ListDevicesResponse devices = 1;
    {PROTOBUF_FIELD_OFFSET(NewReplaySession, _impl_.devices_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string session_handle = 2;
    {PROTOBUF_FIELD_OFFSET(NewReplaySession, _impl_.session_handle_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tensorflow::ListDevicesResponse>()},
  }}, {{
    "\33\0\16\0\0\0\0\0"
    "tensorflow.NewReplaySession"
    "session_handle"
  }},
};

PROTOBUF_NOINLINE void NewReplaySession::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.NewReplaySession)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.session_handle_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.devices_ != nullptr);
    _impl_.devices_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* NewReplaySession::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const NewReplaySession& this_ = static_cast<const NewReplaySession&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* NewReplaySession::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const NewReplaySession& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:tensorflow.NewReplaySession)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .tensorflow.ListDevicesResponse devices = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.devices_, this_._impl_.devices_->GetCachedSize(), target,
                stream);
          }

          // string session_handle = 2;
          if (!this_._internal_session_handle().empty()) {
            const std::string& _s = this_._internal_session_handle();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tensorflow.NewReplaySession.session_handle");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:tensorflow.NewReplaySession)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t NewReplaySession::ByteSizeLong(const MessageLite& base) {
          const NewReplaySession& this_ = static_cast<const NewReplaySession&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t NewReplaySession::ByteSizeLong() const {
          const NewReplaySession& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:tensorflow.NewReplaySession)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string session_handle = 2;
            if (!this_._internal_session_handle().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_session_handle());
            }
          }
           {
            // .tensorflow.ListDevicesResponse devices = 1;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.devices_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void NewReplaySession::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<NewReplaySession*>(&to_msg);
  auto& from = static_cast<const NewReplaySession&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.NewReplaySession)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_session_handle().empty()) {
    _this->_internal_set_session_handle(from._internal_session_handle());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.devices_ != nullptr);
    if (_this->_impl_.devices_ == nullptr) {
      _this->_impl_.devices_ =
          ::google::protobuf::Message::CopyConstruct<::tensorflow::ListDevicesResponse>(arena, *from._impl_.devices_);
    } else {
      _this->_impl_.devices_->MergeFrom(*from._impl_.devices_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void NewReplaySession::CopyFrom(const NewReplaySession& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.NewReplaySession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void NewReplaySession::InternalSwap(NewReplaySession* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.session_handle_, &other->_impl_.session_handle_, arena);
  swap(_impl_.devices_, other->_impl_.devices_);
}

::google::protobuf::Metadata NewReplaySession::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ReplayOp::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
      PROTOBUF_FIELD_OFFSET(::tensorflow::ReplayOp, _impl_._oneof_case_);
};

void ReplayOp::set_allocated_create_session(::tensorflow::CreateSessionRequest* create_session) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_op();
  if (create_session) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(create_session)->GetArena();
    if (message_arena != submessage_arena) {
      create_session = ::google::protobuf::internal::GetOwnedMessage(message_arena, create_session, submessage_arena);
    }
    set_has_create_session();
    _impl_.op_.create_session_ = create_session;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ReplayOp.create_session)
}
void ReplayOp::clear_create_session() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (op_case() == kCreateSession) {
    if (GetArena() == nullptr) {
      delete _impl_.op_.create_session_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.op_.create_session_);
    }
    clear_has_op();
  }
}
void ReplayOp::set_allocated_extend_session(::tensorflow::ExtendSessionRequest* extend_session) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_op();
  if (extend_session) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(extend_session)->GetArena();
    if (message_arena != submessage_arena) {
      extend_session = ::google::protobuf::internal::GetOwnedMessage(message_arena, extend_session, submessage_arena);
    }
    set_has_extend_session();
    _impl_.op_.extend_session_ = extend_session;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ReplayOp.extend_session)
}
void ReplayOp::clear_extend_session() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (op_case() == kExtendSession) {
    if (GetArena() == nullptr) {
      delete _impl_.op_.extend_session_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.op_.extend_session_);
    }
    clear_has_op();
  }
}
void ReplayOp::set_allocated_partial_run_setup(::tensorflow::PartialRunSetupRequest* partial_run_setup) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_op();
  if (partial_run_setup) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(partial_run_setup)->GetArena();
    if (message_arena != submessage_arena) {
      partial_run_setup = ::google::protobuf::internal::GetOwnedMessage(message_arena, partial_run_setup, submessage_arena);
    }
    set_has_partial_run_setup();
    _impl_.op_.partial_run_setup_ = partial_run_setup;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ReplayOp.partial_run_setup)
}
void ReplayOp::clear_partial_run_setup() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (op_case() == kPartialRunSetup) {
    if (GetArena() == nullptr) {
      delete _impl_.op_.partial_run_setup_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.op_.partial_run_setup_);
    }
    clear_has_op();
  }
}
void ReplayOp::set_allocated_run_step(::tensorflow::RunStepRequest* run_step) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_op();
  if (run_step) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(run_step)->GetArena();
    if (message_arena != submessage_arena) {
      run_step = ::google::protobuf::internal::GetOwnedMessage(message_arena, run_step, submessage_arena);
    }
    set_has_run_step();
    _impl_.op_.run_step_ = run_step;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ReplayOp.run_step)
}
void ReplayOp::clear_run_step() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (op_case() == kRunStep) {
    if (GetArena() == nullptr) {
      delete _impl_.op_.run_step_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.op_.run_step_);
    }
    clear_has_op();
  }
}
void ReplayOp::set_allocated_close_session(::tensorflow::CloseSessionRequest* close_session) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_op();
  if (close_session) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(close_session)->GetArena();
    if (message_arena != submessage_arena) {
      close_session = ::google::protobuf::internal::GetOwnedMessage(message_arena, close_session, submessage_arena);
    }
    set_has_close_session();
    _impl_.op_.close_session_ = close_session;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ReplayOp.close_session)
}
void ReplayOp::clear_close_session() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (op_case() == kCloseSession) {
    if (GetArena() == nullptr) {
      delete _impl_.op_.close_session_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.op_.close_session_);
    }
    clear_has_op();
  }
}
void ReplayOp::set_allocated_list_devices(::tensorflow::ListDevicesRequest* list_devices) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_op();
  if (list_devices) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(list_devices)->GetArena();
    if (message_arena != submessage_arena) {
      list_devices = ::google::protobuf::internal::GetOwnedMessage(message_arena, list_devices, submessage_arena);
    }
    set_has_list_devices();
    _impl_.op_.list_devices_ = list_devices;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ReplayOp.list_devices)
}
void ReplayOp::clear_list_devices() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (op_case() == kListDevices) {
    if (GetArena() == nullptr) {
      delete _impl_.op_.list_devices_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.op_.list_devices_);
    }
    clear_has_op();
  }
}
void ReplayOp::set_allocated_reset_request(::tensorflow::ResetRequest* reset_request) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_op();
  if (reset_request) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(reset_request)->GetArena();
    if (message_arena != submessage_arena) {
      reset_request = ::google::protobuf::internal::GetOwnedMessage(message_arena, reset_request, submessage_arena);
    }
    set_has_reset_request();
    _impl_.op_.reset_request_ = reset_request;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ReplayOp.reset_request)
}
void ReplayOp::clear_reset_request() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (op_case() == kResetRequest) {
    if (GetArena() == nullptr) {
      delete _impl_.op_.reset_request_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.op_.reset_request_);
    }
    clear_has_op();
  }
}
void ReplayOp::set_allocated_make_callable(::tensorflow::MakeCallableRequest* make_callable) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_op();
  if (make_callable) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(make_callable)->GetArena();
    if (message_arena != submessage_arena) {
      make_callable = ::google::protobuf::internal::GetOwnedMessage(message_arena, make_callable, submessage_arena);
    }
    set_has_make_callable();
    _impl_.op_.make_callable_ = make_callable;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ReplayOp.make_callable)
}
void ReplayOp::clear_make_callable() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (op_case() == kMakeCallable) {
    if (GetArena() == nullptr) {
      delete _impl_.op_.make_callable_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.op_.make_callable_);
    }
    clear_has_op();
  }
}
void ReplayOp::set_allocated_run_callable(::tensorflow::RunCallableRequest* run_callable) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_op();
  if (run_callable) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(run_callable)->GetArena();
    if (message_arena != submessage_arena) {
      run_callable = ::google::protobuf::internal::GetOwnedMessage(message_arena, run_callable, submessage_arena);
    }
    set_has_run_callable();
    _impl_.op_.run_callable_ = run_callable;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ReplayOp.run_callable)
}
void ReplayOp::clear_run_callable() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (op_case() == kRunCallable) {
    if (GetArena() == nullptr) {
      delete _impl_.op_.run_callable_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.op_.run_callable_);
    }
    clear_has_op();
  }
}
void ReplayOp::set_allocated_release_callable(::tensorflow::ReleaseCallableRequest* release_callable) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_op();
  if (release_callable) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(release_callable)->GetArena();
    if (message_arena != submessage_arena) {
      release_callable = ::google::protobuf::internal::GetOwnedMessage(message_arena, release_callable, submessage_arena);
    }
    set_has_release_callable();
    _impl_.op_.release_callable_ = release_callable;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ReplayOp.release_callable)
}
void ReplayOp::clear_release_callable() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (op_case() == kReleaseCallable) {
    if (GetArena() == nullptr) {
      delete _impl_.op_.release_callable_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.op_.release_callable_);
    }
    clear_has_op();
  }
}
void ReplayOp::set_allocated_new_replay_session(::tensorflow::NewReplaySession* new_replay_session) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_op();
  if (new_replay_session) {
    ::google::protobuf::Arena* submessage_arena = new_replay_session->GetArena();
    if (message_arena != submessage_arena) {
      new_replay_session = ::google::protobuf::internal::GetOwnedMessage(message_arena, new_replay_session, submessage_arena);
    }
    set_has_new_replay_session();
    _impl_.op_.new_replay_session_ = new_replay_session;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ReplayOp.new_replay_session)
}
void ReplayOp::set_allocated_create_session_response(::tensorflow::CreateSessionResponse* create_session_response) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_response();
  if (create_session_response) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(create_session_response)->GetArena();
    if (message_arena != submessage_arena) {
      create_session_response = ::google::protobuf::internal::GetOwnedMessage(message_arena, create_session_response, submessage_arena);
    }
    set_has_create_session_response();
    _impl_.response_.create_session_response_ = create_session_response;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ReplayOp.create_session_response)
}
void ReplayOp::clear_create_session_response() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (response_case() == kCreateSessionResponse) {
    if (GetArena() == nullptr) {
      delete _impl_.response_.create_session_response_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.response_.create_session_response_);
    }
    clear_has_response();
  }
}
void ReplayOp::set_allocated_extend_session_response(::tensorflow::ExtendSessionResponse* extend_session_response) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_response();
  if (extend_session_response) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(extend_session_response)->GetArena();
    if (message_arena != submessage_arena) {
      extend_session_response = ::google::protobuf::internal::GetOwnedMessage(message_arena, extend_session_response, submessage_arena);
    }
    set_has_extend_session_response();
    _impl_.response_.extend_session_response_ = extend_session_response;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ReplayOp.extend_session_response)
}
void ReplayOp::clear_extend_session_response() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (response_case() == kExtendSessionResponse) {
    if (GetArena() == nullptr) {
      delete _impl_.response_.extend_session_response_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.response_.extend_session_response_);
    }
    clear_has_response();
  }
}
void ReplayOp::set_allocated_partial_run_setup_response(::tensorflow::PartialRunSetupResponse* partial_run_setup_response) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_response();
  if (partial_run_setup_response) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(partial_run_setup_response)->GetArena();
    if (message_arena != submessage_arena) {
      partial_run_setup_response = ::google::protobuf::internal::GetOwnedMessage(message_arena, partial_run_setup_response, submessage_arena);
    }
    set_has_partial_run_setup_response();
    _impl_.response_.partial_run_setup_response_ = partial_run_setup_response;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ReplayOp.partial_run_setup_response)
}
void ReplayOp::clear_partial_run_setup_response() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (response_case() == kPartialRunSetupResponse) {
    if (GetArena() == nullptr) {
      delete _impl_.response_.partial_run_setup_response_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.response_.partial_run_setup_response_);
    }
    clear_has_response();
  }
}
void ReplayOp::set_allocated_run_step_response(::tensorflow::RunStepResponse* run_step_response) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_response();
  if (run_step_response) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(run_step_response)->GetArena();
    if (message_arena != submessage_arena) {
      run_step_response = ::google::protobuf::internal::GetOwnedMessage(message_arena, run_step_response, submessage_arena);
    }
    set_has_run_step_response();
    _impl_.response_.run_step_response_ = run_step_response;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ReplayOp.run_step_response)
}
void ReplayOp::clear_run_step_response() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (response_case() == kRunStepResponse) {
    if (GetArena() == nullptr) {
      delete _impl_.response_.run_step_response_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.response_.run_step_response_);
    }
    clear_has_response();
  }
}
void ReplayOp::set_allocated_close_session_response(::tensorflow::CloseSessionResponse* close_session_response) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_response();
  if (close_session_response) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(close_session_response)->GetArena();
    if (message_arena != submessage_arena) {
      close_session_response = ::google::protobuf::internal::GetOwnedMessage(message_arena, close_session_response, submessage_arena);
    }
    set_has_close_session_response();
    _impl_.response_.close_session_response_ = close_session_response;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ReplayOp.close_session_response)
}
void ReplayOp::clear_close_session_response() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (response_case() == kCloseSessionResponse) {
    if (GetArena() == nullptr) {
      delete _impl_.response_.close_session_response_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.response_.close_session_response_);
    }
    clear_has_response();
  }
}
void ReplayOp::set_allocated_list_devices_response(::tensorflow::ListDevicesResponse* list_devices_response) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_response();
  if (list_devices_response) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(list_devices_response)->GetArena();
    if (message_arena != submessage_arena) {
      list_devices_response = ::google::protobuf::internal::GetOwnedMessage(message_arena, list_devices_response, submessage_arena);
    }
    set_has_list_devices_response();
    _impl_.response_.list_devices_response_ = list_devices_response;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ReplayOp.list_devices_response)
}
void ReplayOp::clear_list_devices_response() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (response_case() == kListDevicesResponse) {
    if (GetArena() == nullptr) {
      delete _impl_.response_.list_devices_response_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.response_.list_devices_response_);
    }
    clear_has_response();
  }
}
void ReplayOp::set_allocated_reset_request_response(::tensorflow::ResetResponse* reset_request_response) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_response();
  if (reset_request_response) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(reset_request_response)->GetArena();
    if (message_arena != submessage_arena) {
      reset_request_response = ::google::protobuf::internal::GetOwnedMessage(message_arena, reset_request_response, submessage_arena);
    }
    set_has_reset_request_response();
    _impl_.response_.reset_request_response_ = reset_request_response;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ReplayOp.reset_request_response)
}
void ReplayOp::clear_reset_request_response() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (response_case() == kResetRequestResponse) {
    if (GetArena() == nullptr) {
      delete _impl_.response_.reset_request_response_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.response_.reset_request_response_);
    }
    clear_has_response();
  }
}
void ReplayOp::set_allocated_make_callable_response(::tensorflow::MakeCallableResponse* make_callable_response) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_response();
  if (make_callable_response) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(make_callable_response)->GetArena();
    if (message_arena != submessage_arena) {
      make_callable_response = ::google::protobuf::internal::GetOwnedMessage(message_arena, make_callable_response, submessage_arena);
    }
    set_has_make_callable_response();
    _impl_.response_.make_callable_response_ = make_callable_response;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ReplayOp.make_callable_response)
}
void ReplayOp::clear_make_callable_response() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (response_case() == kMakeCallableResponse) {
    if (GetArena() == nullptr) {
      delete _impl_.response_.make_callable_response_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.response_.make_callable_response_);
    }
    clear_has_response();
  }
}
void ReplayOp::set_allocated_run_callable_response(::tensorflow::RunCallableResponse* run_callable_response) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_response();
  if (run_callable_response) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(run_callable_response)->GetArena();
    if (message_arena != submessage_arena) {
      run_callable_response = ::google::protobuf::internal::GetOwnedMessage(message_arena, run_callable_response, submessage_arena);
    }
    set_has_run_callable_response();
    _impl_.response_.run_callable_response_ = run_callable_response;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ReplayOp.run_callable_response)
}
void ReplayOp::clear_run_callable_response() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (response_case() == kRunCallableResponse) {
    if (GetArena() == nullptr) {
      delete _impl_.response_.run_callable_response_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.response_.run_callable_response_);
    }
    clear_has_response();
  }
}
void ReplayOp::set_allocated_release_callable_response(::tensorflow::ReleaseCallableResponse* release_callable_response) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_response();
  if (release_callable_response) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(release_callable_response)->GetArena();
    if (message_arena != submessage_arena) {
      release_callable_response = ::google::protobuf::internal::GetOwnedMessage(message_arena, release_callable_response, submessage_arena);
    }
    set_has_release_callable_response();
    _impl_.response_.release_callable_response_ = release_callable_response;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ReplayOp.release_callable_response)
}
void ReplayOp::clear_release_callable_response() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (response_case() == kReleaseCallableResponse) {
    if (GetArena() == nullptr) {
      delete _impl_.response_.release_callable_response_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.response_.release_callable_response_);
    }
    clear_has_response();
  }
}
ReplayOp::ReplayOp(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.ReplayOp)
}
inline PROTOBUF_NDEBUG_INLINE ReplayOp::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::tensorflow::ReplayOp& from_msg)
      : op_{},
        response_{},
        _cached_size_{0},
        _oneof_case_{from._oneof_case_[0], from._oneof_case_[1]} {}

ReplayOp::ReplayOp(
    ::google::protobuf::Arena* arena,
    const ReplayOp& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ReplayOp* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, start_time_us_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, start_time_us_),
           offsetof(Impl_, end_time_us_) -
               offsetof(Impl_, start_time_us_) +
               sizeof(Impl_::end_time_us_));
  switch (op_case()) {
    case OP_NOT_SET:
      break;
      case kCreateSession:
        _impl_.op_.create_session_ = ::google::protobuf::Message::CopyConstruct<::tensorflow::CreateSessionRequest>(arena, *from._impl_.op_.create_session_);
        break;
      case kExtendSession:
        _impl_.op_.extend_session_ = ::google::protobuf::Message::CopyConstruct<::tensorflow::ExtendSessionRequest>(arena, *from._impl_.op_.extend_session_);
        break;
      case kPartialRunSetup:
        _impl_.op_.partial_run_setup_ = ::google::protobuf::Message::CopyConstruct<::tensorflow::PartialRunSetupRequest>(arena, *from._impl_.op_.partial_run_setup_);
        break;
      case kRunStep:
        _impl_.op_.run_step_ = ::google::protobuf::Message::CopyConstruct<::tensorflow::RunStepRequest>(arena, *from._impl_.op_.run_step_);
        break;
      case kCloseSession:
        _impl_.op_.close_session_ = ::google::protobuf::Message::CopyConstruct<::tensorflow::CloseSessionRequest>(arena, *from._impl_.op_.close_session_);
        break;
      case kListDevices:
        _impl_.op_.list_devices_ = ::google::protobuf::Message::CopyConstruct<::tensorflow::ListDevicesRequest>(arena, *from._impl_.op_.list_devices_);
        break;
      case kResetRequest:
        _impl_.op_.reset_request_ = ::google::protobuf::Message::CopyConstruct<::tensorflow::ResetRequest>(arena, *from._impl_.op_.reset_request_);
        break;
      case kMakeCallable:
        _impl_.op_.make_callable_ = ::google::protobuf::Message::CopyConstruct<::tensorflow::MakeCallableRequest>(arena, *from._impl_.op_.make_callable_);
        break;
      case kRunCallable:
        _impl_.op_.run_callable_ = ::google::protobuf::Message::CopyConstruct<::tensorflow::RunCallableRequest>(arena, *from._impl_.op_.run_callable_);
        break;
      case kReleaseCallable:
        _impl_.op_.release_callable_ = ::google::protobuf::Message::CopyConstruct<::tensorflow::ReleaseCallableRequest>(arena, *from._impl_.op_.release_callable_);
        break;
      case kNewReplaySession:
        _impl_.op_.new_replay_session_ = ::google::protobuf::Message::CopyConstruct<::tensorflow::NewReplaySession>(arena, *from._impl_.op_.new_replay_session_);
        break;
  }
  switch (response_case()) {
    case RESPONSE_NOT_SET:
      break;
      case kCreateSessionResponse:
        _impl_.response_.create_session_response_ = ::google::protobuf::Message::CopyConstruct<::tensorflow::CreateSessionResponse>(arena, *from._impl_.response_.create_session_response_);
        break;
      case kExtendSessionResponse:
        _impl_.response_.extend_session_response_ = ::google::protobuf::Message::CopyConstruct<::tensorflow::ExtendSessionResponse>(arena, *from._impl_.response_.extend_session_response_);
        break;
      case kPartialRunSetupResponse:
        _impl_.response_.partial_run_setup_response_ = ::google::protobuf::Message::CopyConstruct<::tensorflow::PartialRunSetupResponse>(arena, *from._impl_.response_.partial_run_setup_response_);
        break;
      case kRunStepResponse:
        _impl_.response_.run_step_response_ = ::google::protobuf::Message::CopyConstruct<::tensorflow::RunStepResponse>(arena, *from._impl_.response_.run_step_response_);
        break;
      case kCloseSessionResponse:
        _impl_.response_.close_session_response_ = ::google::protobuf::Message::CopyConstruct<::tensorflow::CloseSessionResponse>(arena, *from._impl_.response_.close_session_response_);
        break;
      case kListDevicesResponse:
        _impl_.response_.list_devices_response_ = ::google::protobuf::Message::CopyConstruct<::tensorflow::ListDevicesResponse>(arena, *from._impl_.response_.list_devices_response_);
        break;
      case kResetRequestResponse:
        _impl_.response_.reset_request_response_ = ::google::protobuf::Message::CopyConstruct<::tensorflow::ResetResponse>(arena, *from._impl_.response_.reset_request_response_);
        break;
      case kMakeCallableResponse:
        _impl_.response_.make_callable_response_ = ::google::protobuf::Message::CopyConstruct<::tensorflow::MakeCallableResponse>(arena, *from._impl_.response_.make_callable_response_);
        break;
      case kRunCallableResponse:
        _impl_.response_.run_callable_response_ = ::google::protobuf::Message::CopyConstruct<::tensorflow::RunCallableResponse>(arena, *from._impl_.response_.run_callable_response_);
        break;
      case kReleaseCallableResponse:
        _impl_.response_.release_callable_response_ = ::google::protobuf::Message::CopyConstruct<::tensorflow::ReleaseCallableResponse>(arena, *from._impl_.response_.release_callable_response_);
        break;
  }

  // @@protoc_insertion_point(copy_constructor:tensorflow.ReplayOp)
}
inline PROTOBUF_NDEBUG_INLINE ReplayOp::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : op_{},
        response_{},
        _cached_size_{0},
        _oneof_case_{} {}

inline void ReplayOp::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, start_time_us_),
           0,
           offsetof(Impl_, end_time_us_) -
               offsetof(Impl_, start_time_us_) +
               sizeof(Impl_::end_time_us_));
}
ReplayOp::~ReplayOp() {
  // @@protoc_insertion_point(destructor:tensorflow.ReplayOp)
  SharedDtor(*this);
}
inline void ReplayOp::SharedDtor(MessageLite& self) {
  ReplayOp& this_ = static_cast<ReplayOp&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  if (this_.has_op()) {
    this_.clear_op();
  }
  if (this_.has_response()) {
    this_.clear_response();
  }
  this_._impl_.~Impl_();
}

void ReplayOp::clear_op() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.ReplayOp)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  switch (op_case()) {
    case kCreateSession: {
      if (GetArena() == nullptr) {
        delete _impl_.op_.create_session_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.op_.create_session_);
      }
      break;
    }
    case kExtendSession: {
      if (GetArena() == nullptr) {
        delete _impl_.op_.extend_session_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.op_.extend_session_);
      }
      break;
    }
    case kPartialRunSetup: {
      if (GetArena() == nullptr) {
        delete _impl_.op_.partial_run_setup_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.op_.partial_run_setup_);
      }
      break;
    }
    case kRunStep: {
      if (GetArena() == nullptr) {
        delete _impl_.op_.run_step_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.op_.run_step_);
      }
      break;
    }
    case kCloseSession: {
      if (GetArena() == nullptr) {
        delete _impl_.op_.close_session_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.op_.close_session_);
      }
      break;
    }
    case kListDevices: {
      if (GetArena() == nullptr) {
        delete _impl_.op_.list_devices_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.op_.list_devices_);
      }
      break;
    }
    case kResetRequest: {
      if (GetArena() == nullptr) {
        delete _impl_.op_.reset_request_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.op_.reset_request_);
      }
      break;
    }
    case kMakeCallable: {
      if (GetArena() == nullptr) {
        delete _impl_.op_.make_callable_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.op_.make_callable_);
      }
      break;
    }
    case kRunCallable: {
      if (GetArena() == nullptr) {
        delete _impl_.op_.run_callable_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.op_.run_callable_);
      }
      break;
    }
    case kReleaseCallable: {
      if (GetArena() == nullptr) {
        delete _impl_.op_.release_callable_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.op_.release_callable_);
      }
      break;
    }
    case kNewReplaySession: {
      if (GetArena() == nullptr) {
        delete _impl_.op_.new_replay_session_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.op_.new_replay_session_);
      }
      break;
    }
    case OP_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = OP_NOT_SET;
}

void ReplayOp::clear_response() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.ReplayOp)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  switch (response_case()) {
    case kCreateSessionResponse: {
      if (GetArena() == nullptr) {
        delete _impl_.response_.create_session_response_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.response_.create_session_response_);
      }
      break;
    }
    case kExtendSessionResponse: {
      if (GetArena() == nullptr) {
        delete _impl_.response_.extend_session_response_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.response_.extend_session_response_);
      }
      break;
    }
    case kPartialRunSetupResponse: {
      if (GetArena() == nullptr) {
        delete _impl_.response_.partial_run_setup_response_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.response_.partial_run_setup_response_);
      }
      break;
    }
    case kRunStepResponse: {
      if (GetArena() == nullptr) {
        delete _impl_.response_.run_step_response_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.response_.run_step_response_);
      }
      break;
    }
    case kCloseSessionResponse: {
      if (GetArena() == nullptr) {
        delete _impl_.response_.close_session_response_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.response_.close_session_response_);
      }
      break;
    }
    case kListDevicesResponse: {
      if (GetArena() == nullptr) {
        delete _impl_.response_.list_devices_response_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.response_.list_devices_response_);
      }
      break;
    }
    case kResetRequestResponse: {
      if (GetArena() == nullptr) {
        delete _impl_.response_.reset_request_response_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.response_.reset_request_response_);
      }
      break;
    }
    case kMakeCallableResponse: {
      if (GetArena() == nullptr) {
        delete _impl_.response_.make_callable_response_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.response_.make_callable_response_);
      }
      break;
    }
    case kRunCallableResponse: {
      if (GetArena() == nullptr) {
        delete _impl_.response_.run_callable_response_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.response_.run_callable_response_);
      }
      break;
    }
    case kReleaseCallableResponse: {
      if (GetArena() == nullptr) {
        delete _impl_.response_.release_callable_response_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.response_.release_callable_response_);
      }
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[1] = RESPONSE_NOT_SET;
}


inline void* ReplayOp::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) ReplayOp(arena);
}
constexpr auto ReplayOp::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(ReplayOp),
                                            alignof(ReplayOp));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull ReplayOp::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_ReplayOp_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &ReplayOp::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<ReplayOp>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &ReplayOp::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<ReplayOp>(), &ReplayOp::ByteSizeLong,
            &ReplayOp::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(ReplayOp, _impl_._cached_size_),
        false,
    },
    &ReplayOp::kDescriptorMethods,
    &descriptor_table_tensorflow_2fcore_2fprotobuf_2freplay_5flog_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* ReplayOp::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 23, 21, 0, 2> ReplayOp::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    32, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    1046528,  // skipmap
    offsetof(decltype(_table_), field_entries),
    23,  // num_field_entries
    21,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tensorflow::ReplayOp>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // double end_time_us = 32;
    {::_pbi::TcParser::FastF64S2,
     {641, 63, 0, PROTOBUF_FIELD_OFFSET(ReplayOp, _impl_.end_time_us_)}},
    // double start_time_us = 31;
    {::_pbi::TcParser::FastF64S2,
     {505, 63, 0, PROTOBUF_FIELD_OFFSET(ReplayOp, _impl_.start_time_us_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .tensorflow.CreateSessionRequest create_session = 1;
    {PROTOBUF_FIELD_OFFSET(ReplayOp, _impl_.op_.create_session_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tensorflow.ExtendSessionRequest extend_session = 2;
    {PROTOBUF_FIELD_OFFSET(ReplayOp, _impl_.op_.extend_session_), _Internal::kOneofCaseOffset + 0, 1,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tensorflow.PartialRunSetupRequest partial_run_setup = 3;
    {PROTOBUF_FIELD_OFFSET(ReplayOp, _impl_.op_.partial_run_setup_), _Internal::kOneofCaseOffset + 0, 2,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tensorflow.RunStepRequest run_step = 4;
    {PROTOBUF_FIELD_OFFSET(ReplayOp, _impl_.op_.run_step_), _Internal::kOneofCaseOffset + 0, 3,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tensorflow.CloseSessionRequest close_session = 5;
    {PROTOBUF_FIELD_OFFSET(ReplayOp, _impl_.op_.close_session_), _Internal::kOneofCaseOffset + 0, 4,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tensorflow.ListDevicesRequest list_devices = 6;
    {PROTOBUF_FIELD_OFFSET(ReplayOp, _impl_.op_.list_devices_), _Internal::kOneofCaseOffset + 0, 5,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tensorflow.ResetRequest reset_request = 7;
    {PROTOBUF_FIELD_OFFSET(ReplayOp, _impl_.op_.reset_request_), _Internal::kOneofCaseOffset + 0, 6,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tensorflow.MakeCallableRequest make_callable = 8;
    {PROTOBUF_FIELD_OFFSET(ReplayOp, _impl_.op_.make_callable_), _Internal::kOneofCaseOffset + 0, 7,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tensorflow.RunCallableRequest run_callable = 9;
    {PROTOBUF_FIELD_OFFSET(ReplayOp, _impl_.op_.run_callable_), _Internal::kOneofCaseOffset + 0, 8,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tensorflow.ReleaseCallableRequest release_callable = 10;
    {PROTOBUF_FIELD_OFFSET(ReplayOp, _impl_.op_.release_callable_), _Internal::kOneofCaseOffset + 0, 9,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tensorflow.NewReplaySession new_replay_session = 11;
    {PROTOBUF_FIELD_OFFSET(ReplayOp, _impl_.op_.new_replay_session_), _Internal::kOneofCaseOffset + 0, 10,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tensorflow.CreateSessionResponse create_session_response = 21;
    {PROTOBUF_FIELD_OFFSET(ReplayOp, _impl_.response_.create_session_response_), _Internal::kOneofCaseOffset + 4, 11,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tensorflow.ExtendSessionResponse extend_session_response = 22;
    {PROTOBUF_FIELD_OFFSET(ReplayOp, _impl_.response_.extend_session_response_), _Internal::kOneofCaseOffset + 4, 12,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tensorflow.PartialRunSetupResponse partial_run_setup_response = 23;
    {PROTOBUF_FIELD_OFFSET(ReplayOp, _impl_.response_.partial_run_setup_response_), _Internal::kOneofCaseOffset + 4, 13,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tensorflow.RunStepResponse run_step_response = 24;
    {PROTOBUF_FIELD_OFFSET(ReplayOp, _impl_.response_.run_step_response_), _Internal::kOneofCaseOffset + 4, 14,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tensorflow.CloseSessionResponse close_session_response = 25;
    {PROTOBUF_FIELD_OFFSET(ReplayOp, _impl_.response_.close_session_response_), _Internal::kOneofCaseOffset + 4, 15,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tensorflow.ListDevicesResponse list_devices_response = 26;
    {PROTOBUF_FIELD_OFFSET(ReplayOp, _impl_.response_.list_devices_response_), _Internal::kOneofCaseOffset + 4, 16,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tensorflow.ResetResponse reset_request_response = 27;
    {PROTOBUF_FIELD_OFFSET(ReplayOp, _impl_.response_.reset_request_response_), _Internal::kOneofCaseOffset + 4, 17,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tensorflow.MakeCallableResponse make_callable_response = 28;
    {PROTOBUF_FIELD_OFFSET(ReplayOp, _impl_.response_.make_callable_response_), _Internal::kOneofCaseOffset + 4, 18,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tensorflow.RunCallableResponse run_callable_response = 29;
    {PROTOBUF_FIELD_OFFSET(ReplayOp, _impl_.response_.run_callable_response_), _Internal::kOneofCaseOffset + 4, 19,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tensorflow.ReleaseCallableResponse release_callable_response = 30;
    {PROTOBUF_FIELD_OFFSET(ReplayOp, _impl_.response_.release_callable_response_), _Internal::kOneofCaseOffset + 4, 20,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // double start_time_us = 31;
    {PROTOBUF_FIELD_OFFSET(ReplayOp, _impl_.start_time_us_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double end_time_us = 32;
    {PROTOBUF_FIELD_OFFSET(ReplayOp, _impl_.end_time_us_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tensorflow::CreateSessionRequest>()},
    {::_pbi::TcParser::GetTable<::tensorflow::ExtendSessionRequest>()},
    {::_pbi::TcParser::GetTable<::tensorflow::PartialRunSetupRequest>()},
    {::_pbi::TcParser::GetTable<::tensorflow::RunStepRequest>()},
    {::_pbi::TcParser::GetTable<::tensorflow::CloseSessionRequest>()},
    {::_pbi::TcParser::GetTable<::tensorflow::ListDevicesRequest>()},
    {::_pbi::TcParser::GetTable<::tensorflow::ResetRequest>()},
    {::_pbi::TcParser::GetTable<::tensorflow::MakeCallableRequest>()},
    {::_pbi::TcParser::GetTable<::tensorflow::RunCallableRequest>()},
    {::_pbi::TcParser::GetTable<::tensorflow::ReleaseCallableRequest>()},
    {::_pbi::TcParser::GetTable<::tensorflow::NewReplaySession>()},
    {::_pbi::TcParser::GetTable<::tensorflow::CreateSessionResponse>()},
    {::_pbi::TcParser::GetTable<::tensorflow::ExtendSessionResponse>()},
    {::_pbi::TcParser::GetTable<::tensorflow::PartialRunSetupResponse>()},
    {::_pbi::TcParser::GetTable<::tensorflow::RunStepResponse>()},
    {::_pbi::TcParser::GetTable<::tensorflow::CloseSessionResponse>()},
    {::_pbi::TcParser::GetTable<::tensorflow::ListDevicesResponse>()},
    {::_pbi::TcParser::GetTable<::tensorflow::ResetResponse>()},
    {::_pbi::TcParser::GetTable<::tensorflow::MakeCallableResponse>()},
    {::_pbi::TcParser::GetTable<::tensorflow::RunCallableResponse>()},
    {::_pbi::TcParser::GetTable<::tensorflow::ReleaseCallableResponse>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void ReplayOp::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.ReplayOp)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.start_time_us_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.end_time_us_) -
      reinterpret_cast<char*>(&_impl_.start_time_us_)) + sizeof(_impl_.end_time_us_));
  clear_op();
  clear_response();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* ReplayOp::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const ReplayOp& this_ = static_cast<const ReplayOp&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* ReplayOp::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const ReplayOp& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:tensorflow.ReplayOp)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          switch (this_.op_case()) {
            case kCreateSession: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  1, *this_._impl_.op_.create_session_, this_._impl_.op_.create_session_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kExtendSession: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  2, *this_._impl_.op_.extend_session_, this_._impl_.op_.extend_session_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kPartialRunSetup: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  3, *this_._impl_.op_.partial_run_setup_, this_._impl_.op_.partial_run_setup_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kRunStep: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  4, *this_._impl_.op_.run_step_, this_._impl_.op_.run_step_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kCloseSession: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  5, *this_._impl_.op_.close_session_, this_._impl_.op_.close_session_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kListDevices: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  6, *this_._impl_.op_.list_devices_, this_._impl_.op_.list_devices_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kResetRequest: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  7, *this_._impl_.op_.reset_request_, this_._impl_.op_.reset_request_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kMakeCallable: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  8, *this_._impl_.op_.make_callable_, this_._impl_.op_.make_callable_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kRunCallable: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  9, *this_._impl_.op_.run_callable_, this_._impl_.op_.run_callable_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kReleaseCallable: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  10, *this_._impl_.op_.release_callable_, this_._impl_.op_.release_callable_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kNewReplaySession: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  11, *this_._impl_.op_.new_replay_session_, this_._impl_.op_.new_replay_session_->GetCachedSize(), target,
                  stream);
              break;
            }
            default:
              break;
          }
          switch (this_.response_case()) {
            case kCreateSessionResponse: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  21, *this_._impl_.response_.create_session_response_, this_._impl_.response_.create_session_response_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kExtendSessionResponse: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  22, *this_._impl_.response_.extend_session_response_, this_._impl_.response_.extend_session_response_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kPartialRunSetupResponse: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  23, *this_._impl_.response_.partial_run_setup_response_, this_._impl_.response_.partial_run_setup_response_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kRunStepResponse: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  24, *this_._impl_.response_.run_step_response_, this_._impl_.response_.run_step_response_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kCloseSessionResponse: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  25, *this_._impl_.response_.close_session_response_, this_._impl_.response_.close_session_response_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kListDevicesResponse: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  26, *this_._impl_.response_.list_devices_response_, this_._impl_.response_.list_devices_response_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kResetRequestResponse: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  27, *this_._impl_.response_.reset_request_response_, this_._impl_.response_.reset_request_response_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kMakeCallableResponse: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  28, *this_._impl_.response_.make_callable_response_, this_._impl_.response_.make_callable_response_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kRunCallableResponse: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  29, *this_._impl_.response_.run_callable_response_, this_._impl_.response_.run_callable_response_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kReleaseCallableResponse: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  30, *this_._impl_.response_.release_callable_response_, this_._impl_.response_.release_callable_response_->GetCachedSize(), target,
                  stream);
              break;
            }
            default:
              break;
          }
          // double start_time_us = 31;
          if (::absl::bit_cast<::uint64_t>(this_._internal_start_time_us()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                31, this_._internal_start_time_us(), target);
          }

          // double end_time_us = 32;
          if (::absl::bit_cast<::uint64_t>(this_._internal_end_time_us()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                32, this_._internal_end_time_us(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:tensorflow.ReplayOp)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t ReplayOp::ByteSizeLong(const MessageLite& base) {
          const ReplayOp& this_ = static_cast<const ReplayOp&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t ReplayOp::ByteSizeLong() const {
          const ReplayOp& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:tensorflow.ReplayOp)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // double start_time_us = 31;
            if (::absl::bit_cast<::uint64_t>(this_._internal_start_time_us()) != 0) {
              total_size += 10;
            }
            // double end_time_us = 32;
            if (::absl::bit_cast<::uint64_t>(this_._internal_end_time_us()) != 0) {
              total_size += 10;
            }
          }
          switch (this_.op_case()) {
            // .tensorflow.CreateSessionRequest create_session = 1;
            case kCreateSession: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.op_.create_session_);
              break;
            }
            // .tensorflow.ExtendSessionRequest extend_session = 2;
            case kExtendSession: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.op_.extend_session_);
              break;
            }
            // .tensorflow.PartialRunSetupRequest partial_run_setup = 3;
            case kPartialRunSetup: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.op_.partial_run_setup_);
              break;
            }
            // .tensorflow.RunStepRequest run_step = 4;
            case kRunStep: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.op_.run_step_);
              break;
            }
            // .tensorflow.CloseSessionRequest close_session = 5;
            case kCloseSession: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.op_.close_session_);
              break;
            }
            // .tensorflow.ListDevicesRequest list_devices = 6;
            case kListDevices: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.op_.list_devices_);
              break;
            }
            // .tensorflow.ResetRequest reset_request = 7;
            case kResetRequest: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.op_.reset_request_);
              break;
            }
            // .tensorflow.MakeCallableRequest make_callable = 8;
            case kMakeCallable: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.op_.make_callable_);
              break;
            }
            // .tensorflow.RunCallableRequest run_callable = 9;
            case kRunCallable: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.op_.run_callable_);
              break;
            }
            // .tensorflow.ReleaseCallableRequest release_callable = 10;
            case kReleaseCallable: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.op_.release_callable_);
              break;
            }
            // .tensorflow.NewReplaySession new_replay_session = 11;
            case kNewReplaySession: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.op_.new_replay_session_);
              break;
            }
            case OP_NOT_SET: {
              break;
            }
          }
          switch (this_.response_case()) {
            // .tensorflow.CreateSessionResponse create_session_response = 21;
            case kCreateSessionResponse: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.response_.create_session_response_);
              break;
            }
            // .tensorflow.ExtendSessionResponse extend_session_response = 22;
            case kExtendSessionResponse: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.response_.extend_session_response_);
              break;
            }
            // .tensorflow.PartialRunSetupResponse partial_run_setup_response = 23;
            case kPartialRunSetupResponse: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.response_.partial_run_setup_response_);
              break;
            }
            // .tensorflow.RunStepResponse run_step_response = 24;
            case kRunStepResponse: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.response_.run_step_response_);
              break;
            }
            // .tensorflow.CloseSessionResponse close_session_response = 25;
            case kCloseSessionResponse: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.response_.close_session_response_);
              break;
            }
            // .tensorflow.ListDevicesResponse list_devices_response = 26;
            case kListDevicesResponse: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.response_.list_devices_response_);
              break;
            }
            // .tensorflow.ResetResponse reset_request_response = 27;
            case kResetRequestResponse: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.response_.reset_request_response_);
              break;
            }
            // .tensorflow.MakeCallableResponse make_callable_response = 28;
            case kMakeCallableResponse: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.response_.make_callable_response_);
              break;
            }
            // .tensorflow.RunCallableResponse run_callable_response = 29;
            case kRunCallableResponse: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.response_.run_callable_response_);
              break;
            }
            // .tensorflow.ReleaseCallableResponse release_callable_response = 30;
            case kReleaseCallableResponse: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.response_.release_callable_response_);
              break;
            }
            case RESPONSE_NOT_SET: {
              break;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void ReplayOp::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ReplayOp*>(&to_msg);
  auto& from = static_cast<const ReplayOp&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.ReplayOp)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (::absl::bit_cast<::uint64_t>(from._internal_start_time_us()) != 0) {
    _this->_impl_.start_time_us_ = from._impl_.start_time_us_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_end_time_us()) != 0) {
    _this->_impl_.end_time_us_ = from._impl_.end_time_us_;
  }
  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[0]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[0];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_op();
      }
      _this->_impl_._oneof_case_[0] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kCreateSession: {
        if (oneof_needs_init) {
          _this->_impl_.op_.create_session_ =
              ::google::protobuf::Message::CopyConstruct<::tensorflow::CreateSessionRequest>(arena, *from._impl_.op_.create_session_);
        } else {
          _this->_impl_.op_.create_session_->MergeFrom(from._internal_create_session());
        }
        break;
      }
      case kExtendSession: {
        if (oneof_needs_init) {
          _this->_impl_.op_.extend_session_ =
              ::google::protobuf::Message::CopyConstruct<::tensorflow::ExtendSessionRequest>(arena, *from._impl_.op_.extend_session_);
        } else {
          _this->_impl_.op_.extend_session_->MergeFrom(from._internal_extend_session());
        }
        break;
      }
      case kPartialRunSetup: {
        if (oneof_needs_init) {
          _this->_impl_.op_.partial_run_setup_ =
              ::google::protobuf::Message::CopyConstruct<::tensorflow::PartialRunSetupRequest>(arena, *from._impl_.op_.partial_run_setup_);
        } else {
          _this->_impl_.op_.partial_run_setup_->MergeFrom(from._internal_partial_run_setup());
        }
        break;
      }
      case kRunStep: {
        if (oneof_needs_init) {
          _this->_impl_.op_.run_step_ =
              ::google::protobuf::Message::CopyConstruct<::tensorflow::RunStepRequest>(arena, *from._impl_.op_.run_step_);
        } else {
          _this->_impl_.op_.run_step_->MergeFrom(from._internal_run_step());
        }
        break;
      }
      case kCloseSession: {
        if (oneof_needs_init) {
          _this->_impl_.op_.close_session_ =
              ::google::protobuf::Message::CopyConstruct<::tensorflow::CloseSessionRequest>(arena, *from._impl_.op_.close_session_);
        } else {
          _this->_impl_.op_.close_session_->MergeFrom(from._internal_close_session());
        }
        break;
      }
      case kListDevices: {
        if (oneof_needs_init) {
          _this->_impl_.op_.list_devices_ =
              ::google::protobuf::Message::CopyConstruct<::tensorflow::ListDevicesRequest>(arena, *from._impl_.op_.list_devices_);
        } else {
          _this->_impl_.op_.list_devices_->MergeFrom(from._internal_list_devices());
        }
        break;
      }
      case kResetRequest: {
        if (oneof_needs_init) {
          _this->_impl_.op_.reset_request_ =
              ::google::protobuf::Message::CopyConstruct<::tensorflow::ResetRequest>(arena, *from._impl_.op_.reset_request_);
        } else {
          _this->_impl_.op_.reset_request_->MergeFrom(from._internal_reset_request());
        }
        break;
      }
      case kMakeCallable: {
        if (oneof_needs_init) {
          _this->_impl_.op_.make_callable_ =
              ::google::protobuf::Message::CopyConstruct<::tensorflow::MakeCallableRequest>(arena, *from._impl_.op_.make_callable_);
        } else {
          _this->_impl_.op_.make_callable_->MergeFrom(from._internal_make_callable());
        }
        break;
      }
      case kRunCallable: {
        if (oneof_needs_init) {
          _this->_impl_.op_.run_callable_ =
              ::google::protobuf::Message::CopyConstruct<::tensorflow::RunCallableRequest>(arena, *from._impl_.op_.run_callable_);
        } else {
          _this->_impl_.op_.run_callable_->MergeFrom(from._internal_run_callable());
        }
        break;
      }
      case kReleaseCallable: {
        if (oneof_needs_init) {
          _this->_impl_.op_.release_callable_ =
              ::google::protobuf::Message::CopyConstruct<::tensorflow::ReleaseCallableRequest>(arena, *from._impl_.op_.release_callable_);
        } else {
          _this->_impl_.op_.release_callable_->MergeFrom(from._internal_release_callable());
        }
        break;
      }
      case kNewReplaySession: {
        if (oneof_needs_init) {
          _this->_impl_.op_.new_replay_session_ =
              ::google::protobuf::Message::CopyConstruct<::tensorflow::NewReplaySession>(arena, *from._impl_.op_.new_replay_session_);
        } else {
          _this->_impl_.op_.new_replay_session_->MergeFrom(from._internal_new_replay_session());
        }
        break;
      }
      case OP_NOT_SET:
        break;
    }
  }
  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[1]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[1];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_response();
      }
      _this->_impl_._oneof_case_[1] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kCreateSessionResponse: {
        if (oneof_needs_init) {
          _this->_impl_.response_.create_session_response_ =
              ::google::protobuf::Message::CopyConstruct<::tensorflow::CreateSessionResponse>(arena, *from._impl_.response_.create_session_response_);
        } else {
          _this->_impl_.response_.create_session_response_->MergeFrom(from._internal_create_session_response());
        }
        break;
      }
      case kExtendSessionResponse: {
        if (oneof_needs_init) {
          _this->_impl_.response_.extend_session_response_ =
              ::google::protobuf::Message::CopyConstruct<::tensorflow::ExtendSessionResponse>(arena, *from._impl_.response_.extend_session_response_);
        } else {
          _this->_impl_.response_.extend_session_response_->MergeFrom(from._internal_extend_session_response());
        }
        break;
      }
      case kPartialRunSetupResponse: {
        if (oneof_needs_init) {
          _this->_impl_.response_.partial_run_setup_response_ =
              ::google::protobuf::Message::CopyConstruct<::tensorflow::PartialRunSetupResponse>(arena, *from._impl_.response_.partial_run_setup_response_);
        } else {
          _this->_impl_.response_.partial_run_setup_response_->MergeFrom(from._internal_partial_run_setup_response());
        }
        break;
      }
      case kRunStepResponse: {
        if (oneof_needs_init) {
          _this->_impl_.response_.run_step_response_ =
              ::google::protobuf::Message::CopyConstruct<::tensorflow::RunStepResponse>(arena, *from._impl_.response_.run_step_response_);
        } else {
          _this->_impl_.response_.run_step_response_->MergeFrom(from._internal_run_step_response());
        }
        break;
      }
      case kCloseSessionResponse: {
        if (oneof_needs_init) {
          _this->_impl_.response_.close_session_response_ =
              ::google::protobuf::Message::CopyConstruct<::tensorflow::CloseSessionResponse>(arena, *from._impl_.response_.close_session_response_);
        } else {
          _this->_impl_.response_.close_session_response_->MergeFrom(from._internal_close_session_response());
        }
        break;
      }
      case kListDevicesResponse: {
        if (oneof_needs_init) {
          _this->_impl_.response_.list_devices_response_ =
              ::google::protobuf::Message::CopyConstruct<::tensorflow::ListDevicesResponse>(arena, *from._impl_.response_.list_devices_response_);
        } else {
          _this->_impl_.response_.list_devices_response_->MergeFrom(from._internal_list_devices_response());
        }
        break;
      }
      case kResetRequestResponse: {
        if (oneof_needs_init) {
          _this->_impl_.response_.reset_request_response_ =
              ::google::protobuf::Message::CopyConstruct<::tensorflow::ResetResponse>(arena, *from._impl_.response_.reset_request_response_);
        } else {
          _this->_impl_.response_.reset_request_response_->MergeFrom(from._internal_reset_request_response());
        }
        break;
      }
      case kMakeCallableResponse: {
        if (oneof_needs_init) {
          _this->_impl_.response_.make_callable_response_ =
              ::google::protobuf::Message::CopyConstruct<::tensorflow::MakeCallableResponse>(arena, *from._impl_.response_.make_callable_response_);
        } else {
          _this->_impl_.response_.make_callable_response_->MergeFrom(from._internal_make_callable_response());
        }
        break;
      }
      case kRunCallableResponse: {
        if (oneof_needs_init) {
          _this->_impl_.response_.run_callable_response_ =
              ::google::protobuf::Message::CopyConstruct<::tensorflow::RunCallableResponse>(arena, *from._impl_.response_.run_callable_response_);
        } else {
          _this->_impl_.response_.run_callable_response_->MergeFrom(from._internal_run_callable_response());
        }
        break;
      }
      case kReleaseCallableResponse: {
        if (oneof_needs_init) {
          _this->_impl_.response_.release_callable_response_ =
              ::google::protobuf::Message::CopyConstruct<::tensorflow::ReleaseCallableResponse>(arena, *from._impl_.response_.release_callable_response_);
        } else {
          _this->_impl_.response_.release_callable_response_->MergeFrom(from._internal_release_callable_response());
        }
        break;
      }
      case RESPONSE_NOT_SET:
        break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ReplayOp::CopyFrom(const ReplayOp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.ReplayOp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ReplayOp::InternalSwap(ReplayOp* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReplayOp, _impl_.end_time_us_)
      + sizeof(ReplayOp::_impl_.end_time_us_)
      - PROTOBUF_FIELD_OFFSET(ReplayOp, _impl_.start_time_us_)>(
          reinterpret_cast<char*>(&_impl_.start_time_us_),
          reinterpret_cast<char*>(&other->_impl_.start_time_us_));
  swap(_impl_.op_, other->_impl_.op_);
  swap(_impl_.response_, other->_impl_.response_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
  swap(_impl_._oneof_case_[1], other->_impl_._oneof_case_[1]);
}

::google::protobuf::Metadata ReplayOp::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace tensorflow
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_tensorflow_2fcore_2fprotobuf_2freplay_5flog_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
