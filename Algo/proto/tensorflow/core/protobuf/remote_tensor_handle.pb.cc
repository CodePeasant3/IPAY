// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: tensorflow/core/protobuf/remote_tensor_handle.proto
// Protobuf C++ Version: 5.29.0

#include "tensorflow/core/protobuf/remote_tensor_handle.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace tensorflow {
namespace eager {

inline constexpr ResourceDtypeAndShape::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        shape_{nullptr},
        dtype_{static_cast< ::tensorflow::DataType >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR ResourceDtypeAndShape::ResourceDtypeAndShape(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ResourceDtypeAndShapeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResourceDtypeAndShapeDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResourceDtypeAndShapeDefaultTypeInternal() {}
  union {
    ResourceDtypeAndShape _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResourceDtypeAndShapeDefaultTypeInternal _ResourceDtypeAndShape_default_instance_;

inline constexpr RemoteTensorHandle::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : resource_dtypes_and_shapes_{},
        device_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        op_device_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        op_id_{::int64_t{0}},
        output_num_{0},
        dtype_{static_cast< ::tensorflow::DataType >(0)},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR RemoteTensorHandle::RemoteTensorHandle(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct RemoteTensorHandleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RemoteTensorHandleDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RemoteTensorHandleDefaultTypeInternal() {}
  union {
    RemoteTensorHandle _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RemoteTensorHandleDefaultTypeInternal _RemoteTensorHandle_default_instance_;
}  // namespace eager
}  // namespace tensorflow
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_tensorflow_2fcore_2fprotobuf_2fremote_5ftensor_5fhandle_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_tensorflow_2fcore_2fprotobuf_2fremote_5ftensor_5fhandle_2eproto = nullptr;
const ::uint32_t
    TableStruct_tensorflow_2fcore_2fprotobuf_2fremote_5ftensor_5fhandle_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        PROTOBUF_FIELD_OFFSET(::tensorflow::eager::ResourceDtypeAndShape, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::tensorflow::eager::ResourceDtypeAndShape, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::tensorflow::eager::ResourceDtypeAndShape, _impl_.dtype_),
        PROTOBUF_FIELD_OFFSET(::tensorflow::eager::ResourceDtypeAndShape, _impl_.shape_),
        ~0u,
        0,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::tensorflow::eager::RemoteTensorHandle, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::tensorflow::eager::RemoteTensorHandle, _impl_.op_id_),
        PROTOBUF_FIELD_OFFSET(::tensorflow::eager::RemoteTensorHandle, _impl_.output_num_),
        PROTOBUF_FIELD_OFFSET(::tensorflow::eager::RemoteTensorHandle, _impl_.device_),
        PROTOBUF_FIELD_OFFSET(::tensorflow::eager::RemoteTensorHandle, _impl_.op_device_),
        PROTOBUF_FIELD_OFFSET(::tensorflow::eager::RemoteTensorHandle, _impl_.dtype_),
        PROTOBUF_FIELD_OFFSET(::tensorflow::eager::RemoteTensorHandle, _impl_.resource_dtypes_and_shapes_),
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, 10, -1, sizeof(::tensorflow::eager::ResourceDtypeAndShape)},
        {12, -1, -1, sizeof(::tensorflow::eager::RemoteTensorHandle)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::tensorflow::eager::_ResourceDtypeAndShape_default_instance_._instance,
    &::tensorflow::eager::_RemoteTensorHandle_default_instance_._instance,
};
const char descriptor_table_protodef_tensorflow_2fcore_2fprotobuf_2fremote_5ftensor_5fhandle_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n3tensorflow/core/protobuf/remote_tensor"
    "_handle.proto\022\020tensorflow.eager\032,tensorf"
    "low/core/framework/tensor_shape.proto\032%t"
    "ensorflow/core/framework/types.proto\"i\n\025"
    "ResourceDtypeAndShape\022#\n\005dtype\030\001 \001(\0162\024.t"
    "ensorflow.DataType\022+\n\005shape\030\002 \001(\0132\034.tens"
    "orflow.TensorShapeProto\"\314\001\n\022RemoteTensor"
    "Handle\022\r\n\005op_id\030\001 \001(\003\022\022\n\noutput_num\030\002 \001("
    "\005\022\016\n\006device\030\003 \001(\t\022\021\n\top_device\030\004 \001(\t\022#\n\005"
    "dtype\030\005 \001(\0162\024.tensorflow.DataType\022K\n\032res"
    "ource_dtypes_and_shapes\030\006 \003(\0132\'.tensorfl"
    "ow.eager.ResourceDtypeAndShapeB\220\001\n\030org.t"
    "ensorflow.frameworkB\030RemoteTensorHandleP"
    "rotosP\001ZUgithub.com/tensorflow/tensorflo"
    "w/tensorflow/go/core/protobuf/for_core_p"
    "rotos_go_proto\370\001\001b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_tensorflow_2fcore_2fprotobuf_2fremote_5ftensor_5fhandle_2eproto_deps[2] =
    {
        &::descriptor_table_tensorflow_2fcore_2fframework_2ftensor_5fshape_2eproto,
        &::descriptor_table_tensorflow_2fcore_2fframework_2ftypes_2eproto,
};
static ::absl::once_flag descriptor_table_tensorflow_2fcore_2fprotobuf_2fremote_5ftensor_5fhandle_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_tensorflow_2fcore_2fprotobuf_2fremote_5ftensor_5fhandle_2eproto = {
    false,
    false,
    625,
    descriptor_table_protodef_tensorflow_2fcore_2fprotobuf_2fremote_5ftensor_5fhandle_2eproto,
    "tensorflow/core/protobuf/remote_tensor_handle.proto",
    &descriptor_table_tensorflow_2fcore_2fprotobuf_2fremote_5ftensor_5fhandle_2eproto_once,
    descriptor_table_tensorflow_2fcore_2fprotobuf_2fremote_5ftensor_5fhandle_2eproto_deps,
    2,
    2,
    schemas,
    file_default_instances,
    TableStruct_tensorflow_2fcore_2fprotobuf_2fremote_5ftensor_5fhandle_2eproto::offsets,
    file_level_enum_descriptors_tensorflow_2fcore_2fprotobuf_2fremote_5ftensor_5fhandle_2eproto,
    file_level_service_descriptors_tensorflow_2fcore_2fprotobuf_2fremote_5ftensor_5fhandle_2eproto,
};
namespace tensorflow {
namespace eager {
// ===================================================================

class ResourceDtypeAndShape::_Internal {
 public:
  using HasBits =
      decltype(std::declval<ResourceDtypeAndShape>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(ResourceDtypeAndShape, _impl_._has_bits_);
};

void ResourceDtypeAndShape::clear_shape() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.shape_ != nullptr) _impl_.shape_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ResourceDtypeAndShape::ResourceDtypeAndShape(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.eager.ResourceDtypeAndShape)
}
inline PROTOBUF_NDEBUG_INLINE ResourceDtypeAndShape::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::tensorflow::eager::ResourceDtypeAndShape& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

ResourceDtypeAndShape::ResourceDtypeAndShape(
    ::google::protobuf::Arena* arena,
    const ResourceDtypeAndShape& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ResourceDtypeAndShape* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.shape_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::tensorflow::TensorShapeProto>(
                              arena, *from._impl_.shape_)
                        : nullptr;
  _impl_.dtype_ = from._impl_.dtype_;

  // @@protoc_insertion_point(copy_constructor:tensorflow.eager.ResourceDtypeAndShape)
}
inline PROTOBUF_NDEBUG_INLINE ResourceDtypeAndShape::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void ResourceDtypeAndShape::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, shape_),
           0,
           offsetof(Impl_, dtype_) -
               offsetof(Impl_, shape_) +
               sizeof(Impl_::dtype_));
}
ResourceDtypeAndShape::~ResourceDtypeAndShape() {
  // @@protoc_insertion_point(destructor:tensorflow.eager.ResourceDtypeAndShape)
  SharedDtor(*this);
}
inline void ResourceDtypeAndShape::SharedDtor(MessageLite& self) {
  ResourceDtypeAndShape& this_ = static_cast<ResourceDtypeAndShape&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.shape_;
  this_._impl_.~Impl_();
}

inline void* ResourceDtypeAndShape::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) ResourceDtypeAndShape(arena);
}
constexpr auto ResourceDtypeAndShape::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(ResourceDtypeAndShape),
                                            alignof(ResourceDtypeAndShape));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull ResourceDtypeAndShape::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_ResourceDtypeAndShape_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &ResourceDtypeAndShape::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<ResourceDtypeAndShape>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &ResourceDtypeAndShape::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<ResourceDtypeAndShape>(), &ResourceDtypeAndShape::ByteSizeLong,
            &ResourceDtypeAndShape::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(ResourceDtypeAndShape, _impl_._cached_size_),
        false,
    },
    &ResourceDtypeAndShape::kDescriptorMethods,
    &descriptor_table_tensorflow_2fcore_2fprotobuf_2fremote_5ftensor_5fhandle_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* ResourceDtypeAndShape::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2> ResourceDtypeAndShape::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ResourceDtypeAndShape, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tensorflow::eager::ResourceDtypeAndShape>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .tensorflow.TensorShapeProto shape = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(ResourceDtypeAndShape, _impl_.shape_)}},
    // .tensorflow.DataType dtype = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ResourceDtypeAndShape, _impl_.dtype_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(ResourceDtypeAndShape, _impl_.dtype_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .tensorflow.DataType dtype = 1;
    {PROTOBUF_FIELD_OFFSET(ResourceDtypeAndShape, _impl_.dtype_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .tensorflow.TensorShapeProto shape = 2;
    {PROTOBUF_FIELD_OFFSET(ResourceDtypeAndShape, _impl_.shape_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tensorflow::TensorShapeProto>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void ResourceDtypeAndShape::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.eager.ResourceDtypeAndShape)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.shape_ != nullptr);
    _impl_.shape_->Clear();
  }
  _impl_.dtype_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* ResourceDtypeAndShape::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const ResourceDtypeAndShape& this_ = static_cast<const ResourceDtypeAndShape&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* ResourceDtypeAndShape::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const ResourceDtypeAndShape& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:tensorflow.eager.ResourceDtypeAndShape)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // .tensorflow.DataType dtype = 1;
          if (this_._internal_dtype() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                1, this_._internal_dtype(), target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .tensorflow.TensorShapeProto shape = 2;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.shape_, this_._impl_.shape_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:tensorflow.eager.ResourceDtypeAndShape)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t ResourceDtypeAndShape::ByteSizeLong(const MessageLite& base) {
          const ResourceDtypeAndShape& this_ = static_cast<const ResourceDtypeAndShape&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t ResourceDtypeAndShape::ByteSizeLong() const {
          const ResourceDtypeAndShape& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:tensorflow.eager.ResourceDtypeAndShape)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // .tensorflow.TensorShapeProto shape = 2;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.shape_);
            }
          }
           {
            // .tensorflow.DataType dtype = 1;
            if (this_._internal_dtype() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_dtype());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void ResourceDtypeAndShape::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ResourceDtypeAndShape*>(&to_msg);
  auto& from = static_cast<const ResourceDtypeAndShape&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.eager.ResourceDtypeAndShape)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.shape_ != nullptr);
    if (_this->_impl_.shape_ == nullptr) {
      _this->_impl_.shape_ =
          ::google::protobuf::Message::CopyConstruct<::tensorflow::TensorShapeProto>(arena, *from._impl_.shape_);
    } else {
      _this->_impl_.shape_->MergeFrom(*from._impl_.shape_);
    }
  }
  if (from._internal_dtype() != 0) {
    _this->_impl_.dtype_ = from._impl_.dtype_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ResourceDtypeAndShape::CopyFrom(const ResourceDtypeAndShape& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.eager.ResourceDtypeAndShape)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ResourceDtypeAndShape::InternalSwap(ResourceDtypeAndShape* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResourceDtypeAndShape, _impl_.dtype_)
      + sizeof(ResourceDtypeAndShape::_impl_.dtype_)
      - PROTOBUF_FIELD_OFFSET(ResourceDtypeAndShape, _impl_.shape_)>(
          reinterpret_cast<char*>(&_impl_.shape_),
          reinterpret_cast<char*>(&other->_impl_.shape_));
}

::google::protobuf::Metadata ResourceDtypeAndShape::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class RemoteTensorHandle::_Internal {
 public:
};

RemoteTensorHandle::RemoteTensorHandle(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.eager.RemoteTensorHandle)
}
inline PROTOBUF_NDEBUG_INLINE RemoteTensorHandle::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::tensorflow::eager::RemoteTensorHandle& from_msg)
      : resource_dtypes_and_shapes_{visibility, arena, from.resource_dtypes_and_shapes_},
        device_(arena, from.device_),
        op_device_(arena, from.op_device_),
        _cached_size_{0} {}

RemoteTensorHandle::RemoteTensorHandle(
    ::google::protobuf::Arena* arena,
    const RemoteTensorHandle& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  RemoteTensorHandle* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, op_id_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, op_id_),
           offsetof(Impl_, dtype_) -
               offsetof(Impl_, op_id_) +
               sizeof(Impl_::dtype_));

  // @@protoc_insertion_point(copy_constructor:tensorflow.eager.RemoteTensorHandle)
}
inline PROTOBUF_NDEBUG_INLINE RemoteTensorHandle::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : resource_dtypes_and_shapes_{visibility, arena},
        device_(arena),
        op_device_(arena),
        _cached_size_{0} {}

inline void RemoteTensorHandle::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, op_id_),
           0,
           offsetof(Impl_, dtype_) -
               offsetof(Impl_, op_id_) +
               sizeof(Impl_::dtype_));
}
RemoteTensorHandle::~RemoteTensorHandle() {
  // @@protoc_insertion_point(destructor:tensorflow.eager.RemoteTensorHandle)
  SharedDtor(*this);
}
inline void RemoteTensorHandle::SharedDtor(MessageLite& self) {
  RemoteTensorHandle& this_ = static_cast<RemoteTensorHandle&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.device_.Destroy();
  this_._impl_.op_device_.Destroy();
  this_._impl_.~Impl_();
}

inline void* RemoteTensorHandle::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) RemoteTensorHandle(arena);
}
constexpr auto RemoteTensorHandle::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(RemoteTensorHandle, _impl_.resource_dtypes_and_shapes_) +
          decltype(RemoteTensorHandle::_impl_.resource_dtypes_and_shapes_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(RemoteTensorHandle), alignof(RemoteTensorHandle), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&RemoteTensorHandle::PlacementNew_,
                                 sizeof(RemoteTensorHandle),
                                 alignof(RemoteTensorHandle));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull RemoteTensorHandle::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_RemoteTensorHandle_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &RemoteTensorHandle::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<RemoteTensorHandle>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &RemoteTensorHandle::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<RemoteTensorHandle>(), &RemoteTensorHandle::ByteSizeLong,
            &RemoteTensorHandle::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(RemoteTensorHandle, _impl_._cached_size_),
        false,
    },
    &RemoteTensorHandle::kDescriptorMethods,
    &descriptor_table_tensorflow_2fcore_2fprotobuf_2fremote_5ftensor_5fhandle_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* RemoteTensorHandle::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 1, 59, 2> RemoteTensorHandle::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tensorflow::eager::RemoteTensorHandle>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int64 op_id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(RemoteTensorHandle, _impl_.op_id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(RemoteTensorHandle, _impl_.op_id_)}},
    // int32 output_num = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RemoteTensorHandle, _impl_.output_num_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(RemoteTensorHandle, _impl_.output_num_)}},
    // string device = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(RemoteTensorHandle, _impl_.device_)}},
    // string op_device = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(RemoteTensorHandle, _impl_.op_device_)}},
    // .tensorflow.DataType dtype = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RemoteTensorHandle, _impl_.dtype_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(RemoteTensorHandle, _impl_.dtype_)}},
    // repeated .tensorflow.eager.ResourceDtypeAndShape resource_dtypes_and_shapes = 6;
    {::_pbi::TcParser::FastMtR1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(RemoteTensorHandle, _impl_.resource_dtypes_and_shapes_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // int64 op_id = 1;
    {PROTOBUF_FIELD_OFFSET(RemoteTensorHandle, _impl_.op_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // int32 output_num = 2;
    {PROTOBUF_FIELD_OFFSET(RemoteTensorHandle, _impl_.output_num_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string device = 3;
    {PROTOBUF_FIELD_OFFSET(RemoteTensorHandle, _impl_.device_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string op_device = 4;
    {PROTOBUF_FIELD_OFFSET(RemoteTensorHandle, _impl_.op_device_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .tensorflow.DataType dtype = 5;
    {PROTOBUF_FIELD_OFFSET(RemoteTensorHandle, _impl_.dtype_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // repeated .tensorflow.eager.ResourceDtypeAndShape resource_dtypes_and_shapes = 6;
    {PROTOBUF_FIELD_OFFSET(RemoteTensorHandle, _impl_.resource_dtypes_and_shapes_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tensorflow::eager::ResourceDtypeAndShape>()},
  }}, {{
    "\43\0\0\6\11\0\0\0"
    "tensorflow.eager.RemoteTensorHandle"
    "device"
    "op_device"
  }},
};

PROTOBUF_NOINLINE void RemoteTensorHandle::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.eager.RemoteTensorHandle)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.resource_dtypes_and_shapes_.Clear();
  _impl_.device_.ClearToEmpty();
  _impl_.op_device_.ClearToEmpty();
  ::memset(&_impl_.op_id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.dtype_) -
      reinterpret_cast<char*>(&_impl_.op_id_)) + sizeof(_impl_.dtype_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* RemoteTensorHandle::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const RemoteTensorHandle& this_ = static_cast<const RemoteTensorHandle&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* RemoteTensorHandle::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const RemoteTensorHandle& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:tensorflow.eager.RemoteTensorHandle)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // int64 op_id = 1;
          if (this_._internal_op_id() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt64ToArrayWithField<1>(
                    stream, this_._internal_op_id(), target);
          }

          // int32 output_num = 2;
          if (this_._internal_output_num() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<2>(
                    stream, this_._internal_output_num(), target);
          }

          // string device = 3;
          if (!this_._internal_device().empty()) {
            const std::string& _s = this_._internal_device();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tensorflow.eager.RemoteTensorHandle.device");
            target = stream->WriteStringMaybeAliased(3, _s, target);
          }

          // string op_device = 4;
          if (!this_._internal_op_device().empty()) {
            const std::string& _s = this_._internal_op_device();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tensorflow.eager.RemoteTensorHandle.op_device");
            target = stream->WriteStringMaybeAliased(4, _s, target);
          }

          // .tensorflow.DataType dtype = 5;
          if (this_._internal_dtype() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                5, this_._internal_dtype(), target);
          }

          // repeated .tensorflow.eager.ResourceDtypeAndShape resource_dtypes_and_shapes = 6;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_resource_dtypes_and_shapes_size());
               i < n; i++) {
            const auto& repfield = this_._internal_resource_dtypes_and_shapes().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    6, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:tensorflow.eager.RemoteTensorHandle)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t RemoteTensorHandle::ByteSizeLong(const MessageLite& base) {
          const RemoteTensorHandle& this_ = static_cast<const RemoteTensorHandle&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t RemoteTensorHandle::ByteSizeLong() const {
          const RemoteTensorHandle& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:tensorflow.eager.RemoteTensorHandle)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .tensorflow.eager.ResourceDtypeAndShape resource_dtypes_and_shapes = 6;
            {
              total_size += 1UL * this_._internal_resource_dtypes_and_shapes_size();
              for (const auto& msg : this_._internal_resource_dtypes_and_shapes()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
           {
            // string device = 3;
            if (!this_._internal_device().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_device());
            }
            // string op_device = 4;
            if (!this_._internal_op_device().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_op_device());
            }
            // int64 op_id = 1;
            if (this_._internal_op_id() != 0) {
              total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
                  this_._internal_op_id());
            }
            // int32 output_num = 2;
            if (this_._internal_output_num() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_output_num());
            }
            // .tensorflow.DataType dtype = 5;
            if (this_._internal_dtype() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_dtype());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void RemoteTensorHandle::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<RemoteTensorHandle*>(&to_msg);
  auto& from = static_cast<const RemoteTensorHandle&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.eager.RemoteTensorHandle)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_resource_dtypes_and_shapes()->MergeFrom(
      from._internal_resource_dtypes_and_shapes());
  if (!from._internal_device().empty()) {
    _this->_internal_set_device(from._internal_device());
  }
  if (!from._internal_op_device().empty()) {
    _this->_internal_set_op_device(from._internal_op_device());
  }
  if (from._internal_op_id() != 0) {
    _this->_impl_.op_id_ = from._impl_.op_id_;
  }
  if (from._internal_output_num() != 0) {
    _this->_impl_.output_num_ = from._impl_.output_num_;
  }
  if (from._internal_dtype() != 0) {
    _this->_impl_.dtype_ = from._impl_.dtype_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RemoteTensorHandle::CopyFrom(const RemoteTensorHandle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.eager.RemoteTensorHandle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void RemoteTensorHandle::InternalSwap(RemoteTensorHandle* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.resource_dtypes_and_shapes_.InternalSwap(&other->_impl_.resource_dtypes_and_shapes_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.device_, &other->_impl_.device_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.op_device_, &other->_impl_.op_device_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RemoteTensorHandle, _impl_.dtype_)
      + sizeof(RemoteTensorHandle::_impl_.dtype_)
      - PROTOBUF_FIELD_OFFSET(RemoteTensorHandle, _impl_.op_id_)>(
          reinterpret_cast<char*>(&_impl_.op_id_),
          reinterpret_cast<char*>(&other->_impl_.op_id_));
}

::google::protobuf::Metadata RemoteTensorHandle::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace eager
}  // namespace tensorflow
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_tensorflow_2fcore_2fprotobuf_2fremote_5ftensor_5fhandle_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
