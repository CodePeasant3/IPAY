// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: tensorflow/core/protobuf/tensorflow_server.proto
// Protobuf C++ Version: 5.29.0

#include "tensorflow/core/protobuf/tensorflow_server.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace tensorflow {

inline constexpr ServerDef::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        job_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        protocol_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        cluster_{nullptr},
        default_session_config_{nullptr},
        cluster_device_filters_{nullptr},
        task_index_{0},
        port_{0},
        replica_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ServerDef::ServerDef(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ServerDefDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServerDefDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServerDefDefaultTypeInternal() {}
  union {
    ServerDef _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServerDefDefaultTypeInternal _ServerDef_default_instance_;
}  // namespace tensorflow
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_tensorflow_2fcore_2fprotobuf_2ftensorflow_5fserver_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_tensorflow_2fcore_2fprotobuf_2ftensorflow_5fserver_2eproto = nullptr;
const ::uint32_t
    TableStruct_tensorflow_2fcore_2fprotobuf_2ftensorflow_5fserver_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        PROTOBUF_FIELD_OFFSET(::tensorflow::ServerDef, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::tensorflow::ServerDef, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::tensorflow::ServerDef, _impl_.cluster_),
        PROTOBUF_FIELD_OFFSET(::tensorflow::ServerDef, _impl_.job_name_),
        PROTOBUF_FIELD_OFFSET(::tensorflow::ServerDef, _impl_.replica_),
        PROTOBUF_FIELD_OFFSET(::tensorflow::ServerDef, _impl_.task_index_),
        PROTOBUF_FIELD_OFFSET(::tensorflow::ServerDef, _impl_.default_session_config_),
        PROTOBUF_FIELD_OFFSET(::tensorflow::ServerDef, _impl_.protocol_),
        PROTOBUF_FIELD_OFFSET(::tensorflow::ServerDef, _impl_.port_),
        PROTOBUF_FIELD_OFFSET(::tensorflow::ServerDef, _impl_.cluster_device_filters_),
        0,
        ~0u,
        ~0u,
        ~0u,
        1,
        ~0u,
        ~0u,
        2,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, 16, -1, sizeof(::tensorflow::ServerDef)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::tensorflow::_ServerDef_default_instance_._instance,
};
const char descriptor_table_protodef_tensorflow_2fcore_2fprotobuf_2ftensorflow_5fserver_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n0tensorflow/core/protobuf/tensorflow_se"
    "rver.proto\022\ntensorflow\032&tensorflow/core/"
    "protobuf/cluster.proto\032%tensorflow/core/"
    "protobuf/config.proto\032-tensorflow/core/p"
    "rotobuf/device_filters.proto\"\206\002\n\tServerD"
    "ef\022\'\n\007cluster\030\001 \001(\0132\026.tensorflow.Cluster"
    "Def\022\020\n\010job_name\030\002 \001(\t\022\017\n\007replica\030\010 \001(\005\022\022"
    "\n\ntask_index\030\003 \001(\005\0227\n\026default_session_co"
    "nfig\030\004 \001(\0132\027.tensorflow.ConfigProto\022\020\n\010p"
    "rotocol\030\005 \001(\t\022\014\n\004port\030\006 \001(\005\022@\n\026cluster_d"
    "evice_filters\030\007 \001(\0132 .tensorflow.Cluster"
    "DeviceFiltersB\206\001\n\032org.tensorflow.distrun"
    "timeB\014ServerProtosP\001ZUgithub.com/tensorf"
    "low/tensorflow/tensorflow/go/core/protob"
    "uf/for_core_protos_go_proto\370\001\001b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_tensorflow_2fcore_2fprotobuf_2ftensorflow_5fserver_2eproto_deps[3] =
    {
        &::descriptor_table_tensorflow_2fcore_2fprotobuf_2fcluster_2eproto,
        &::descriptor_table_tensorflow_2fcore_2fprotobuf_2fconfig_2eproto,
        &::descriptor_table_tensorflow_2fcore_2fprotobuf_2fdevice_5ffilters_2eproto,
};
static ::absl::once_flag descriptor_table_tensorflow_2fcore_2fprotobuf_2ftensorflow_5fserver_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_tensorflow_2fcore_2fprotobuf_2ftensorflow_5fserver_2eproto = {
    false,
    false,
    598,
    descriptor_table_protodef_tensorflow_2fcore_2fprotobuf_2ftensorflow_5fserver_2eproto,
    "tensorflow/core/protobuf/tensorflow_server.proto",
    &descriptor_table_tensorflow_2fcore_2fprotobuf_2ftensorflow_5fserver_2eproto_once,
    descriptor_table_tensorflow_2fcore_2fprotobuf_2ftensorflow_5fserver_2eproto_deps,
    3,
    1,
    schemas,
    file_default_instances,
    TableStruct_tensorflow_2fcore_2fprotobuf_2ftensorflow_5fserver_2eproto::offsets,
    file_level_enum_descriptors_tensorflow_2fcore_2fprotobuf_2ftensorflow_5fserver_2eproto,
    file_level_service_descriptors_tensorflow_2fcore_2fprotobuf_2ftensorflow_5fserver_2eproto,
};
namespace tensorflow {
// ===================================================================

class ServerDef::_Internal {
 public:
  using HasBits =
      decltype(std::declval<ServerDef>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(ServerDef, _impl_._has_bits_);
};

void ServerDef::clear_cluster() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.cluster_ != nullptr) _impl_.cluster_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void ServerDef::clear_default_session_config() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.default_session_config_ != nullptr) _impl_.default_session_config_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void ServerDef::clear_cluster_device_filters() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.cluster_device_filters_ != nullptr) _impl_.cluster_device_filters_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
ServerDef::ServerDef(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.ServerDef)
}
inline PROTOBUF_NDEBUG_INLINE ServerDef::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::tensorflow::ServerDef& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        job_name_(arena, from.job_name_),
        protocol_(arena, from.protocol_) {}

ServerDef::ServerDef(
    ::google::protobuf::Arena* arena,
    const ServerDef& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ServerDef* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.cluster_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::tensorflow::ClusterDef>(
                              arena, *from._impl_.cluster_)
                        : nullptr;
  _impl_.default_session_config_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::tensorflow::ConfigProto>(
                              arena, *from._impl_.default_session_config_)
                        : nullptr;
  _impl_.cluster_device_filters_ = (cached_has_bits & 0x00000004u) ? ::google::protobuf::Message::CopyConstruct<::tensorflow::ClusterDeviceFilters>(
                              arena, *from._impl_.cluster_device_filters_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, task_index_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, task_index_),
           offsetof(Impl_, replica_) -
               offsetof(Impl_, task_index_) +
               sizeof(Impl_::replica_));

  // @@protoc_insertion_point(copy_constructor:tensorflow.ServerDef)
}
inline PROTOBUF_NDEBUG_INLINE ServerDef::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        job_name_(arena),
        protocol_(arena) {}

inline void ServerDef::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, cluster_),
           0,
           offsetof(Impl_, replica_) -
               offsetof(Impl_, cluster_) +
               sizeof(Impl_::replica_));
}
ServerDef::~ServerDef() {
  // @@protoc_insertion_point(destructor:tensorflow.ServerDef)
  SharedDtor(*this);
}
inline void ServerDef::SharedDtor(MessageLite& self) {
  ServerDef& this_ = static_cast<ServerDef&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.job_name_.Destroy();
  this_._impl_.protocol_.Destroy();
  delete this_._impl_.cluster_;
  delete this_._impl_.default_session_config_;
  delete this_._impl_.cluster_device_filters_;
  this_._impl_.~Impl_();
}

inline void* ServerDef::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) ServerDef(arena);
}
constexpr auto ServerDef::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(ServerDef),
                                            alignof(ServerDef));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull ServerDef::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_ServerDef_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &ServerDef::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<ServerDef>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &ServerDef::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<ServerDef>(), &ServerDef::ByteSizeLong,
            &ServerDef::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(ServerDef, _impl_._cached_size_),
        false,
    },
    &ServerDef::kDescriptorMethods,
    &descriptor_table_tensorflow_2fcore_2fprotobuf_2ftensorflow_5fserver_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* ServerDef::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 8, 3, 53, 2> ServerDef::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ServerDef, _impl_._has_bits_),
    0, // no _extensions_
    8, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967040,  // skipmap
    offsetof(decltype(_table_), field_entries),
    8,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tensorflow::ServerDef>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // int32 replica = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ServerDef, _impl_.replica_), 63>(),
     {64, 63, 0, PROTOBUF_FIELD_OFFSET(ServerDef, _impl_.replica_)}},
    // .tensorflow.ClusterDef cluster = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(ServerDef, _impl_.cluster_)}},
    // string job_name = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(ServerDef, _impl_.job_name_)}},
    // int32 task_index = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ServerDef, _impl_.task_index_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(ServerDef, _impl_.task_index_)}},
    // .tensorflow.ConfigProto default_session_config = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 1, 1, PROTOBUF_FIELD_OFFSET(ServerDef, _impl_.default_session_config_)}},
    // string protocol = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(ServerDef, _impl_.protocol_)}},
    // int32 port = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ServerDef, _impl_.port_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(ServerDef, _impl_.port_)}},
    // .tensorflow.ClusterDeviceFilters cluster_device_filters = 7;
    {::_pbi::TcParser::FastMtS1,
     {58, 2, 2, PROTOBUF_FIELD_OFFSET(ServerDef, _impl_.cluster_device_filters_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .tensorflow.ClusterDef cluster = 1;
    {PROTOBUF_FIELD_OFFSET(ServerDef, _impl_.cluster_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string job_name = 2;
    {PROTOBUF_FIELD_OFFSET(ServerDef, _impl_.job_name_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 task_index = 3;
    {PROTOBUF_FIELD_OFFSET(ServerDef, _impl_.task_index_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .tensorflow.ConfigProto default_session_config = 4;
    {PROTOBUF_FIELD_OFFSET(ServerDef, _impl_.default_session_config_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string protocol = 5;
    {PROTOBUF_FIELD_OFFSET(ServerDef, _impl_.protocol_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 port = 6;
    {PROTOBUF_FIELD_OFFSET(ServerDef, _impl_.port_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .tensorflow.ClusterDeviceFilters cluster_device_filters = 7;
    {PROTOBUF_FIELD_OFFSET(ServerDef, _impl_.cluster_device_filters_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // int32 replica = 8;
    {PROTOBUF_FIELD_OFFSET(ServerDef, _impl_.replica_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tensorflow::ClusterDef>()},
    {::_pbi::TcParser::GetTable<::tensorflow::ConfigProto>()},
    {::_pbi::TcParser::GetTable<::tensorflow::ClusterDeviceFilters>()},
  }}, {{
    "\24\0\10\0\0\10\0\0\0\0\0\0\0\0\0\0"
    "tensorflow.ServerDef"
    "job_name"
    "protocol"
  }},
};

PROTOBUF_NOINLINE void ServerDef::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.ServerDef)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.job_name_.ClearToEmpty();
  _impl_.protocol_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.cluster_ != nullptr);
      _impl_.cluster_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.default_session_config_ != nullptr);
      _impl_.default_session_config_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.cluster_device_filters_ != nullptr);
      _impl_.cluster_device_filters_->Clear();
    }
  }
  ::memset(&_impl_.task_index_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.replica_) -
      reinterpret_cast<char*>(&_impl_.task_index_)) + sizeof(_impl_.replica_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* ServerDef::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const ServerDef& this_ = static_cast<const ServerDef&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* ServerDef::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const ServerDef& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:tensorflow.ServerDef)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .tensorflow.ClusterDef cluster = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.cluster_, this_._impl_.cluster_->GetCachedSize(), target,
                stream);
          }

          // string job_name = 2;
          if (!this_._internal_job_name().empty()) {
            const std::string& _s = this_._internal_job_name();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tensorflow.ServerDef.job_name");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          // int32 task_index = 3;
          if (this_._internal_task_index() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<3>(
                    stream, this_._internal_task_index(), target);
          }

          // .tensorflow.ConfigProto default_session_config = 4;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                4, *this_._impl_.default_session_config_, this_._impl_.default_session_config_->GetCachedSize(), target,
                stream);
          }

          // string protocol = 5;
          if (!this_._internal_protocol().empty()) {
            const std::string& _s = this_._internal_protocol();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tensorflow.ServerDef.protocol");
            target = stream->WriteStringMaybeAliased(5, _s, target);
          }

          // int32 port = 6;
          if (this_._internal_port() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<6>(
                    stream, this_._internal_port(), target);
          }

          // .tensorflow.ClusterDeviceFilters cluster_device_filters = 7;
          if (cached_has_bits & 0x00000004u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                7, *this_._impl_.cluster_device_filters_, this_._impl_.cluster_device_filters_->GetCachedSize(), target,
                stream);
          }

          // int32 replica = 8;
          if (this_._internal_replica() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<8>(
                    stream, this_._internal_replica(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:tensorflow.ServerDef)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t ServerDef::ByteSizeLong(const MessageLite& base) {
          const ServerDef& this_ = static_cast<const ServerDef&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t ServerDef::ByteSizeLong() const {
          const ServerDef& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:tensorflow.ServerDef)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string job_name = 2;
            if (!this_._internal_job_name().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_job_name());
            }
            // string protocol = 5;
            if (!this_._internal_protocol().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_protocol());
            }
          }
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000007u) {
            // .tensorflow.ClusterDef cluster = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.cluster_);
            }
            // .tensorflow.ConfigProto default_session_config = 4;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.default_session_config_);
            }
            // .tensorflow.ClusterDeviceFilters cluster_device_filters = 7;
            if (cached_has_bits & 0x00000004u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.cluster_device_filters_);
            }
          }
           {
            // int32 task_index = 3;
            if (this_._internal_task_index() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_task_index());
            }
            // int32 port = 6;
            if (this_._internal_port() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_port());
            }
            // int32 replica = 8;
            if (this_._internal_replica() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_replica());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void ServerDef::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ServerDef*>(&to_msg);
  auto& from = static_cast<const ServerDef&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.ServerDef)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_job_name().empty()) {
    _this->_internal_set_job_name(from._internal_job_name());
  }
  if (!from._internal_protocol().empty()) {
    _this->_internal_set_protocol(from._internal_protocol());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.cluster_ != nullptr);
      if (_this->_impl_.cluster_ == nullptr) {
        _this->_impl_.cluster_ =
            ::google::protobuf::Message::CopyConstruct<::tensorflow::ClusterDef>(arena, *from._impl_.cluster_);
      } else {
        _this->_impl_.cluster_->MergeFrom(*from._impl_.cluster_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.default_session_config_ != nullptr);
      if (_this->_impl_.default_session_config_ == nullptr) {
        _this->_impl_.default_session_config_ =
            ::google::protobuf::Message::CopyConstruct<::tensorflow::ConfigProto>(arena, *from._impl_.default_session_config_);
      } else {
        _this->_impl_.default_session_config_->MergeFrom(*from._impl_.default_session_config_);
      }
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(from._impl_.cluster_device_filters_ != nullptr);
      if (_this->_impl_.cluster_device_filters_ == nullptr) {
        _this->_impl_.cluster_device_filters_ =
            ::google::protobuf::Message::CopyConstruct<::tensorflow::ClusterDeviceFilters>(arena, *from._impl_.cluster_device_filters_);
      } else {
        _this->_impl_.cluster_device_filters_->MergeFrom(*from._impl_.cluster_device_filters_);
      }
    }
  }
  if (from._internal_task_index() != 0) {
    _this->_impl_.task_index_ = from._impl_.task_index_;
  }
  if (from._internal_port() != 0) {
    _this->_impl_.port_ = from._impl_.port_;
  }
  if (from._internal_replica() != 0) {
    _this->_impl_.replica_ = from._impl_.replica_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ServerDef::CopyFrom(const ServerDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.ServerDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ServerDef::InternalSwap(ServerDef* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.job_name_, &other->_impl_.job_name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.protocol_, &other->_impl_.protocol_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServerDef, _impl_.replica_)
      + sizeof(ServerDef::_impl_.replica_)
      - PROTOBUF_FIELD_OFFSET(ServerDef, _impl_.cluster_)>(
          reinterpret_cast<char*>(&_impl_.cluster_),
          reinterpret_cast<char*>(&other->_impl_.cluster_));
}

::google::protobuf::Metadata ServerDef::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace tensorflow
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_tensorflow_2fcore_2fprotobuf_2ftensorflow_5fserver_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
