// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: tensorflow/core/protobuf/service_config.proto
// Protobuf C++ Version: 5.29.0

#include "tensorflow/core/protobuf/service_config.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace tensorflow {
namespace data {
namespace experimental {

inline constexpr WorkerConfig::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : worker_tags_{},
        protocol_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        dispatcher_address_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        worker_address_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        data_transfer_protocol_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        data_transfer_address_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        port_{::int64_t{0}},
        heartbeat_interval_ms_{::int64_t{0}},
        dispatcher_timeout_ms_{::int64_t{0}},
        shutdown_quiet_period_ms_{::int64_t{0}},
        cross_trainer_cache_size_bytes_{::int64_t{0}},
        snapshot_max_chunk_size_bytes_{::int64_t{0}},
        data_transfer_port_{::int64_t{0}},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR WorkerConfig::WorkerConfig(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct WorkerConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WorkerConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~WorkerConfigDefaultTypeInternal() {}
  union {
    WorkerConfig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WorkerConfigDefaultTypeInternal _WorkerConfig_default_instance_;

inline constexpr DispatcherConfig::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : worker_addresses_{},
        protocol_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        work_dir_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        port_{::int64_t{0}},
        job_gc_check_interval_ms_{::int64_t{0}},
        job_gc_timeout_ms_{::int64_t{0}},
        client_timeout_ms_{::int64_t{0}},
        fault_tolerant_mode_{false},
        gc_dynamic_sharding_jobs_{false},
        deployment_mode_{static_cast< ::tensorflow::data::DeploymentMode >(0)},
        worker_timeout_ms_{::int64_t{0}},
        worker_max_concurrent_snapshots_{::int64_t{0}},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR DispatcherConfig::DispatcherConfig(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct DispatcherConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DispatcherConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DispatcherConfigDefaultTypeInternal() {}
  union {
    DispatcherConfig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DispatcherConfigDefaultTypeInternal _DispatcherConfig_default_instance_;
}  // namespace experimental
}  // namespace data
}  // namespace tensorflow
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_tensorflow_2fcore_2fprotobuf_2fservice_5fconfig_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_tensorflow_2fcore_2fprotobuf_2fservice_5fconfig_2eproto = nullptr;
const ::uint32_t
    TableStruct_tensorflow_2fcore_2fprotobuf_2fservice_5fconfig_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::tensorflow::data::experimental::DispatcherConfig, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::tensorflow::data::experimental::DispatcherConfig, _impl_.port_),
        PROTOBUF_FIELD_OFFSET(::tensorflow::data::experimental::DispatcherConfig, _impl_.protocol_),
        PROTOBUF_FIELD_OFFSET(::tensorflow::data::experimental::DispatcherConfig, _impl_.work_dir_),
        PROTOBUF_FIELD_OFFSET(::tensorflow::data::experimental::DispatcherConfig, _impl_.fault_tolerant_mode_),
        PROTOBUF_FIELD_OFFSET(::tensorflow::data::experimental::DispatcherConfig, _impl_.worker_addresses_),
        PROTOBUF_FIELD_OFFSET(::tensorflow::data::experimental::DispatcherConfig, _impl_.deployment_mode_),
        PROTOBUF_FIELD_OFFSET(::tensorflow::data::experimental::DispatcherConfig, _impl_.job_gc_check_interval_ms_),
        PROTOBUF_FIELD_OFFSET(::tensorflow::data::experimental::DispatcherConfig, _impl_.job_gc_timeout_ms_),
        PROTOBUF_FIELD_OFFSET(::tensorflow::data::experimental::DispatcherConfig, _impl_.gc_dynamic_sharding_jobs_),
        PROTOBUF_FIELD_OFFSET(::tensorflow::data::experimental::DispatcherConfig, _impl_.client_timeout_ms_),
        PROTOBUF_FIELD_OFFSET(::tensorflow::data::experimental::DispatcherConfig, _impl_.worker_timeout_ms_),
        PROTOBUF_FIELD_OFFSET(::tensorflow::data::experimental::DispatcherConfig, _impl_.worker_max_concurrent_snapshots_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::tensorflow::data::experimental::WorkerConfig, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::tensorflow::data::experimental::WorkerConfig, _impl_.port_),
        PROTOBUF_FIELD_OFFSET(::tensorflow::data::experimental::WorkerConfig, _impl_.protocol_),
        PROTOBUF_FIELD_OFFSET(::tensorflow::data::experimental::WorkerConfig, _impl_.dispatcher_address_),
        PROTOBUF_FIELD_OFFSET(::tensorflow::data::experimental::WorkerConfig, _impl_.worker_address_),
        PROTOBUF_FIELD_OFFSET(::tensorflow::data::experimental::WorkerConfig, _impl_.worker_tags_),
        PROTOBUF_FIELD_OFFSET(::tensorflow::data::experimental::WorkerConfig, _impl_.heartbeat_interval_ms_),
        PROTOBUF_FIELD_OFFSET(::tensorflow::data::experimental::WorkerConfig, _impl_.dispatcher_timeout_ms_),
        PROTOBUF_FIELD_OFFSET(::tensorflow::data::experimental::WorkerConfig, _impl_.data_transfer_protocol_),
        PROTOBUF_FIELD_OFFSET(::tensorflow::data::experimental::WorkerConfig, _impl_.data_transfer_port_),
        PROTOBUF_FIELD_OFFSET(::tensorflow::data::experimental::WorkerConfig, _impl_.data_transfer_address_),
        PROTOBUF_FIELD_OFFSET(::tensorflow::data::experimental::WorkerConfig, _impl_.cross_trainer_cache_size_bytes_),
        PROTOBUF_FIELD_OFFSET(::tensorflow::data::experimental::WorkerConfig, _impl_.snapshot_max_chunk_size_bytes_),
        PROTOBUF_FIELD_OFFSET(::tensorflow::data::experimental::WorkerConfig, _impl_.shutdown_quiet_period_ms_),
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::tensorflow::data::experimental::DispatcherConfig)},
        {20, -1, -1, sizeof(::tensorflow::data::experimental::WorkerConfig)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::tensorflow::data::experimental::_DispatcherConfig_default_instance_._instance,
    &::tensorflow::data::experimental::_WorkerConfig_default_instance_._instance,
};
const char descriptor_table_protodef_tensorflow_2fcore_2fprotobuf_2fservice_5fconfig_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n-tensorflow/core/protobuf/service_confi"
    "g.proto\022\034tensorflow.data.experimental\032+t"
    "ensorflow/core/protobuf/data_service.pro"
    "to\"\363\002\n\020DispatcherConfig\022\014\n\004port\030\001 \001(\003\022\020\n"
    "\010protocol\030\002 \001(\t\022\020\n\010work_dir\030\003 \001(\t\022\033\n\023fau"
    "lt_tolerant_mode\030\004 \001(\010\022\030\n\020worker_address"
    "es\030\007 \003(\t\0228\n\017deployment_mode\030\t \001(\0162\037.tens"
    "orflow.data.DeploymentMode\022 \n\030job_gc_che"
    "ck_interval_ms\030\005 \001(\003\022\031\n\021job_gc_timeout_m"
    "s\030\006 \001(\003\022 \n\030gc_dynamic_sharding_jobs\030\013 \001("
    "\010\022\031\n\021client_timeout_ms\030\010 \001(\003\022\031\n\021worker_t"
    "imeout_ms\030\n \001(\003\022\'\n\037worker_max_concurrent"
    "_snapshots\030\014 \001(\003\"\201\003\n\014WorkerConfig\022\014\n\004por"
    "t\030\001 \001(\003\022\020\n\010protocol\030\002 \001(\t\022\032\n\022dispatcher_"
    "address\030\003 \001(\t\022\026\n\016worker_address\030\004 \001(\t\022\023\n"
    "\013worker_tags\030\n \003(\t\022\035\n\025heartbeat_interval"
    "_ms\030\005 \001(\003\022\035\n\025dispatcher_timeout_ms\030\006 \001(\003"
    "\022\036\n\026data_transfer_protocol\030\007 \001(\t\022\032\n\022data"
    "_transfer_port\030\r \001(\003\022\035\n\025data_transfer_ad"
    "dress\030\010 \001(\t\022&\n\036cross_trainer_cache_size_"
    "bytes\030\013 \001(\003\022%\n\035snapshot_max_chunk_size_b"
    "ytes\030\014 \001(\003\022 \n\030shutdown_quiet_period_ms\030\t"
    " \001(\003BWZUgithub.com/tensorflow/tensorflow"
    "/tensorflow/go/core/protobuf/for_core_pr"
    "otos_go_protob\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_tensorflow_2fcore_2fprotobuf_2fservice_5fconfig_2eproto_deps[1] =
    {
        &::descriptor_table_tensorflow_2fcore_2fprotobuf_2fdata_5fservice_2eproto,
};
static ::absl::once_flag descriptor_table_tensorflow_2fcore_2fprotobuf_2fservice_5fconfig_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_tensorflow_2fcore_2fprotobuf_2fservice_5fconfig_2eproto = {
    false,
    false,
    981,
    descriptor_table_protodef_tensorflow_2fcore_2fprotobuf_2fservice_5fconfig_2eproto,
    "tensorflow/core/protobuf/service_config.proto",
    &descriptor_table_tensorflow_2fcore_2fprotobuf_2fservice_5fconfig_2eproto_once,
    descriptor_table_tensorflow_2fcore_2fprotobuf_2fservice_5fconfig_2eproto_deps,
    1,
    2,
    schemas,
    file_default_instances,
    TableStruct_tensorflow_2fcore_2fprotobuf_2fservice_5fconfig_2eproto::offsets,
    file_level_enum_descriptors_tensorflow_2fcore_2fprotobuf_2fservice_5fconfig_2eproto,
    file_level_service_descriptors_tensorflow_2fcore_2fprotobuf_2fservice_5fconfig_2eproto,
};
namespace tensorflow {
namespace data {
namespace experimental {
// ===================================================================

class DispatcherConfig::_Internal {
 public:
};

DispatcherConfig::DispatcherConfig(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.data.experimental.DispatcherConfig)
}
inline PROTOBUF_NDEBUG_INLINE DispatcherConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::tensorflow::data::experimental::DispatcherConfig& from_msg)
      : worker_addresses_{visibility, arena, from.worker_addresses_},
        protocol_(arena, from.protocol_),
        work_dir_(arena, from.work_dir_),
        _cached_size_{0} {}

DispatcherConfig::DispatcherConfig(
    ::google::protobuf::Arena* arena,
    const DispatcherConfig& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  DispatcherConfig* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, port_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, port_),
           offsetof(Impl_, worker_max_concurrent_snapshots_) -
               offsetof(Impl_, port_) +
               sizeof(Impl_::worker_max_concurrent_snapshots_));

  // @@protoc_insertion_point(copy_constructor:tensorflow.data.experimental.DispatcherConfig)
}
inline PROTOBUF_NDEBUG_INLINE DispatcherConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : worker_addresses_{visibility, arena},
        protocol_(arena),
        work_dir_(arena),
        _cached_size_{0} {}

inline void DispatcherConfig::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, port_),
           0,
           offsetof(Impl_, worker_max_concurrent_snapshots_) -
               offsetof(Impl_, port_) +
               sizeof(Impl_::worker_max_concurrent_snapshots_));
}
DispatcherConfig::~DispatcherConfig() {
  // @@protoc_insertion_point(destructor:tensorflow.data.experimental.DispatcherConfig)
  SharedDtor(*this);
}
inline void DispatcherConfig::SharedDtor(MessageLite& self) {
  DispatcherConfig& this_ = static_cast<DispatcherConfig&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.protocol_.Destroy();
  this_._impl_.work_dir_.Destroy();
  this_._impl_.~Impl_();
}

inline void* DispatcherConfig::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) DispatcherConfig(arena);
}
constexpr auto DispatcherConfig::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(DispatcherConfig, _impl_.worker_addresses_) +
          decltype(DispatcherConfig::_impl_.worker_addresses_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(DispatcherConfig), alignof(DispatcherConfig), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&DispatcherConfig::PlacementNew_,
                                 sizeof(DispatcherConfig),
                                 alignof(DispatcherConfig));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull DispatcherConfig::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_DispatcherConfig_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &DispatcherConfig::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<DispatcherConfig>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &DispatcherConfig::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<DispatcherConfig>(), &DispatcherConfig::ByteSizeLong,
            &DispatcherConfig::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(DispatcherConfig, _impl_._cached_size_),
        false,
    },
    &DispatcherConfig::kDescriptorMethods,
    &descriptor_table_tensorflow_2fcore_2fprotobuf_2fservice_5fconfig_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* DispatcherConfig::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 12, 0, 94, 2> DispatcherConfig::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    12, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294963200,  // skipmap
    offsetof(decltype(_table_), field_entries),
    12,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tensorflow::data::experimental::DispatcherConfig>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int64 port = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(DispatcherConfig, _impl_.port_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(DispatcherConfig, _impl_.port_)}},
    // string protocol = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(DispatcherConfig, _impl_.protocol_)}},
    // string work_dir = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(DispatcherConfig, _impl_.work_dir_)}},
    // bool fault_tolerant_mode = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(DispatcherConfig, _impl_.fault_tolerant_mode_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(DispatcherConfig, _impl_.fault_tolerant_mode_)}},
    // int64 job_gc_check_interval_ms = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(DispatcherConfig, _impl_.job_gc_check_interval_ms_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(DispatcherConfig, _impl_.job_gc_check_interval_ms_)}},
    // int64 job_gc_timeout_ms = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(DispatcherConfig, _impl_.job_gc_timeout_ms_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(DispatcherConfig, _impl_.job_gc_timeout_ms_)}},
    // repeated string worker_addresses = 7;
    {::_pbi::TcParser::FastUR1,
     {58, 63, 0, PROTOBUF_FIELD_OFFSET(DispatcherConfig, _impl_.worker_addresses_)}},
    // int64 client_timeout_ms = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(DispatcherConfig, _impl_.client_timeout_ms_), 63>(),
     {64, 63, 0, PROTOBUF_FIELD_OFFSET(DispatcherConfig, _impl_.client_timeout_ms_)}},
    // .tensorflow.data.DeploymentMode deployment_mode = 9;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(DispatcherConfig, _impl_.deployment_mode_), 63>(),
     {72, 63, 0, PROTOBUF_FIELD_OFFSET(DispatcherConfig, _impl_.deployment_mode_)}},
    // int64 worker_timeout_ms = 10;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(DispatcherConfig, _impl_.worker_timeout_ms_), 63>(),
     {80, 63, 0, PROTOBUF_FIELD_OFFSET(DispatcherConfig, _impl_.worker_timeout_ms_)}},
    // bool gc_dynamic_sharding_jobs = 11;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(DispatcherConfig, _impl_.gc_dynamic_sharding_jobs_), 63>(),
     {88, 63, 0, PROTOBUF_FIELD_OFFSET(DispatcherConfig, _impl_.gc_dynamic_sharding_jobs_)}},
    // int64 worker_max_concurrent_snapshots = 12;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(DispatcherConfig, _impl_.worker_max_concurrent_snapshots_), 63>(),
     {96, 63, 0, PROTOBUF_FIELD_OFFSET(DispatcherConfig, _impl_.worker_max_concurrent_snapshots_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // int64 port = 1;
    {PROTOBUF_FIELD_OFFSET(DispatcherConfig, _impl_.port_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // string protocol = 2;
    {PROTOBUF_FIELD_OFFSET(DispatcherConfig, _impl_.protocol_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string work_dir = 3;
    {PROTOBUF_FIELD_OFFSET(DispatcherConfig, _impl_.work_dir_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bool fault_tolerant_mode = 4;
    {PROTOBUF_FIELD_OFFSET(DispatcherConfig, _impl_.fault_tolerant_mode_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // int64 job_gc_check_interval_ms = 5;
    {PROTOBUF_FIELD_OFFSET(DispatcherConfig, _impl_.job_gc_check_interval_ms_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // int64 job_gc_timeout_ms = 6;
    {PROTOBUF_FIELD_OFFSET(DispatcherConfig, _impl_.job_gc_timeout_ms_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // repeated string worker_addresses = 7;
    {PROTOBUF_FIELD_OFFSET(DispatcherConfig, _impl_.worker_addresses_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // int64 client_timeout_ms = 8;
    {PROTOBUF_FIELD_OFFSET(DispatcherConfig, _impl_.client_timeout_ms_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // .tensorflow.data.DeploymentMode deployment_mode = 9;
    {PROTOBUF_FIELD_OFFSET(DispatcherConfig, _impl_.deployment_mode_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // int64 worker_timeout_ms = 10;
    {PROTOBUF_FIELD_OFFSET(DispatcherConfig, _impl_.worker_timeout_ms_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // bool gc_dynamic_sharding_jobs = 11;
    {PROTOBUF_FIELD_OFFSET(DispatcherConfig, _impl_.gc_dynamic_sharding_jobs_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // int64 worker_max_concurrent_snapshots = 12;
    {PROTOBUF_FIELD_OFFSET(DispatcherConfig, _impl_.worker_max_concurrent_snapshots_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
  }},
  // no aux_entries
  {{
    "\55\0\10\10\0\0\0\20\0\0\0\0\0\0\0\0"
    "tensorflow.data.experimental.DispatcherConfig"
    "protocol"
    "work_dir"
    "worker_addresses"
  }},
};

PROTOBUF_NOINLINE void DispatcherConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.data.experimental.DispatcherConfig)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.worker_addresses_.Clear();
  _impl_.protocol_.ClearToEmpty();
  _impl_.work_dir_.ClearToEmpty();
  ::memset(&_impl_.port_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.worker_max_concurrent_snapshots_) -
      reinterpret_cast<char*>(&_impl_.port_)) + sizeof(_impl_.worker_max_concurrent_snapshots_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* DispatcherConfig::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const DispatcherConfig& this_ = static_cast<const DispatcherConfig&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* DispatcherConfig::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const DispatcherConfig& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:tensorflow.data.experimental.DispatcherConfig)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // int64 port = 1;
          if (this_._internal_port() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt64ToArrayWithField<1>(
                    stream, this_._internal_port(), target);
          }

          // string protocol = 2;
          if (!this_._internal_protocol().empty()) {
            const std::string& _s = this_._internal_protocol();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tensorflow.data.experimental.DispatcherConfig.protocol");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          // string work_dir = 3;
          if (!this_._internal_work_dir().empty()) {
            const std::string& _s = this_._internal_work_dir();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tensorflow.data.experimental.DispatcherConfig.work_dir");
            target = stream->WriteStringMaybeAliased(3, _s, target);
          }

          // bool fault_tolerant_mode = 4;
          if (this_._internal_fault_tolerant_mode() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                4, this_._internal_fault_tolerant_mode(), target);
          }

          // int64 job_gc_check_interval_ms = 5;
          if (this_._internal_job_gc_check_interval_ms() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt64ToArrayWithField<5>(
                    stream, this_._internal_job_gc_check_interval_ms(), target);
          }

          // int64 job_gc_timeout_ms = 6;
          if (this_._internal_job_gc_timeout_ms() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt64ToArrayWithField<6>(
                    stream, this_._internal_job_gc_timeout_ms(), target);
          }

          // repeated string worker_addresses = 7;
          for (int i = 0, n = this_._internal_worker_addresses_size(); i < n; ++i) {
            const auto& s = this_._internal_worker_addresses().Get(i);
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tensorflow.data.experimental.DispatcherConfig.worker_addresses");
            target = stream->WriteString(7, s, target);
          }

          // int64 client_timeout_ms = 8;
          if (this_._internal_client_timeout_ms() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt64ToArrayWithField<8>(
                    stream, this_._internal_client_timeout_ms(), target);
          }

          // .tensorflow.data.DeploymentMode deployment_mode = 9;
          if (this_._internal_deployment_mode() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                9, this_._internal_deployment_mode(), target);
          }

          // int64 worker_timeout_ms = 10;
          if (this_._internal_worker_timeout_ms() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt64ToArrayWithField<10>(
                    stream, this_._internal_worker_timeout_ms(), target);
          }

          // bool gc_dynamic_sharding_jobs = 11;
          if (this_._internal_gc_dynamic_sharding_jobs() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                11, this_._internal_gc_dynamic_sharding_jobs(), target);
          }

          // int64 worker_max_concurrent_snapshots = 12;
          if (this_._internal_worker_max_concurrent_snapshots() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt64ToArrayWithField<12>(
                    stream, this_._internal_worker_max_concurrent_snapshots(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:tensorflow.data.experimental.DispatcherConfig)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t DispatcherConfig::ByteSizeLong(const MessageLite& base) {
          const DispatcherConfig& this_ = static_cast<const DispatcherConfig&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t DispatcherConfig::ByteSizeLong() const {
          const DispatcherConfig& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:tensorflow.data.experimental.DispatcherConfig)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated string worker_addresses = 7;
            {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_worker_addresses().size());
              for (int i = 0, n = this_._internal_worker_addresses().size(); i < n; ++i) {
                total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
                    this_._internal_worker_addresses().Get(i));
              }
            }
          }
           {
            // string protocol = 2;
            if (!this_._internal_protocol().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_protocol());
            }
            // string work_dir = 3;
            if (!this_._internal_work_dir().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_work_dir());
            }
            // int64 port = 1;
            if (this_._internal_port() != 0) {
              total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
                  this_._internal_port());
            }
            // int64 job_gc_check_interval_ms = 5;
            if (this_._internal_job_gc_check_interval_ms() != 0) {
              total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
                  this_._internal_job_gc_check_interval_ms());
            }
            // int64 job_gc_timeout_ms = 6;
            if (this_._internal_job_gc_timeout_ms() != 0) {
              total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
                  this_._internal_job_gc_timeout_ms());
            }
            // int64 client_timeout_ms = 8;
            if (this_._internal_client_timeout_ms() != 0) {
              total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
                  this_._internal_client_timeout_ms());
            }
            // bool fault_tolerant_mode = 4;
            if (this_._internal_fault_tolerant_mode() != 0) {
              total_size += 2;
            }
            // bool gc_dynamic_sharding_jobs = 11;
            if (this_._internal_gc_dynamic_sharding_jobs() != 0) {
              total_size += 2;
            }
            // .tensorflow.data.DeploymentMode deployment_mode = 9;
            if (this_._internal_deployment_mode() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_deployment_mode());
            }
            // int64 worker_timeout_ms = 10;
            if (this_._internal_worker_timeout_ms() != 0) {
              total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
                  this_._internal_worker_timeout_ms());
            }
            // int64 worker_max_concurrent_snapshots = 12;
            if (this_._internal_worker_max_concurrent_snapshots() != 0) {
              total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
                  this_._internal_worker_max_concurrent_snapshots());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void DispatcherConfig::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<DispatcherConfig*>(&to_msg);
  auto& from = static_cast<const DispatcherConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.data.experimental.DispatcherConfig)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_worker_addresses()->MergeFrom(from._internal_worker_addresses());
  if (!from._internal_protocol().empty()) {
    _this->_internal_set_protocol(from._internal_protocol());
  }
  if (!from._internal_work_dir().empty()) {
    _this->_internal_set_work_dir(from._internal_work_dir());
  }
  if (from._internal_port() != 0) {
    _this->_impl_.port_ = from._impl_.port_;
  }
  if (from._internal_job_gc_check_interval_ms() != 0) {
    _this->_impl_.job_gc_check_interval_ms_ = from._impl_.job_gc_check_interval_ms_;
  }
  if (from._internal_job_gc_timeout_ms() != 0) {
    _this->_impl_.job_gc_timeout_ms_ = from._impl_.job_gc_timeout_ms_;
  }
  if (from._internal_client_timeout_ms() != 0) {
    _this->_impl_.client_timeout_ms_ = from._impl_.client_timeout_ms_;
  }
  if (from._internal_fault_tolerant_mode() != 0) {
    _this->_impl_.fault_tolerant_mode_ = from._impl_.fault_tolerant_mode_;
  }
  if (from._internal_gc_dynamic_sharding_jobs() != 0) {
    _this->_impl_.gc_dynamic_sharding_jobs_ = from._impl_.gc_dynamic_sharding_jobs_;
  }
  if (from._internal_deployment_mode() != 0) {
    _this->_impl_.deployment_mode_ = from._impl_.deployment_mode_;
  }
  if (from._internal_worker_timeout_ms() != 0) {
    _this->_impl_.worker_timeout_ms_ = from._impl_.worker_timeout_ms_;
  }
  if (from._internal_worker_max_concurrent_snapshots() != 0) {
    _this->_impl_.worker_max_concurrent_snapshots_ = from._impl_.worker_max_concurrent_snapshots_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void DispatcherConfig::CopyFrom(const DispatcherConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.data.experimental.DispatcherConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void DispatcherConfig::InternalSwap(DispatcherConfig* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.worker_addresses_.InternalSwap(&other->_impl_.worker_addresses_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.protocol_, &other->_impl_.protocol_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.work_dir_, &other->_impl_.work_dir_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DispatcherConfig, _impl_.worker_max_concurrent_snapshots_)
      + sizeof(DispatcherConfig::_impl_.worker_max_concurrent_snapshots_)
      - PROTOBUF_FIELD_OFFSET(DispatcherConfig, _impl_.port_)>(
          reinterpret_cast<char*>(&_impl_.port_),
          reinterpret_cast<char*>(&other->_impl_.port_));
}

::google::protobuf::Metadata DispatcherConfig::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class WorkerConfig::_Internal {
 public:
};

WorkerConfig::WorkerConfig(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.data.experimental.WorkerConfig)
}
inline PROTOBUF_NDEBUG_INLINE WorkerConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::tensorflow::data::experimental::WorkerConfig& from_msg)
      : worker_tags_{visibility, arena, from.worker_tags_},
        protocol_(arena, from.protocol_),
        dispatcher_address_(arena, from.dispatcher_address_),
        worker_address_(arena, from.worker_address_),
        data_transfer_protocol_(arena, from.data_transfer_protocol_),
        data_transfer_address_(arena, from.data_transfer_address_),
        _cached_size_{0} {}

WorkerConfig::WorkerConfig(
    ::google::protobuf::Arena* arena,
    const WorkerConfig& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  WorkerConfig* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, port_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, port_),
           offsetof(Impl_, data_transfer_port_) -
               offsetof(Impl_, port_) +
               sizeof(Impl_::data_transfer_port_));

  // @@protoc_insertion_point(copy_constructor:tensorflow.data.experimental.WorkerConfig)
}
inline PROTOBUF_NDEBUG_INLINE WorkerConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : worker_tags_{visibility, arena},
        protocol_(arena),
        dispatcher_address_(arena),
        worker_address_(arena),
        data_transfer_protocol_(arena),
        data_transfer_address_(arena),
        _cached_size_{0} {}

inline void WorkerConfig::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, port_),
           0,
           offsetof(Impl_, data_transfer_port_) -
               offsetof(Impl_, port_) +
               sizeof(Impl_::data_transfer_port_));
}
WorkerConfig::~WorkerConfig() {
  // @@protoc_insertion_point(destructor:tensorflow.data.experimental.WorkerConfig)
  SharedDtor(*this);
}
inline void WorkerConfig::SharedDtor(MessageLite& self) {
  WorkerConfig& this_ = static_cast<WorkerConfig&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.protocol_.Destroy();
  this_._impl_.dispatcher_address_.Destroy();
  this_._impl_.worker_address_.Destroy();
  this_._impl_.data_transfer_protocol_.Destroy();
  this_._impl_.data_transfer_address_.Destroy();
  this_._impl_.~Impl_();
}

inline void* WorkerConfig::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) WorkerConfig(arena);
}
constexpr auto WorkerConfig::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(WorkerConfig, _impl_.worker_tags_) +
          decltype(WorkerConfig::_impl_.worker_tags_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(WorkerConfig), alignof(WorkerConfig), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&WorkerConfig::PlacementNew_,
                                 sizeof(WorkerConfig),
                                 alignof(WorkerConfig));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull WorkerConfig::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_WorkerConfig_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &WorkerConfig::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<WorkerConfig>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &WorkerConfig::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<WorkerConfig>(), &WorkerConfig::ByteSizeLong,
            &WorkerConfig::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(WorkerConfig, _impl_._cached_size_),
        false,
    },
    &WorkerConfig::kDescriptorMethods,
    &descriptor_table_tensorflow_2fcore_2fprotobuf_2fservice_5fconfig_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* WorkerConfig::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 13, 0, 152, 2> WorkerConfig::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    13, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294959104,  // skipmap
    offsetof(decltype(_table_), field_entries),
    13,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tensorflow::data::experimental::WorkerConfig>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int64 port = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(WorkerConfig, _impl_.port_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(WorkerConfig, _impl_.port_)}},
    // string protocol = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(WorkerConfig, _impl_.protocol_)}},
    // string dispatcher_address = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(WorkerConfig, _impl_.dispatcher_address_)}},
    // string worker_address = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(WorkerConfig, _impl_.worker_address_)}},
    // int64 heartbeat_interval_ms = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(WorkerConfig, _impl_.heartbeat_interval_ms_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(WorkerConfig, _impl_.heartbeat_interval_ms_)}},
    // int64 dispatcher_timeout_ms = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(WorkerConfig, _impl_.dispatcher_timeout_ms_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(WorkerConfig, _impl_.dispatcher_timeout_ms_)}},
    // string data_transfer_protocol = 7;
    {::_pbi::TcParser::FastUS1,
     {58, 63, 0, PROTOBUF_FIELD_OFFSET(WorkerConfig, _impl_.data_transfer_protocol_)}},
    // string data_transfer_address = 8;
    {::_pbi::TcParser::FastUS1,
     {66, 63, 0, PROTOBUF_FIELD_OFFSET(WorkerConfig, _impl_.data_transfer_address_)}},
    // int64 shutdown_quiet_period_ms = 9;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(WorkerConfig, _impl_.shutdown_quiet_period_ms_), 63>(),
     {72, 63, 0, PROTOBUF_FIELD_OFFSET(WorkerConfig, _impl_.shutdown_quiet_period_ms_)}},
    // repeated string worker_tags = 10;
    {::_pbi::TcParser::FastUR1,
     {82, 63, 0, PROTOBUF_FIELD_OFFSET(WorkerConfig, _impl_.worker_tags_)}},
    // int64 cross_trainer_cache_size_bytes = 11;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(WorkerConfig, _impl_.cross_trainer_cache_size_bytes_), 63>(),
     {88, 63, 0, PROTOBUF_FIELD_OFFSET(WorkerConfig, _impl_.cross_trainer_cache_size_bytes_)}},
    // int64 snapshot_max_chunk_size_bytes = 12;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(WorkerConfig, _impl_.snapshot_max_chunk_size_bytes_), 63>(),
     {96, 63, 0, PROTOBUF_FIELD_OFFSET(WorkerConfig, _impl_.snapshot_max_chunk_size_bytes_)}},
    // int64 data_transfer_port = 13;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(WorkerConfig, _impl_.data_transfer_port_), 63>(),
     {104, 63, 0, PROTOBUF_FIELD_OFFSET(WorkerConfig, _impl_.data_transfer_port_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // int64 port = 1;
    {PROTOBUF_FIELD_OFFSET(WorkerConfig, _impl_.port_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // string protocol = 2;
    {PROTOBUF_FIELD_OFFSET(WorkerConfig, _impl_.protocol_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string dispatcher_address = 3;
    {PROTOBUF_FIELD_OFFSET(WorkerConfig, _impl_.dispatcher_address_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string worker_address = 4;
    {PROTOBUF_FIELD_OFFSET(WorkerConfig, _impl_.worker_address_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int64 heartbeat_interval_ms = 5;
    {PROTOBUF_FIELD_OFFSET(WorkerConfig, _impl_.heartbeat_interval_ms_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // int64 dispatcher_timeout_ms = 6;
    {PROTOBUF_FIELD_OFFSET(WorkerConfig, _impl_.dispatcher_timeout_ms_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // string data_transfer_protocol = 7;
    {PROTOBUF_FIELD_OFFSET(WorkerConfig, _impl_.data_transfer_protocol_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string data_transfer_address = 8;
    {PROTOBUF_FIELD_OFFSET(WorkerConfig, _impl_.data_transfer_address_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int64 shutdown_quiet_period_ms = 9;
    {PROTOBUF_FIELD_OFFSET(WorkerConfig, _impl_.shutdown_quiet_period_ms_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // repeated string worker_tags = 10;
    {PROTOBUF_FIELD_OFFSET(WorkerConfig, _impl_.worker_tags_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // int64 cross_trainer_cache_size_bytes = 11;
    {PROTOBUF_FIELD_OFFSET(WorkerConfig, _impl_.cross_trainer_cache_size_bytes_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // int64 snapshot_max_chunk_size_bytes = 12;
    {PROTOBUF_FIELD_OFFSET(WorkerConfig, _impl_.snapshot_max_chunk_size_bytes_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // int64 data_transfer_port = 13;
    {PROTOBUF_FIELD_OFFSET(WorkerConfig, _impl_.data_transfer_port_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
  }},
  // no aux_entries
  {{
    "\51\0\10\22\16\0\0\26\25\0\13\0\0\0\0\0"
    "tensorflow.data.experimental.WorkerConfig"
    "protocol"
    "dispatcher_address"
    "worker_address"
    "data_transfer_protocol"
    "data_transfer_address"
    "worker_tags"
  }},
};

PROTOBUF_NOINLINE void WorkerConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.data.experimental.WorkerConfig)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.worker_tags_.Clear();
  _impl_.protocol_.ClearToEmpty();
  _impl_.dispatcher_address_.ClearToEmpty();
  _impl_.worker_address_.ClearToEmpty();
  _impl_.data_transfer_protocol_.ClearToEmpty();
  _impl_.data_transfer_address_.ClearToEmpty();
  ::memset(&_impl_.port_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.data_transfer_port_) -
      reinterpret_cast<char*>(&_impl_.port_)) + sizeof(_impl_.data_transfer_port_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* WorkerConfig::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const WorkerConfig& this_ = static_cast<const WorkerConfig&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* WorkerConfig::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const WorkerConfig& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:tensorflow.data.experimental.WorkerConfig)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // int64 port = 1;
          if (this_._internal_port() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt64ToArrayWithField<1>(
                    stream, this_._internal_port(), target);
          }

          // string protocol = 2;
          if (!this_._internal_protocol().empty()) {
            const std::string& _s = this_._internal_protocol();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tensorflow.data.experimental.WorkerConfig.protocol");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          // string dispatcher_address = 3;
          if (!this_._internal_dispatcher_address().empty()) {
            const std::string& _s = this_._internal_dispatcher_address();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tensorflow.data.experimental.WorkerConfig.dispatcher_address");
            target = stream->WriteStringMaybeAliased(3, _s, target);
          }

          // string worker_address = 4;
          if (!this_._internal_worker_address().empty()) {
            const std::string& _s = this_._internal_worker_address();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tensorflow.data.experimental.WorkerConfig.worker_address");
            target = stream->WriteStringMaybeAliased(4, _s, target);
          }

          // int64 heartbeat_interval_ms = 5;
          if (this_._internal_heartbeat_interval_ms() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt64ToArrayWithField<5>(
                    stream, this_._internal_heartbeat_interval_ms(), target);
          }

          // int64 dispatcher_timeout_ms = 6;
          if (this_._internal_dispatcher_timeout_ms() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt64ToArrayWithField<6>(
                    stream, this_._internal_dispatcher_timeout_ms(), target);
          }

          // string data_transfer_protocol = 7;
          if (!this_._internal_data_transfer_protocol().empty()) {
            const std::string& _s = this_._internal_data_transfer_protocol();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tensorflow.data.experimental.WorkerConfig.data_transfer_protocol");
            target = stream->WriteStringMaybeAliased(7, _s, target);
          }

          // string data_transfer_address = 8;
          if (!this_._internal_data_transfer_address().empty()) {
            const std::string& _s = this_._internal_data_transfer_address();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tensorflow.data.experimental.WorkerConfig.data_transfer_address");
            target = stream->WriteStringMaybeAliased(8, _s, target);
          }

          // int64 shutdown_quiet_period_ms = 9;
          if (this_._internal_shutdown_quiet_period_ms() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt64ToArrayWithField<9>(
                    stream, this_._internal_shutdown_quiet_period_ms(), target);
          }

          // repeated string worker_tags = 10;
          for (int i = 0, n = this_._internal_worker_tags_size(); i < n; ++i) {
            const auto& s = this_._internal_worker_tags().Get(i);
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tensorflow.data.experimental.WorkerConfig.worker_tags");
            target = stream->WriteString(10, s, target);
          }

          // int64 cross_trainer_cache_size_bytes = 11;
          if (this_._internal_cross_trainer_cache_size_bytes() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt64ToArrayWithField<11>(
                    stream, this_._internal_cross_trainer_cache_size_bytes(), target);
          }

          // int64 snapshot_max_chunk_size_bytes = 12;
          if (this_._internal_snapshot_max_chunk_size_bytes() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt64ToArrayWithField<12>(
                    stream, this_._internal_snapshot_max_chunk_size_bytes(), target);
          }

          // int64 data_transfer_port = 13;
          if (this_._internal_data_transfer_port() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt64ToArrayWithField<13>(
                    stream, this_._internal_data_transfer_port(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:tensorflow.data.experimental.WorkerConfig)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t WorkerConfig::ByteSizeLong(const MessageLite& base) {
          const WorkerConfig& this_ = static_cast<const WorkerConfig&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t WorkerConfig::ByteSizeLong() const {
          const WorkerConfig& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:tensorflow.data.experimental.WorkerConfig)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated string worker_tags = 10;
            {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_worker_tags().size());
              for (int i = 0, n = this_._internal_worker_tags().size(); i < n; ++i) {
                total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
                    this_._internal_worker_tags().Get(i));
              }
            }
          }
           {
            // string protocol = 2;
            if (!this_._internal_protocol().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_protocol());
            }
            // string dispatcher_address = 3;
            if (!this_._internal_dispatcher_address().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_dispatcher_address());
            }
            // string worker_address = 4;
            if (!this_._internal_worker_address().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_worker_address());
            }
            // string data_transfer_protocol = 7;
            if (!this_._internal_data_transfer_protocol().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_data_transfer_protocol());
            }
            // string data_transfer_address = 8;
            if (!this_._internal_data_transfer_address().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_data_transfer_address());
            }
            // int64 port = 1;
            if (this_._internal_port() != 0) {
              total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
                  this_._internal_port());
            }
            // int64 heartbeat_interval_ms = 5;
            if (this_._internal_heartbeat_interval_ms() != 0) {
              total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
                  this_._internal_heartbeat_interval_ms());
            }
            // int64 dispatcher_timeout_ms = 6;
            if (this_._internal_dispatcher_timeout_ms() != 0) {
              total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
                  this_._internal_dispatcher_timeout_ms());
            }
            // int64 shutdown_quiet_period_ms = 9;
            if (this_._internal_shutdown_quiet_period_ms() != 0) {
              total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
                  this_._internal_shutdown_quiet_period_ms());
            }
            // int64 cross_trainer_cache_size_bytes = 11;
            if (this_._internal_cross_trainer_cache_size_bytes() != 0) {
              total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
                  this_._internal_cross_trainer_cache_size_bytes());
            }
            // int64 snapshot_max_chunk_size_bytes = 12;
            if (this_._internal_snapshot_max_chunk_size_bytes() != 0) {
              total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
                  this_._internal_snapshot_max_chunk_size_bytes());
            }
            // int64 data_transfer_port = 13;
            if (this_._internal_data_transfer_port() != 0) {
              total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
                  this_._internal_data_transfer_port());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void WorkerConfig::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<WorkerConfig*>(&to_msg);
  auto& from = static_cast<const WorkerConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.data.experimental.WorkerConfig)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_worker_tags()->MergeFrom(from._internal_worker_tags());
  if (!from._internal_protocol().empty()) {
    _this->_internal_set_protocol(from._internal_protocol());
  }
  if (!from._internal_dispatcher_address().empty()) {
    _this->_internal_set_dispatcher_address(from._internal_dispatcher_address());
  }
  if (!from._internal_worker_address().empty()) {
    _this->_internal_set_worker_address(from._internal_worker_address());
  }
  if (!from._internal_data_transfer_protocol().empty()) {
    _this->_internal_set_data_transfer_protocol(from._internal_data_transfer_protocol());
  }
  if (!from._internal_data_transfer_address().empty()) {
    _this->_internal_set_data_transfer_address(from._internal_data_transfer_address());
  }
  if (from._internal_port() != 0) {
    _this->_impl_.port_ = from._impl_.port_;
  }
  if (from._internal_heartbeat_interval_ms() != 0) {
    _this->_impl_.heartbeat_interval_ms_ = from._impl_.heartbeat_interval_ms_;
  }
  if (from._internal_dispatcher_timeout_ms() != 0) {
    _this->_impl_.dispatcher_timeout_ms_ = from._impl_.dispatcher_timeout_ms_;
  }
  if (from._internal_shutdown_quiet_period_ms() != 0) {
    _this->_impl_.shutdown_quiet_period_ms_ = from._impl_.shutdown_quiet_period_ms_;
  }
  if (from._internal_cross_trainer_cache_size_bytes() != 0) {
    _this->_impl_.cross_trainer_cache_size_bytes_ = from._impl_.cross_trainer_cache_size_bytes_;
  }
  if (from._internal_snapshot_max_chunk_size_bytes() != 0) {
    _this->_impl_.snapshot_max_chunk_size_bytes_ = from._impl_.snapshot_max_chunk_size_bytes_;
  }
  if (from._internal_data_transfer_port() != 0) {
    _this->_impl_.data_transfer_port_ = from._impl_.data_transfer_port_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void WorkerConfig::CopyFrom(const WorkerConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.data.experimental.WorkerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void WorkerConfig::InternalSwap(WorkerConfig* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.worker_tags_.InternalSwap(&other->_impl_.worker_tags_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.protocol_, &other->_impl_.protocol_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.dispatcher_address_, &other->_impl_.dispatcher_address_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.worker_address_, &other->_impl_.worker_address_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.data_transfer_protocol_, &other->_impl_.data_transfer_protocol_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.data_transfer_address_, &other->_impl_.data_transfer_address_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WorkerConfig, _impl_.data_transfer_port_)
      + sizeof(WorkerConfig::_impl_.data_transfer_port_)
      - PROTOBUF_FIELD_OFFSET(WorkerConfig, _impl_.port_)>(
          reinterpret_cast<char*>(&_impl_.port_),
          reinterpret_cast<char*>(&other->_impl_.port_));
}

::google::protobuf::Metadata WorkerConfig::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace experimental
}  // namespace data
}  // namespace tensorflow
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_tensorflow_2fcore_2fprotobuf_2fservice_5fconfig_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
