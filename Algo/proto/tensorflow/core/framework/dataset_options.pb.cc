// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: tensorflow/core/framework/dataset_options.proto
// Protobuf C++ Version: 5.29.0

#include "tensorflow/core/framework/dataset_options.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace tensorflow {
namespace data {

inline constexpr ThreadingOptions::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : optional_max_intra_op_parallelism_{},
        optional_private_threadpool_size_{},
        _cached_size_{0},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR ThreadingOptions::ThreadingOptions(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ThreadingOptionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ThreadingOptionsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ThreadingOptionsDefaultTypeInternal() {}
  union {
    ThreadingOptions _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ThreadingOptionsDefaultTypeInternal _ThreadingOptions_default_instance_;

inline constexpr ServiceOptions::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : optional_pinned_{},
        _cached_size_{0},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR ServiceOptions::ServiceOptions(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ServiceOptionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServiceOptionsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServiceOptionsDefaultTypeInternal() {}
  union {
    ServiceOptions _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServiceOptionsDefaultTypeInternal _ServiceOptions_default_instance_;

inline constexpr OptimizationOptions::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : optional_apply_default_optimizations_{},
        optional_filter_fusion_{},
        optional_map_and_batch_fusion_{},
        optional_map_and_filter_fusion_{},
        optional_map_fusion_{},
        optional_map_parallelization_{},
        optional_noop_elimination_{},
        optional_parallel_batch_{},
        optional_shuffle_and_repeat_fusion_{},
        optional_filter_parallelization_{},
        optional_inject_prefetch_{},
        optional_seq_interleave_prefetch_{},
        _cached_size_{0},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR OptimizationOptions::OptimizationOptions(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct OptimizationOptionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OptimizationOptionsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~OptimizationOptionsDefaultTypeInternal() {}
  union {
    OptimizationOptions _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OptimizationOptionsDefaultTypeInternal _OptimizationOptions_default_instance_;

inline constexpr DistributeOptions::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : auto_shard_policy_{static_cast< ::tensorflow::data::AutoShardPolicy >(0)},
        optional_num_devices_{},
        _cached_size_{0},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR DistributeOptions::DistributeOptions(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct DistributeOptionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DistributeOptionsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DistributeOptionsDefaultTypeInternal() {}
  union {
    DistributeOptions _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DistributeOptionsDefaultTypeInternal _DistributeOptions_default_instance_;

inline constexpr CardinalityOptions::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : compute_level_{static_cast< ::tensorflow::data::CardinalityOptions_ComputeLevel >(0)},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR CardinalityOptions::CardinalityOptions(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct CardinalityOptionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CardinalityOptionsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CardinalityOptionsDefaultTypeInternal() {}
  union {
    CardinalityOptions _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CardinalityOptionsDefaultTypeInternal _CardinalityOptions_default_instance_;

inline constexpr AutotuneOptions::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : optional_enabled_{},
        optional_cpu_budget_{},
        optional_ram_budget_{},
        optional_autotune_algorithm_{},
        optional_initial_parallelism_{},
        _cached_size_{0},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR AutotuneOptions::AutotuneOptions(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct AutotuneOptionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AutotuneOptionsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AutotuneOptionsDefaultTypeInternal() {}
  union {
    AutotuneOptions _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AutotuneOptionsDefaultTypeInternal _AutotuneOptions_default_instance_;

inline constexpr Options::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        framework_type_{},
        distribute_options_{nullptr},
        optimization_options_{nullptr},
        threading_options_{nullptr},
        autotune_options_{nullptr},
        service_options_{nullptr},
        optional_dataset_name_{},
        optional_deterministic_{},
        optional_slack_{},
        optional_external_state_policy_{},
        optional_symbolic_checkpoint_{},
        optional_warm_start_{},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR Options::Options(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct OptionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OptionsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~OptionsDefaultTypeInternal() {}
  union {
    Options _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OptionsDefaultTypeInternal _Options_default_instance_;
}  // namespace data
}  // namespace tensorflow
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_tensorflow_2fcore_2fframework_2fdataset_5foptions_2eproto[3];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_tensorflow_2fcore_2fframework_2fdataset_5foptions_2eproto = nullptr;
const ::uint32_t
    TableStruct_tensorflow_2fcore_2fframework_2fdataset_5foptions_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::tensorflow::data::AutotuneOptions, _internal_metadata_),
        ~0u,  // no _extensions_
        PROTOBUF_FIELD_OFFSET(::tensorflow::data::AutotuneOptions, _impl_._oneof_case_[0]),
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        PROTOBUF_FIELD_OFFSET(::tensorflow::data::AutotuneOptions, _impl_.optional_enabled_),
        PROTOBUF_FIELD_OFFSET(::tensorflow::data::AutotuneOptions, _impl_.optional_cpu_budget_),
        PROTOBUF_FIELD_OFFSET(::tensorflow::data::AutotuneOptions, _impl_.optional_ram_budget_),
        PROTOBUF_FIELD_OFFSET(::tensorflow::data::AutotuneOptions, _impl_.optional_autotune_algorithm_),
        PROTOBUF_FIELD_OFFSET(::tensorflow::data::AutotuneOptions, _impl_.optional_initial_parallelism_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::tensorflow::data::CardinalityOptions, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::tensorflow::data::CardinalityOptions, _impl_.compute_level_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::tensorflow::data::DistributeOptions, _internal_metadata_),
        ~0u,  // no _extensions_
        PROTOBUF_FIELD_OFFSET(::tensorflow::data::DistributeOptions, _impl_._oneof_case_[0]),
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::tensorflow::data::DistributeOptions, _impl_.auto_shard_policy_),
        ::_pbi::kInvalidFieldOffsetTag,
        PROTOBUF_FIELD_OFFSET(::tensorflow::data::DistributeOptions, _impl_.optional_num_devices_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::tensorflow::data::OptimizationOptions, _internal_metadata_),
        ~0u,  // no _extensions_
        PROTOBUF_FIELD_OFFSET(::tensorflow::data::OptimizationOptions, _impl_._oneof_case_[0]),
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        PROTOBUF_FIELD_OFFSET(::tensorflow::data::OptimizationOptions, _impl_.optional_apply_default_optimizations_),
        PROTOBUF_FIELD_OFFSET(::tensorflow::data::OptimizationOptions, _impl_.optional_filter_fusion_),
        PROTOBUF_FIELD_OFFSET(::tensorflow::data::OptimizationOptions, _impl_.optional_map_and_batch_fusion_),
        PROTOBUF_FIELD_OFFSET(::tensorflow::data::OptimizationOptions, _impl_.optional_map_and_filter_fusion_),
        PROTOBUF_FIELD_OFFSET(::tensorflow::data::OptimizationOptions, _impl_.optional_map_fusion_),
        PROTOBUF_FIELD_OFFSET(::tensorflow::data::OptimizationOptions, _impl_.optional_map_parallelization_),
        PROTOBUF_FIELD_OFFSET(::tensorflow::data::OptimizationOptions, _impl_.optional_noop_elimination_),
        PROTOBUF_FIELD_OFFSET(::tensorflow::data::OptimizationOptions, _impl_.optional_parallel_batch_),
        PROTOBUF_FIELD_OFFSET(::tensorflow::data::OptimizationOptions, _impl_.optional_shuffle_and_repeat_fusion_),
        PROTOBUF_FIELD_OFFSET(::tensorflow::data::OptimizationOptions, _impl_.optional_filter_parallelization_),
        PROTOBUF_FIELD_OFFSET(::tensorflow::data::OptimizationOptions, _impl_.optional_inject_prefetch_),
        PROTOBUF_FIELD_OFFSET(::tensorflow::data::OptimizationOptions, _impl_.optional_seq_interleave_prefetch_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::tensorflow::data::ServiceOptions, _internal_metadata_),
        ~0u,  // no _extensions_
        PROTOBUF_FIELD_OFFSET(::tensorflow::data::ServiceOptions, _impl_._oneof_case_[0]),
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        ::_pbi::kInvalidFieldOffsetTag,
        PROTOBUF_FIELD_OFFSET(::tensorflow::data::ServiceOptions, _impl_.optional_pinned_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::tensorflow::data::ThreadingOptions, _internal_metadata_),
        ~0u,  // no _extensions_
        PROTOBUF_FIELD_OFFSET(::tensorflow::data::ThreadingOptions, _impl_._oneof_case_[0]),
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        PROTOBUF_FIELD_OFFSET(::tensorflow::data::ThreadingOptions, _impl_.optional_max_intra_op_parallelism_),
        PROTOBUF_FIELD_OFFSET(::tensorflow::data::ThreadingOptions, _impl_.optional_private_threadpool_size_),
        PROTOBUF_FIELD_OFFSET(::tensorflow::data::Options, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::tensorflow::data::Options, _internal_metadata_),
        ~0u,  // no _extensions_
        PROTOBUF_FIELD_OFFSET(::tensorflow::data::Options, _impl_._oneof_case_[0]),
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        ::_pbi::kInvalidFieldOffsetTag,
        PROTOBUF_FIELD_OFFSET(::tensorflow::data::Options, _impl_.framework_type_),
        ::_pbi::kInvalidFieldOffsetTag,
        PROTOBUF_FIELD_OFFSET(::tensorflow::data::Options, _impl_.autotune_options_),
        PROTOBUF_FIELD_OFFSET(::tensorflow::data::Options, _impl_.distribute_options_),
        PROTOBUF_FIELD_OFFSET(::tensorflow::data::Options, _impl_.optimization_options_),
        PROTOBUF_FIELD_OFFSET(::tensorflow::data::Options, _impl_.service_options_),
        ::_pbi::kInvalidFieldOffsetTag,
        PROTOBUF_FIELD_OFFSET(::tensorflow::data::Options, _impl_.threading_options_),
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        PROTOBUF_FIELD_OFFSET(::tensorflow::data::Options, _impl_.optional_dataset_name_),
        PROTOBUF_FIELD_OFFSET(::tensorflow::data::Options, _impl_.optional_deterministic_),
        PROTOBUF_FIELD_OFFSET(::tensorflow::data::Options, _impl_.optional_slack_),
        PROTOBUF_FIELD_OFFSET(::tensorflow::data::Options, _impl_.optional_external_state_policy_),
        PROTOBUF_FIELD_OFFSET(::tensorflow::data::Options, _impl_.optional_symbolic_checkpoint_),
        PROTOBUF_FIELD_OFFSET(::tensorflow::data::Options, _impl_.optional_warm_start_),
        ~0u,
        ~0u,
        ~0u,
        3,
        0,
        1,
        4,
        ~0u,
        2,
        ~0u,
        ~0u,
        ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::tensorflow::data::AutotuneOptions)},
        {18, -1, -1, sizeof(::tensorflow::data::CardinalityOptions)},
        {27, -1, -1, sizeof(::tensorflow::data::DistributeOptions)},
        {38, -1, -1, sizeof(::tensorflow::data::OptimizationOptions)},
        {70, -1, -1, sizeof(::tensorflow::data::ServiceOptions)},
        {80, -1, -1, sizeof(::tensorflow::data::ThreadingOptions)},
        {92, 118, -1, sizeof(::tensorflow::data::Options)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::tensorflow::data::_AutotuneOptions_default_instance_._instance,
    &::tensorflow::data::_CardinalityOptions_default_instance_._instance,
    &::tensorflow::data::_DistributeOptions_default_instance_._instance,
    &::tensorflow::data::_OptimizationOptions_default_instance_._instance,
    &::tensorflow::data::_ServiceOptions_default_instance_._instance,
    &::tensorflow::data::_ThreadingOptions_default_instance_._instance,
    &::tensorflow::data::_Options_default_instance_._instance,
};
const char descriptor_table_protodef_tensorflow_2fcore_2fframework_2fdataset_5foptions_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n/tensorflow/core/framework/dataset_opti"
    "ons.proto\022\017tensorflow.data\032%tensorflow/c"
    "ore/framework/model.proto\"\270\002\n\017AutotuneOp"
    "tions\022\021\n\007enabled\030\001 \001(\010H\000\022\024\n\ncpu_budget\030\002"
    " \001(\005H\001\022\024\n\nram_budget\030\003 \001(\003H\002\022F\n\022autotune"
    "_algorithm\030\004 \001(\0162(.tensorflow.data.model"
    ".AutotuneAlgorithmH\003\022\035\n\023initial_parallel"
    "ism\030\005 \001(\003H\004B\022\n\020optional_enabledB\025\n\023optio"
    "nal_cpu_budgetB\025\n\023optional_ram_budgetB\035\n"
    "\033optional_autotune_algorithmB\036\n\034optional"
    "_initial_parallelism\"\321\001\n\022CardinalityOpti"
    "ons\022G\n\rcompute_level\030\001 \001(\01620.tensorflow."
    "data.CardinalityOptions.ComputeLevel\"r\n\014"
    "ComputeLevel\022#\n\037CARDINALITY_COMPUTE_UNSP"
    "ECIFIED\020\000\022\033\n\027CARDINALITY_COMPUTE_LOW\020\001\022 "
    "\n\034CARDINALITY_COMPUTE_MODERATE\020\002\"\177\n\021Dist"
    "ributeOptions\022;\n\021auto_shard_policy\030\001 \001(\016"
    "2 .tensorflow.data.AutoShardPolicy\022\025\n\013nu"
    "m_devices\030\002 \001(\005H\000B\026\n\024optional_num_device"
    "s\"\271\006\n\023OptimizationOptions\022%\n\033apply_defau"
    "lt_optimizations\030\001 \001(\010H\000\022\027\n\rfilter_fusio"
    "n\030\006 \001(\010H\001\022\036\n\024map_and_batch_fusion\030\t \001(\010H"
    "\002\022\037\n\025map_and_filter_fusion\030\n \001(\010H\003\022\024\n\nma"
    "p_fusion\030\013 \001(\010H\004\022\035\n\023map_parallelization\030"
    "\014 \001(\010H\005\022\032\n\020noop_elimination\030\016 \001(\010H\006\022\030\n\016p"
    "arallel_batch\030\017 \001(\010H\007\022#\n\031shuffle_and_rep"
    "eat_fusion\030\021 \001(\010H\010\022 \n\026filter_paralleliza"
    "tion\030\022 \001(\010H\t\022\031\n\017inject_prefetch\030\023 \001(\010H\n\022"
    "!\n\027seq_interleave_prefetch\030\025 \001(\010H\013B&\n$op"
    "tional_apply_default_optimizationsB\030\n\026op"
    "tional_filter_fusionB\037\n\035optional_map_and"
    "_batch_fusionB \n\036optional_map_and_filter"
    "_fusionB\025\n\023optional_map_fusionB\036\n\034option"
    "al_map_parallelizationB\033\n\031optional_noop_"
    "eliminationB\031\n\027optional_parallel_batchB$"
    "\n\"optional_shuffle_and_repeat_fusionB!\n\037"
    "optional_filter_parallelizationB\032\n\030optio"
    "nal_inject_prefetchB\"\n optional_seq_inte"
    "rleave_prefetchJ\004\010\002\020\003J\004\010\003\020\004J\004\010\004\020\005J\004\010\005\020\006J"
    "\004\010\007\020\010J\004\010\010\020\tJ\004\010\r\020\016J\004\010\020\020\021J\004\010\024\020\025\"5\n\016Service"
    "Options\022\020\n\006pinned\030\001 \001(\010H\000B\021\n\017optional_pi"
    "nned\"\242\001\n\020ThreadingOptions\022\"\n\030max_intra_o"
    "p_parallelism\030\001 \001(\005H\000\022!\n\027private_threadp"
    "ool_size\030\002 \001(\005H\001B#\n!optional_max_intra_o"
    "p_parallelismB\"\n optional_private_thread"
    "pool_size\"\265\005\n\007Options\022\026\n\014dataset_name\030\n "
    "\001(\tH\000\022\026\n\016framework_type\030\013 \003(\t\022\027\n\rdetermi"
    "nistic\030\001 \001(\010H\001\022:\n\020autotune_options\030\007 \001(\013"
    "2 .tensorflow.data.AutotuneOptions\022>\n\022di"
    "stribute_options\030\002 \001(\0132\".tensorflow.data"
    ".DistributeOptions\022B\n\024optimization_optio"
    "ns\030\003 \001(\0132$.tensorflow.data.OptimizationO"
    "ptions\0228\n\017service_options\030\014 \001(\0132\037.tensor"
    "flow.data.ServiceOptions\022\017\n\005slack\030\004 \001(\010H"
    "\002\022<\n\021threading_options\030\005 \001(\0132!.tensorflo"
    "w.data.ThreadingOptions\022E\n\025external_stat"
    "e_policy\030\006 \001(\0162$.tensorflow.data.Externa"
    "lStatePolicyH\003\022\035\n\023symbolic_checkpoint\030\010 "
    "\001(\010H\004\022\024\n\nwarm_start\030\t \001(\010H\005B\027\n\025optional_"
    "dataset_nameB\030\n\026optional_deterministicB\020"
    "\n\016optional_slackB \n\036optional_external_st"
    "ate_policyB\036\n\034optional_symbolic_checkpoi"
    "ntB\025\n\023optional_warm_start*K\n\017AutoShardPo"
    "licy\022\010\n\004AUTO\020\000\022\010\n\004FILE\020\001\022\010\n\004DATA\020\002\022\010\n\004HI"
    "NT\020\003\022\020\n\003OFF\020\377\377\377\377\377\377\377\377\377\001*J\n\023ExternalStateP"
    "olicy\022\017\n\013POLICY_WARN\020\000\022\021\n\rPOLICY_IGNORE\020"
    "\001\022\017\n\013POLICY_FAIL\020\002BXZVgithub.com/tensorf"
    "low/tensorflow/tensorflow/go/core/framew"
    "ork/dataset_options_go_protob\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_tensorflow_2fcore_2fframework_2fdataset_5foptions_2eproto_deps[1] =
    {
        &::descriptor_table_tensorflow_2fcore_2fframework_2fmodel_2eproto,
};
static ::absl::once_flag descriptor_table_tensorflow_2fcore_2fframework_2fdataset_5foptions_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_tensorflow_2fcore_2fframework_2fdataset_5foptions_2eproto = {
    false,
    false,
    2756,
    descriptor_table_protodef_tensorflow_2fcore_2fframework_2fdataset_5foptions_2eproto,
    "tensorflow/core/framework/dataset_options.proto",
    &descriptor_table_tensorflow_2fcore_2fframework_2fdataset_5foptions_2eproto_once,
    descriptor_table_tensorflow_2fcore_2fframework_2fdataset_5foptions_2eproto_deps,
    1,
    7,
    schemas,
    file_default_instances,
    TableStruct_tensorflow_2fcore_2fframework_2fdataset_5foptions_2eproto::offsets,
    file_level_enum_descriptors_tensorflow_2fcore_2fframework_2fdataset_5foptions_2eproto,
    file_level_service_descriptors_tensorflow_2fcore_2fframework_2fdataset_5foptions_2eproto,
};
namespace tensorflow {
namespace data {
const ::google::protobuf::EnumDescriptor* CardinalityOptions_ComputeLevel_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_tensorflow_2fcore_2fframework_2fdataset_5foptions_2eproto);
  return file_level_enum_descriptors_tensorflow_2fcore_2fframework_2fdataset_5foptions_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t CardinalityOptions_ComputeLevel_internal_data_[] = {
    196608u, 0u, };
bool CardinalityOptions_ComputeLevel_IsValid(int value) {
  return 0 <= value && value <= 2;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr CardinalityOptions_ComputeLevel CardinalityOptions::CARDINALITY_COMPUTE_UNSPECIFIED;
constexpr CardinalityOptions_ComputeLevel CardinalityOptions::CARDINALITY_COMPUTE_LOW;
constexpr CardinalityOptions_ComputeLevel CardinalityOptions::CARDINALITY_COMPUTE_MODERATE;
constexpr CardinalityOptions_ComputeLevel CardinalityOptions::ComputeLevel_MIN;
constexpr CardinalityOptions_ComputeLevel CardinalityOptions::ComputeLevel_MAX;
constexpr int CardinalityOptions::ComputeLevel_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* AutoShardPolicy_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_tensorflow_2fcore_2fframework_2fdataset_5foptions_2eproto);
  return file_level_enum_descriptors_tensorflow_2fcore_2fframework_2fdataset_5foptions_2eproto[1];
}
PROTOBUF_CONSTINIT const uint32_t AutoShardPolicy_internal_data_[] = {
    393215u, 0u, };
bool AutoShardPolicy_IsValid(int value) {
  return -1 <= value && value <= 3;
}
const ::google::protobuf::EnumDescriptor* ExternalStatePolicy_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_tensorflow_2fcore_2fframework_2fdataset_5foptions_2eproto);
  return file_level_enum_descriptors_tensorflow_2fcore_2fframework_2fdataset_5foptions_2eproto[2];
}
PROTOBUF_CONSTINIT const uint32_t ExternalStatePolicy_internal_data_[] = {
    196608u, 0u, };
bool ExternalStatePolicy_IsValid(int value) {
  return 0 <= value && value <= 2;
}
// ===================================================================

class AutotuneOptions::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
      PROTOBUF_FIELD_OFFSET(::tensorflow::data::AutotuneOptions, _impl_._oneof_case_);
};

AutotuneOptions::AutotuneOptions(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.data.AutotuneOptions)
}
inline PROTOBUF_NDEBUG_INLINE AutotuneOptions::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::tensorflow::data::AutotuneOptions& from_msg)
      : optional_enabled_{},
        optional_cpu_budget_{},
        optional_ram_budget_{},
        optional_autotune_algorithm_{},
        optional_initial_parallelism_{},
        _cached_size_{0},
        _oneof_case_{from._oneof_case_[0], from._oneof_case_[1], from._oneof_case_[2], from._oneof_case_[3], from._oneof_case_[4]} {}

AutotuneOptions::AutotuneOptions(
    ::google::protobuf::Arena* arena,
    const AutotuneOptions& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  AutotuneOptions* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  switch (optional_enabled_case()) {
    case OPTIONAL_ENABLED_NOT_SET:
      break;
      case kEnabled:
        _impl_.optional_enabled_.enabled_ = from._impl_.optional_enabled_.enabled_;
        break;
  }
  switch (optional_cpu_budget_case()) {
    case OPTIONAL_CPU_BUDGET_NOT_SET:
      break;
      case kCpuBudget:
        _impl_.optional_cpu_budget_.cpu_budget_ = from._impl_.optional_cpu_budget_.cpu_budget_;
        break;
  }
  switch (optional_ram_budget_case()) {
    case OPTIONAL_RAM_BUDGET_NOT_SET:
      break;
      case kRamBudget:
        _impl_.optional_ram_budget_.ram_budget_ = from._impl_.optional_ram_budget_.ram_budget_;
        break;
  }
  switch (optional_autotune_algorithm_case()) {
    case OPTIONAL_AUTOTUNE_ALGORITHM_NOT_SET:
      break;
      case kAutotuneAlgorithm:
        _impl_.optional_autotune_algorithm_.autotune_algorithm_ = from._impl_.optional_autotune_algorithm_.autotune_algorithm_;
        break;
  }
  switch (optional_initial_parallelism_case()) {
    case OPTIONAL_INITIAL_PARALLELISM_NOT_SET:
      break;
      case kInitialParallelism:
        _impl_.optional_initial_parallelism_.initial_parallelism_ = from._impl_.optional_initial_parallelism_.initial_parallelism_;
        break;
  }

  // @@protoc_insertion_point(copy_constructor:tensorflow.data.AutotuneOptions)
}
inline PROTOBUF_NDEBUG_INLINE AutotuneOptions::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : optional_enabled_{},
        optional_cpu_budget_{},
        optional_ram_budget_{},
        optional_autotune_algorithm_{},
        optional_initial_parallelism_{},
        _cached_size_{0},
        _oneof_case_{} {}

inline void AutotuneOptions::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
AutotuneOptions::~AutotuneOptions() {
  // @@protoc_insertion_point(destructor:tensorflow.data.AutotuneOptions)
  SharedDtor(*this);
}
inline void AutotuneOptions::SharedDtor(MessageLite& self) {
  AutotuneOptions& this_ = static_cast<AutotuneOptions&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  if (this_.has_optional_enabled()) {
    this_.clear_optional_enabled();
  }
  if (this_.has_optional_cpu_budget()) {
    this_.clear_optional_cpu_budget();
  }
  if (this_.has_optional_ram_budget()) {
    this_.clear_optional_ram_budget();
  }
  if (this_.has_optional_autotune_algorithm()) {
    this_.clear_optional_autotune_algorithm();
  }
  if (this_.has_optional_initial_parallelism()) {
    this_.clear_optional_initial_parallelism();
  }
  this_._impl_.~Impl_();
}

void AutotuneOptions::clear_optional_enabled() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.data.AutotuneOptions)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  switch (optional_enabled_case()) {
    case kEnabled: {
      // No need to clear
      break;
    }
    case OPTIONAL_ENABLED_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = OPTIONAL_ENABLED_NOT_SET;
}

void AutotuneOptions::clear_optional_cpu_budget() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.data.AutotuneOptions)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  switch (optional_cpu_budget_case()) {
    case kCpuBudget: {
      // No need to clear
      break;
    }
    case OPTIONAL_CPU_BUDGET_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[1] = OPTIONAL_CPU_BUDGET_NOT_SET;
}

void AutotuneOptions::clear_optional_ram_budget() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.data.AutotuneOptions)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  switch (optional_ram_budget_case()) {
    case kRamBudget: {
      // No need to clear
      break;
    }
    case OPTIONAL_RAM_BUDGET_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[2] = OPTIONAL_RAM_BUDGET_NOT_SET;
}

void AutotuneOptions::clear_optional_autotune_algorithm() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.data.AutotuneOptions)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  switch (optional_autotune_algorithm_case()) {
    case kAutotuneAlgorithm: {
      // No need to clear
      break;
    }
    case OPTIONAL_AUTOTUNE_ALGORITHM_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[3] = OPTIONAL_AUTOTUNE_ALGORITHM_NOT_SET;
}

void AutotuneOptions::clear_optional_initial_parallelism() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.data.AutotuneOptions)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  switch (optional_initial_parallelism_case()) {
    case kInitialParallelism: {
      // No need to clear
      break;
    }
    case OPTIONAL_INITIAL_PARALLELISM_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[4] = OPTIONAL_INITIAL_PARALLELISM_NOT_SET;
}


inline void* AutotuneOptions::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) AutotuneOptions(arena);
}
constexpr auto AutotuneOptions::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(AutotuneOptions),
                                            alignof(AutotuneOptions));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull AutotuneOptions::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_AutotuneOptions_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &AutotuneOptions::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<AutotuneOptions>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &AutotuneOptions::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<AutotuneOptions>(), &AutotuneOptions::ByteSizeLong,
            &AutotuneOptions::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(AutotuneOptions, _impl_._cached_size_),
        false,
    },
    &AutotuneOptions::kDescriptorMethods,
    &descriptor_table_tensorflow_2fcore_2fframework_2fdataset_5foptions_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* AutotuneOptions::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 5, 0, 0, 2> AutotuneOptions::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    5, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tensorflow::data::AutotuneOptions>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // bool enabled = 1;
    {PROTOBUF_FIELD_OFFSET(AutotuneOptions, _impl_.optional_enabled_.enabled_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kBool)},
    // int32 cpu_budget = 2;
    {PROTOBUF_FIELD_OFFSET(AutotuneOptions, _impl_.optional_cpu_budget_.cpu_budget_), _Internal::kOneofCaseOffset + 4, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kInt32)},
    // int64 ram_budget = 3;
    {PROTOBUF_FIELD_OFFSET(AutotuneOptions, _impl_.optional_ram_budget_.ram_budget_), _Internal::kOneofCaseOffset + 8, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kInt64)},
    // .tensorflow.data.model.AutotuneAlgorithm autotune_algorithm = 4;
    {PROTOBUF_FIELD_OFFSET(AutotuneOptions, _impl_.optional_autotune_algorithm_.autotune_algorithm_), _Internal::kOneofCaseOffset + 12, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kOpenEnum)},
    // int64 initial_parallelism = 5;
    {PROTOBUF_FIELD_OFFSET(AutotuneOptions, _impl_.optional_initial_parallelism_.initial_parallelism_), _Internal::kOneofCaseOffset + 16, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kInt64)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void AutotuneOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.data.AutotuneOptions)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_optional_enabled();
  clear_optional_cpu_budget();
  clear_optional_ram_budget();
  clear_optional_autotune_algorithm();
  clear_optional_initial_parallelism();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* AutotuneOptions::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const AutotuneOptions& this_ = static_cast<const AutotuneOptions&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* AutotuneOptions::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const AutotuneOptions& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:tensorflow.data.AutotuneOptions)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // bool enabled = 1;
          if (this_.optional_enabled_case() == kEnabled) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                1, this_._internal_enabled(), target);
          }

          // int32 cpu_budget = 2;
          if (this_.optional_cpu_budget_case() == kCpuBudget) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<2>(
                    stream, this_._internal_cpu_budget(), target);
          }

          // int64 ram_budget = 3;
          if (this_.optional_ram_budget_case() == kRamBudget) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt64ToArrayWithField<3>(
                    stream, this_._internal_ram_budget(), target);
          }

          // .tensorflow.data.model.AutotuneAlgorithm autotune_algorithm = 4;
          if (this_.optional_autotune_algorithm_case() == kAutotuneAlgorithm) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                4, this_._internal_autotune_algorithm(), target);
          }

          // int64 initial_parallelism = 5;
          if (this_.optional_initial_parallelism_case() == kInitialParallelism) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt64ToArrayWithField<5>(
                    stream, this_._internal_initial_parallelism(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:tensorflow.data.AutotuneOptions)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t AutotuneOptions::ByteSizeLong(const MessageLite& base) {
          const AutotuneOptions& this_ = static_cast<const AutotuneOptions&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t AutotuneOptions::ByteSizeLong() const {
          const AutotuneOptions& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:tensorflow.data.AutotuneOptions)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          switch (this_.optional_enabled_case()) {
            // bool enabled = 1;
            case kEnabled: {
              total_size += 2;
              break;
            }
            case OPTIONAL_ENABLED_NOT_SET: {
              break;
            }
          }
          switch (this_.optional_cpu_budget_case()) {
            // int32 cpu_budget = 2;
            case kCpuBudget: {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_cpu_budget());
              break;
            }
            case OPTIONAL_CPU_BUDGET_NOT_SET: {
              break;
            }
          }
          switch (this_.optional_ram_budget_case()) {
            // int64 ram_budget = 3;
            case kRamBudget: {
              total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
                  this_._internal_ram_budget());
              break;
            }
            case OPTIONAL_RAM_BUDGET_NOT_SET: {
              break;
            }
          }
          switch (this_.optional_autotune_algorithm_case()) {
            // .tensorflow.data.model.AutotuneAlgorithm autotune_algorithm = 4;
            case kAutotuneAlgorithm: {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_autotune_algorithm());
              break;
            }
            case OPTIONAL_AUTOTUNE_ALGORITHM_NOT_SET: {
              break;
            }
          }
          switch (this_.optional_initial_parallelism_case()) {
            // int64 initial_parallelism = 5;
            case kInitialParallelism: {
              total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
                  this_._internal_initial_parallelism());
              break;
            }
            case OPTIONAL_INITIAL_PARALLELISM_NOT_SET: {
              break;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void AutotuneOptions::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<AutotuneOptions*>(&to_msg);
  auto& from = static_cast<const AutotuneOptions&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.data.AutotuneOptions)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[0]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[0];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_optional_enabled();
      }
      _this->_impl_._oneof_case_[0] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kEnabled: {
        _this->_impl_.optional_enabled_.enabled_ = from._impl_.optional_enabled_.enabled_;
        break;
      }
      case OPTIONAL_ENABLED_NOT_SET:
        break;
    }
  }
  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[1]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[1];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_optional_cpu_budget();
      }
      _this->_impl_._oneof_case_[1] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kCpuBudget: {
        _this->_impl_.optional_cpu_budget_.cpu_budget_ = from._impl_.optional_cpu_budget_.cpu_budget_;
        break;
      }
      case OPTIONAL_CPU_BUDGET_NOT_SET:
        break;
    }
  }
  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[2]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[2];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_optional_ram_budget();
      }
      _this->_impl_._oneof_case_[2] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kRamBudget: {
        _this->_impl_.optional_ram_budget_.ram_budget_ = from._impl_.optional_ram_budget_.ram_budget_;
        break;
      }
      case OPTIONAL_RAM_BUDGET_NOT_SET:
        break;
    }
  }
  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[3]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[3];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_optional_autotune_algorithm();
      }
      _this->_impl_._oneof_case_[3] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kAutotuneAlgorithm: {
        _this->_impl_.optional_autotune_algorithm_.autotune_algorithm_ = from._impl_.optional_autotune_algorithm_.autotune_algorithm_;
        break;
      }
      case OPTIONAL_AUTOTUNE_ALGORITHM_NOT_SET:
        break;
    }
  }
  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[4]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[4];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_optional_initial_parallelism();
      }
      _this->_impl_._oneof_case_[4] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kInitialParallelism: {
        _this->_impl_.optional_initial_parallelism_.initial_parallelism_ = from._impl_.optional_initial_parallelism_.initial_parallelism_;
        break;
      }
      case OPTIONAL_INITIAL_PARALLELISM_NOT_SET:
        break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AutotuneOptions::CopyFrom(const AutotuneOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.data.AutotuneOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void AutotuneOptions::InternalSwap(AutotuneOptions* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.optional_enabled_, other->_impl_.optional_enabled_);
  swap(_impl_.optional_cpu_budget_, other->_impl_.optional_cpu_budget_);
  swap(_impl_.optional_ram_budget_, other->_impl_.optional_ram_budget_);
  swap(_impl_.optional_autotune_algorithm_, other->_impl_.optional_autotune_algorithm_);
  swap(_impl_.optional_initial_parallelism_, other->_impl_.optional_initial_parallelism_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
  swap(_impl_._oneof_case_[1], other->_impl_._oneof_case_[1]);
  swap(_impl_._oneof_case_[2], other->_impl_._oneof_case_[2]);
  swap(_impl_._oneof_case_[3], other->_impl_._oneof_case_[3]);
  swap(_impl_._oneof_case_[4], other->_impl_._oneof_case_[4]);
}

::google::protobuf::Metadata AutotuneOptions::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class CardinalityOptions::_Internal {
 public:
};

CardinalityOptions::CardinalityOptions(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.data.CardinalityOptions)
}
CardinalityOptions::CardinalityOptions(
    ::google::protobuf::Arena* arena, const CardinalityOptions& from)
    : CardinalityOptions(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE CardinalityOptions::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void CardinalityOptions::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.compute_level_ = {};
}
CardinalityOptions::~CardinalityOptions() {
  // @@protoc_insertion_point(destructor:tensorflow.data.CardinalityOptions)
  SharedDtor(*this);
}
inline void CardinalityOptions::SharedDtor(MessageLite& self) {
  CardinalityOptions& this_ = static_cast<CardinalityOptions&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* CardinalityOptions::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) CardinalityOptions(arena);
}
constexpr auto CardinalityOptions::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(CardinalityOptions),
                                            alignof(CardinalityOptions));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull CardinalityOptions::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_CardinalityOptions_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &CardinalityOptions::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<CardinalityOptions>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &CardinalityOptions::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<CardinalityOptions>(), &CardinalityOptions::ByteSizeLong,
            &CardinalityOptions::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(CardinalityOptions, _impl_._cached_size_),
        false,
    },
    &CardinalityOptions::kDescriptorMethods,
    &descriptor_table_tensorflow_2fcore_2fframework_2fdataset_5foptions_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* CardinalityOptions::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> CardinalityOptions::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tensorflow::data::CardinalityOptions>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .tensorflow.data.CardinalityOptions.ComputeLevel compute_level = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CardinalityOptions, _impl_.compute_level_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(CardinalityOptions, _impl_.compute_level_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .tensorflow.data.CardinalityOptions.ComputeLevel compute_level = 1;
    {PROTOBUF_FIELD_OFFSET(CardinalityOptions, _impl_.compute_level_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void CardinalityOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.data.CardinalityOptions)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.compute_level_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* CardinalityOptions::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const CardinalityOptions& this_ = static_cast<const CardinalityOptions&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* CardinalityOptions::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const CardinalityOptions& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:tensorflow.data.CardinalityOptions)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // .tensorflow.data.CardinalityOptions.ComputeLevel compute_level = 1;
          if (this_._internal_compute_level() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                1, this_._internal_compute_level(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:tensorflow.data.CardinalityOptions)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t CardinalityOptions::ByteSizeLong(const MessageLite& base) {
          const CardinalityOptions& this_ = static_cast<const CardinalityOptions&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t CardinalityOptions::ByteSizeLong() const {
          const CardinalityOptions& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:tensorflow.data.CardinalityOptions)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // .tensorflow.data.CardinalityOptions.ComputeLevel compute_level = 1;
            if (this_._internal_compute_level() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_compute_level());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void CardinalityOptions::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CardinalityOptions*>(&to_msg);
  auto& from = static_cast<const CardinalityOptions&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.data.CardinalityOptions)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_compute_level() != 0) {
    _this->_impl_.compute_level_ = from._impl_.compute_level_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CardinalityOptions::CopyFrom(const CardinalityOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.data.CardinalityOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void CardinalityOptions::InternalSwap(CardinalityOptions* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.compute_level_, other->_impl_.compute_level_);
}

::google::protobuf::Metadata CardinalityOptions::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class DistributeOptions::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
      PROTOBUF_FIELD_OFFSET(::tensorflow::data::DistributeOptions, _impl_._oneof_case_);
};

DistributeOptions::DistributeOptions(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.data.DistributeOptions)
}
inline PROTOBUF_NDEBUG_INLINE DistributeOptions::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::tensorflow::data::DistributeOptions& from_msg)
      : optional_num_devices_{},
        _cached_size_{0},
        _oneof_case_{from._oneof_case_[0]} {}

DistributeOptions::DistributeOptions(
    ::google::protobuf::Arena* arena,
    const DistributeOptions& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  DistributeOptions* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.auto_shard_policy_ = from._impl_.auto_shard_policy_;
  switch (optional_num_devices_case()) {
    case OPTIONAL_NUM_DEVICES_NOT_SET:
      break;
      case kNumDevices:
        _impl_.optional_num_devices_.num_devices_ = from._impl_.optional_num_devices_.num_devices_;
        break;
  }

  // @@protoc_insertion_point(copy_constructor:tensorflow.data.DistributeOptions)
}
inline PROTOBUF_NDEBUG_INLINE DistributeOptions::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : optional_num_devices_{},
        _cached_size_{0},
        _oneof_case_{} {}

inline void DistributeOptions::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.auto_shard_policy_ = {};
}
DistributeOptions::~DistributeOptions() {
  // @@protoc_insertion_point(destructor:tensorflow.data.DistributeOptions)
  SharedDtor(*this);
}
inline void DistributeOptions::SharedDtor(MessageLite& self) {
  DistributeOptions& this_ = static_cast<DistributeOptions&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  if (this_.has_optional_num_devices()) {
    this_.clear_optional_num_devices();
  }
  this_._impl_.~Impl_();
}

void DistributeOptions::clear_optional_num_devices() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.data.DistributeOptions)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  switch (optional_num_devices_case()) {
    case kNumDevices: {
      // No need to clear
      break;
    }
    case OPTIONAL_NUM_DEVICES_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = OPTIONAL_NUM_DEVICES_NOT_SET;
}


inline void* DistributeOptions::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) DistributeOptions(arena);
}
constexpr auto DistributeOptions::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(DistributeOptions),
                                            alignof(DistributeOptions));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull DistributeOptions::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_DistributeOptions_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &DistributeOptions::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<DistributeOptions>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &DistributeOptions::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<DistributeOptions>(), &DistributeOptions::ByteSizeLong,
            &DistributeOptions::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(DistributeOptions, _impl_._cached_size_),
        false,
    },
    &DistributeOptions::kDescriptorMethods,
    &descriptor_table_tensorflow_2fcore_2fframework_2fdataset_5foptions_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* DistributeOptions::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 2, 0, 0, 2> DistributeOptions::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tensorflow::data::DistributeOptions>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .tensorflow.data.AutoShardPolicy auto_shard_policy = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(DistributeOptions, _impl_.auto_shard_policy_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(DistributeOptions, _impl_.auto_shard_policy_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .tensorflow.data.AutoShardPolicy auto_shard_policy = 1;
    {PROTOBUF_FIELD_OFFSET(DistributeOptions, _impl_.auto_shard_policy_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // int32 num_devices = 2;
    {PROTOBUF_FIELD_OFFSET(DistributeOptions, _impl_.optional_num_devices_.num_devices_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void DistributeOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.data.DistributeOptions)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.auto_shard_policy_ = 0;
  clear_optional_num_devices();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* DistributeOptions::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const DistributeOptions& this_ = static_cast<const DistributeOptions&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* DistributeOptions::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const DistributeOptions& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:tensorflow.data.DistributeOptions)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // .tensorflow.data.AutoShardPolicy auto_shard_policy = 1;
          if (this_._internal_auto_shard_policy() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                1, this_._internal_auto_shard_policy(), target);
          }

          // int32 num_devices = 2;
          if (this_.optional_num_devices_case() == kNumDevices) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<2>(
                    stream, this_._internal_num_devices(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:tensorflow.data.DistributeOptions)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t DistributeOptions::ByteSizeLong(const MessageLite& base) {
          const DistributeOptions& this_ = static_cast<const DistributeOptions&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t DistributeOptions::ByteSizeLong() const {
          const DistributeOptions& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:tensorflow.data.DistributeOptions)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // .tensorflow.data.AutoShardPolicy auto_shard_policy = 1;
            if (this_._internal_auto_shard_policy() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_auto_shard_policy());
            }
          }
          switch (this_.optional_num_devices_case()) {
            // int32 num_devices = 2;
            case kNumDevices: {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_num_devices());
              break;
            }
            case OPTIONAL_NUM_DEVICES_NOT_SET: {
              break;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void DistributeOptions::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<DistributeOptions*>(&to_msg);
  auto& from = static_cast<const DistributeOptions&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.data.DistributeOptions)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_auto_shard_policy() != 0) {
    _this->_impl_.auto_shard_policy_ = from._impl_.auto_shard_policy_;
  }
  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[0]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[0];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_optional_num_devices();
      }
      _this->_impl_._oneof_case_[0] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kNumDevices: {
        _this->_impl_.optional_num_devices_.num_devices_ = from._impl_.optional_num_devices_.num_devices_;
        break;
      }
      case OPTIONAL_NUM_DEVICES_NOT_SET:
        break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void DistributeOptions::CopyFrom(const DistributeOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.data.DistributeOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void DistributeOptions::InternalSwap(DistributeOptions* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.auto_shard_policy_, other->_impl_.auto_shard_policy_);
  swap(_impl_.optional_num_devices_, other->_impl_.optional_num_devices_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata DistributeOptions::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class OptimizationOptions::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
      PROTOBUF_FIELD_OFFSET(::tensorflow::data::OptimizationOptions, _impl_._oneof_case_);
};

OptimizationOptions::OptimizationOptions(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.data.OptimizationOptions)
}
inline PROTOBUF_NDEBUG_INLINE OptimizationOptions::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::tensorflow::data::OptimizationOptions& from_msg)
      : optional_apply_default_optimizations_{},
        optional_filter_fusion_{},
        optional_map_and_batch_fusion_{},
        optional_map_and_filter_fusion_{},
        optional_map_fusion_{},
        optional_map_parallelization_{},
        optional_noop_elimination_{},
        optional_parallel_batch_{},
        optional_shuffle_and_repeat_fusion_{},
        optional_filter_parallelization_{},
        optional_inject_prefetch_{},
        optional_seq_interleave_prefetch_{},
        _cached_size_{0},
        _oneof_case_{from._oneof_case_[0], from._oneof_case_[1], from._oneof_case_[2], from._oneof_case_[3], from._oneof_case_[4], from._oneof_case_[5], from._oneof_case_[6], from._oneof_case_[7], from._oneof_case_[8], from._oneof_case_[9], from._oneof_case_[10], from._oneof_case_[11]} {}

OptimizationOptions::OptimizationOptions(
    ::google::protobuf::Arena* arena,
    const OptimizationOptions& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  OptimizationOptions* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  switch (optional_apply_default_optimizations_case()) {
    case OPTIONAL_APPLY_DEFAULT_OPTIMIZATIONS_NOT_SET:
      break;
      case kApplyDefaultOptimizations:
        _impl_.optional_apply_default_optimizations_.apply_default_optimizations_ = from._impl_.optional_apply_default_optimizations_.apply_default_optimizations_;
        break;
  }
  switch (optional_filter_fusion_case()) {
    case OPTIONAL_FILTER_FUSION_NOT_SET:
      break;
      case kFilterFusion:
        _impl_.optional_filter_fusion_.filter_fusion_ = from._impl_.optional_filter_fusion_.filter_fusion_;
        break;
  }
  switch (optional_map_and_batch_fusion_case()) {
    case OPTIONAL_MAP_AND_BATCH_FUSION_NOT_SET:
      break;
      case kMapAndBatchFusion:
        _impl_.optional_map_and_batch_fusion_.map_and_batch_fusion_ = from._impl_.optional_map_and_batch_fusion_.map_and_batch_fusion_;
        break;
  }
  switch (optional_map_and_filter_fusion_case()) {
    case OPTIONAL_MAP_AND_FILTER_FUSION_NOT_SET:
      break;
      case kMapAndFilterFusion:
        _impl_.optional_map_and_filter_fusion_.map_and_filter_fusion_ = from._impl_.optional_map_and_filter_fusion_.map_and_filter_fusion_;
        break;
  }
  switch (optional_map_fusion_case()) {
    case OPTIONAL_MAP_FUSION_NOT_SET:
      break;
      case kMapFusion:
        _impl_.optional_map_fusion_.map_fusion_ = from._impl_.optional_map_fusion_.map_fusion_;
        break;
  }
  switch (optional_map_parallelization_case()) {
    case OPTIONAL_MAP_PARALLELIZATION_NOT_SET:
      break;
      case kMapParallelization:
        _impl_.optional_map_parallelization_.map_parallelization_ = from._impl_.optional_map_parallelization_.map_parallelization_;
        break;
  }
  switch (optional_noop_elimination_case()) {
    case OPTIONAL_NOOP_ELIMINATION_NOT_SET:
      break;
      case kNoopElimination:
        _impl_.optional_noop_elimination_.noop_elimination_ = from._impl_.optional_noop_elimination_.noop_elimination_;
        break;
  }
  switch (optional_parallel_batch_case()) {
    case OPTIONAL_PARALLEL_BATCH_NOT_SET:
      break;
      case kParallelBatch:
        _impl_.optional_parallel_batch_.parallel_batch_ = from._impl_.optional_parallel_batch_.parallel_batch_;
        break;
  }
  switch (optional_shuffle_and_repeat_fusion_case()) {
    case OPTIONAL_SHUFFLE_AND_REPEAT_FUSION_NOT_SET:
      break;
      case kShuffleAndRepeatFusion:
        _impl_.optional_shuffle_and_repeat_fusion_.shuffle_and_repeat_fusion_ = from._impl_.optional_shuffle_and_repeat_fusion_.shuffle_and_repeat_fusion_;
        break;
  }
  switch (optional_filter_parallelization_case()) {
    case OPTIONAL_FILTER_PARALLELIZATION_NOT_SET:
      break;
      case kFilterParallelization:
        _impl_.optional_filter_parallelization_.filter_parallelization_ = from._impl_.optional_filter_parallelization_.filter_parallelization_;
        break;
  }
  switch (optional_inject_prefetch_case()) {
    case OPTIONAL_INJECT_PREFETCH_NOT_SET:
      break;
      case kInjectPrefetch:
        _impl_.optional_inject_prefetch_.inject_prefetch_ = from._impl_.optional_inject_prefetch_.inject_prefetch_;
        break;
  }
  switch (optional_seq_interleave_prefetch_case()) {
    case OPTIONAL_SEQ_INTERLEAVE_PREFETCH_NOT_SET:
      break;
      case kSeqInterleavePrefetch:
        _impl_.optional_seq_interleave_prefetch_.seq_interleave_prefetch_ = from._impl_.optional_seq_interleave_prefetch_.seq_interleave_prefetch_;
        break;
  }

  // @@protoc_insertion_point(copy_constructor:tensorflow.data.OptimizationOptions)
}
inline PROTOBUF_NDEBUG_INLINE OptimizationOptions::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : optional_apply_default_optimizations_{},
        optional_filter_fusion_{},
        optional_map_and_batch_fusion_{},
        optional_map_and_filter_fusion_{},
        optional_map_fusion_{},
        optional_map_parallelization_{},
        optional_noop_elimination_{},
        optional_parallel_batch_{},
        optional_shuffle_and_repeat_fusion_{},
        optional_filter_parallelization_{},
        optional_inject_prefetch_{},
        optional_seq_interleave_prefetch_{},
        _cached_size_{0},
        _oneof_case_{} {}

inline void OptimizationOptions::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
OptimizationOptions::~OptimizationOptions() {
  // @@protoc_insertion_point(destructor:tensorflow.data.OptimizationOptions)
  SharedDtor(*this);
}
inline void OptimizationOptions::SharedDtor(MessageLite& self) {
  OptimizationOptions& this_ = static_cast<OptimizationOptions&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  if (this_.has_optional_apply_default_optimizations()) {
    this_.clear_optional_apply_default_optimizations();
  }
  if (this_.has_optional_filter_fusion()) {
    this_.clear_optional_filter_fusion();
  }
  if (this_.has_optional_map_and_batch_fusion()) {
    this_.clear_optional_map_and_batch_fusion();
  }
  if (this_.has_optional_map_and_filter_fusion()) {
    this_.clear_optional_map_and_filter_fusion();
  }
  if (this_.has_optional_map_fusion()) {
    this_.clear_optional_map_fusion();
  }
  if (this_.has_optional_map_parallelization()) {
    this_.clear_optional_map_parallelization();
  }
  if (this_.has_optional_noop_elimination()) {
    this_.clear_optional_noop_elimination();
  }
  if (this_.has_optional_parallel_batch()) {
    this_.clear_optional_parallel_batch();
  }
  if (this_.has_optional_shuffle_and_repeat_fusion()) {
    this_.clear_optional_shuffle_and_repeat_fusion();
  }
  if (this_.has_optional_filter_parallelization()) {
    this_.clear_optional_filter_parallelization();
  }
  if (this_.has_optional_inject_prefetch()) {
    this_.clear_optional_inject_prefetch();
  }
  if (this_.has_optional_seq_interleave_prefetch()) {
    this_.clear_optional_seq_interleave_prefetch();
  }
  this_._impl_.~Impl_();
}

void OptimizationOptions::clear_optional_apply_default_optimizations() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.data.OptimizationOptions)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  switch (optional_apply_default_optimizations_case()) {
    case kApplyDefaultOptimizations: {
      // No need to clear
      break;
    }
    case OPTIONAL_APPLY_DEFAULT_OPTIMIZATIONS_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = OPTIONAL_APPLY_DEFAULT_OPTIMIZATIONS_NOT_SET;
}

void OptimizationOptions::clear_optional_filter_fusion() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.data.OptimizationOptions)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  switch (optional_filter_fusion_case()) {
    case kFilterFusion: {
      // No need to clear
      break;
    }
    case OPTIONAL_FILTER_FUSION_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[1] = OPTIONAL_FILTER_FUSION_NOT_SET;
}

void OptimizationOptions::clear_optional_map_and_batch_fusion() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.data.OptimizationOptions)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  switch (optional_map_and_batch_fusion_case()) {
    case kMapAndBatchFusion: {
      // No need to clear
      break;
    }
    case OPTIONAL_MAP_AND_BATCH_FUSION_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[2] = OPTIONAL_MAP_AND_BATCH_FUSION_NOT_SET;
}

void OptimizationOptions::clear_optional_map_and_filter_fusion() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.data.OptimizationOptions)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  switch (optional_map_and_filter_fusion_case()) {
    case kMapAndFilterFusion: {
      // No need to clear
      break;
    }
    case OPTIONAL_MAP_AND_FILTER_FUSION_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[3] = OPTIONAL_MAP_AND_FILTER_FUSION_NOT_SET;
}

void OptimizationOptions::clear_optional_map_fusion() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.data.OptimizationOptions)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  switch (optional_map_fusion_case()) {
    case kMapFusion: {
      // No need to clear
      break;
    }
    case OPTIONAL_MAP_FUSION_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[4] = OPTIONAL_MAP_FUSION_NOT_SET;
}

void OptimizationOptions::clear_optional_map_parallelization() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.data.OptimizationOptions)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  switch (optional_map_parallelization_case()) {
    case kMapParallelization: {
      // No need to clear
      break;
    }
    case OPTIONAL_MAP_PARALLELIZATION_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[5] = OPTIONAL_MAP_PARALLELIZATION_NOT_SET;
}

void OptimizationOptions::clear_optional_noop_elimination() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.data.OptimizationOptions)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  switch (optional_noop_elimination_case()) {
    case kNoopElimination: {
      // No need to clear
      break;
    }
    case OPTIONAL_NOOP_ELIMINATION_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[6] = OPTIONAL_NOOP_ELIMINATION_NOT_SET;
}

void OptimizationOptions::clear_optional_parallel_batch() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.data.OptimizationOptions)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  switch (optional_parallel_batch_case()) {
    case kParallelBatch: {
      // No need to clear
      break;
    }
    case OPTIONAL_PARALLEL_BATCH_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[7] = OPTIONAL_PARALLEL_BATCH_NOT_SET;
}

void OptimizationOptions::clear_optional_shuffle_and_repeat_fusion() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.data.OptimizationOptions)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  switch (optional_shuffle_and_repeat_fusion_case()) {
    case kShuffleAndRepeatFusion: {
      // No need to clear
      break;
    }
    case OPTIONAL_SHUFFLE_AND_REPEAT_FUSION_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[8] = OPTIONAL_SHUFFLE_AND_REPEAT_FUSION_NOT_SET;
}

void OptimizationOptions::clear_optional_filter_parallelization() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.data.OptimizationOptions)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  switch (optional_filter_parallelization_case()) {
    case kFilterParallelization: {
      // No need to clear
      break;
    }
    case OPTIONAL_FILTER_PARALLELIZATION_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[9] = OPTIONAL_FILTER_PARALLELIZATION_NOT_SET;
}

void OptimizationOptions::clear_optional_inject_prefetch() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.data.OptimizationOptions)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  switch (optional_inject_prefetch_case()) {
    case kInjectPrefetch: {
      // No need to clear
      break;
    }
    case OPTIONAL_INJECT_PREFETCH_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[10] = OPTIONAL_INJECT_PREFETCH_NOT_SET;
}

void OptimizationOptions::clear_optional_seq_interleave_prefetch() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.data.OptimizationOptions)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  switch (optional_seq_interleave_prefetch_case()) {
    case kSeqInterleavePrefetch: {
      // No need to clear
      break;
    }
    case OPTIONAL_SEQ_INTERLEAVE_PREFETCH_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[11] = OPTIONAL_SEQ_INTERLEAVE_PREFETCH_NOT_SET;
}


inline void* OptimizationOptions::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) OptimizationOptions(arena);
}
constexpr auto OptimizationOptions::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(OptimizationOptions),
                                            alignof(OptimizationOptions));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull OptimizationOptions::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_OptimizationOptions_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &OptimizationOptions::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<OptimizationOptions>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &OptimizationOptions::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<OptimizationOptions>(), &OptimizationOptions::ByteSizeLong,
            &OptimizationOptions::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(OptimizationOptions, _impl_._cached_size_),
        false,
    },
    &OptimizationOptions::kDescriptorMethods,
    &descriptor_table_tensorflow_2fcore_2fframework_2fdataset_5foptions_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* OptimizationOptions::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 12, 0, 0, 2> OptimizationOptions::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    21, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4293431518,  // skipmap
    offsetof(decltype(_table_), field_entries),
    12,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tensorflow::data::OptimizationOptions>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // bool apply_default_optimizations = 1;
    {PROTOBUF_FIELD_OFFSET(OptimizationOptions, _impl_.optional_apply_default_optimizations_.apply_default_optimizations_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kBool)},
    // bool filter_fusion = 6;
    {PROTOBUF_FIELD_OFFSET(OptimizationOptions, _impl_.optional_filter_fusion_.filter_fusion_), _Internal::kOneofCaseOffset + 4, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kBool)},
    // bool map_and_batch_fusion = 9;
    {PROTOBUF_FIELD_OFFSET(OptimizationOptions, _impl_.optional_map_and_batch_fusion_.map_and_batch_fusion_), _Internal::kOneofCaseOffset + 8, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kBool)},
    // bool map_and_filter_fusion = 10;
    {PROTOBUF_FIELD_OFFSET(OptimizationOptions, _impl_.optional_map_and_filter_fusion_.map_and_filter_fusion_), _Internal::kOneofCaseOffset + 12, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kBool)},
    // bool map_fusion = 11;
    {PROTOBUF_FIELD_OFFSET(OptimizationOptions, _impl_.optional_map_fusion_.map_fusion_), _Internal::kOneofCaseOffset + 16, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kBool)},
    // bool map_parallelization = 12;
    {PROTOBUF_FIELD_OFFSET(OptimizationOptions, _impl_.optional_map_parallelization_.map_parallelization_), _Internal::kOneofCaseOffset + 20, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kBool)},
    // bool noop_elimination = 14;
    {PROTOBUF_FIELD_OFFSET(OptimizationOptions, _impl_.optional_noop_elimination_.noop_elimination_), _Internal::kOneofCaseOffset + 24, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kBool)},
    // bool parallel_batch = 15;
    {PROTOBUF_FIELD_OFFSET(OptimizationOptions, _impl_.optional_parallel_batch_.parallel_batch_), _Internal::kOneofCaseOffset + 28, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kBool)},
    // bool shuffle_and_repeat_fusion = 17;
    {PROTOBUF_FIELD_OFFSET(OptimizationOptions, _impl_.optional_shuffle_and_repeat_fusion_.shuffle_and_repeat_fusion_), _Internal::kOneofCaseOffset + 32, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kBool)},
    // bool filter_parallelization = 18;
    {PROTOBUF_FIELD_OFFSET(OptimizationOptions, _impl_.optional_filter_parallelization_.filter_parallelization_), _Internal::kOneofCaseOffset + 36, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kBool)},
    // bool inject_prefetch = 19;
    {PROTOBUF_FIELD_OFFSET(OptimizationOptions, _impl_.optional_inject_prefetch_.inject_prefetch_), _Internal::kOneofCaseOffset + 40, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kBool)},
    // bool seq_interleave_prefetch = 21;
    {PROTOBUF_FIELD_OFFSET(OptimizationOptions, _impl_.optional_seq_interleave_prefetch_.seq_interleave_prefetch_), _Internal::kOneofCaseOffset + 44, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void OptimizationOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.data.OptimizationOptions)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_optional_apply_default_optimizations();
  clear_optional_filter_fusion();
  clear_optional_map_and_batch_fusion();
  clear_optional_map_and_filter_fusion();
  clear_optional_map_fusion();
  clear_optional_map_parallelization();
  clear_optional_noop_elimination();
  clear_optional_parallel_batch();
  clear_optional_shuffle_and_repeat_fusion();
  clear_optional_filter_parallelization();
  clear_optional_inject_prefetch();
  clear_optional_seq_interleave_prefetch();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* OptimizationOptions::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const OptimizationOptions& this_ = static_cast<const OptimizationOptions&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* OptimizationOptions::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const OptimizationOptions& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:tensorflow.data.OptimizationOptions)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // bool apply_default_optimizations = 1;
          if (this_.optional_apply_default_optimizations_case() == kApplyDefaultOptimizations) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                1, this_._internal_apply_default_optimizations(), target);
          }

          // bool filter_fusion = 6;
          if (this_.optional_filter_fusion_case() == kFilterFusion) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                6, this_._internal_filter_fusion(), target);
          }

          // bool map_and_batch_fusion = 9;
          if (this_.optional_map_and_batch_fusion_case() == kMapAndBatchFusion) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                9, this_._internal_map_and_batch_fusion(), target);
          }

          // bool map_and_filter_fusion = 10;
          if (this_.optional_map_and_filter_fusion_case() == kMapAndFilterFusion) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                10, this_._internal_map_and_filter_fusion(), target);
          }

          // bool map_fusion = 11;
          if (this_.optional_map_fusion_case() == kMapFusion) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                11, this_._internal_map_fusion(), target);
          }

          // bool map_parallelization = 12;
          if (this_.optional_map_parallelization_case() == kMapParallelization) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                12, this_._internal_map_parallelization(), target);
          }

          // bool noop_elimination = 14;
          if (this_.optional_noop_elimination_case() == kNoopElimination) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                14, this_._internal_noop_elimination(), target);
          }

          // bool parallel_batch = 15;
          if (this_.optional_parallel_batch_case() == kParallelBatch) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                15, this_._internal_parallel_batch(), target);
          }

          // bool shuffle_and_repeat_fusion = 17;
          if (this_.optional_shuffle_and_repeat_fusion_case() == kShuffleAndRepeatFusion) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                17, this_._internal_shuffle_and_repeat_fusion(), target);
          }

          // bool filter_parallelization = 18;
          if (this_.optional_filter_parallelization_case() == kFilterParallelization) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                18, this_._internal_filter_parallelization(), target);
          }

          // bool inject_prefetch = 19;
          if (this_.optional_inject_prefetch_case() == kInjectPrefetch) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                19, this_._internal_inject_prefetch(), target);
          }

          // bool seq_interleave_prefetch = 21;
          if (this_.optional_seq_interleave_prefetch_case() == kSeqInterleavePrefetch) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                21, this_._internal_seq_interleave_prefetch(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:tensorflow.data.OptimizationOptions)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t OptimizationOptions::ByteSizeLong(const MessageLite& base) {
          const OptimizationOptions& this_ = static_cast<const OptimizationOptions&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t OptimizationOptions::ByteSizeLong() const {
          const OptimizationOptions& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:tensorflow.data.OptimizationOptions)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          switch (this_.optional_apply_default_optimizations_case()) {
            // bool apply_default_optimizations = 1;
            case kApplyDefaultOptimizations: {
              total_size += 2;
              break;
            }
            case OPTIONAL_APPLY_DEFAULT_OPTIMIZATIONS_NOT_SET: {
              break;
            }
          }
          switch (this_.optional_filter_fusion_case()) {
            // bool filter_fusion = 6;
            case kFilterFusion: {
              total_size += 2;
              break;
            }
            case OPTIONAL_FILTER_FUSION_NOT_SET: {
              break;
            }
          }
          switch (this_.optional_map_and_batch_fusion_case()) {
            // bool map_and_batch_fusion = 9;
            case kMapAndBatchFusion: {
              total_size += 2;
              break;
            }
            case OPTIONAL_MAP_AND_BATCH_FUSION_NOT_SET: {
              break;
            }
          }
          switch (this_.optional_map_and_filter_fusion_case()) {
            // bool map_and_filter_fusion = 10;
            case kMapAndFilterFusion: {
              total_size += 2;
              break;
            }
            case OPTIONAL_MAP_AND_FILTER_FUSION_NOT_SET: {
              break;
            }
          }
          switch (this_.optional_map_fusion_case()) {
            // bool map_fusion = 11;
            case kMapFusion: {
              total_size += 2;
              break;
            }
            case OPTIONAL_MAP_FUSION_NOT_SET: {
              break;
            }
          }
          switch (this_.optional_map_parallelization_case()) {
            // bool map_parallelization = 12;
            case kMapParallelization: {
              total_size += 2;
              break;
            }
            case OPTIONAL_MAP_PARALLELIZATION_NOT_SET: {
              break;
            }
          }
          switch (this_.optional_noop_elimination_case()) {
            // bool noop_elimination = 14;
            case kNoopElimination: {
              total_size += 2;
              break;
            }
            case OPTIONAL_NOOP_ELIMINATION_NOT_SET: {
              break;
            }
          }
          switch (this_.optional_parallel_batch_case()) {
            // bool parallel_batch = 15;
            case kParallelBatch: {
              total_size += 2;
              break;
            }
            case OPTIONAL_PARALLEL_BATCH_NOT_SET: {
              break;
            }
          }
          switch (this_.optional_shuffle_and_repeat_fusion_case()) {
            // bool shuffle_and_repeat_fusion = 17;
            case kShuffleAndRepeatFusion: {
              total_size += 3;
              break;
            }
            case OPTIONAL_SHUFFLE_AND_REPEAT_FUSION_NOT_SET: {
              break;
            }
          }
          switch (this_.optional_filter_parallelization_case()) {
            // bool filter_parallelization = 18;
            case kFilterParallelization: {
              total_size += 3;
              break;
            }
            case OPTIONAL_FILTER_PARALLELIZATION_NOT_SET: {
              break;
            }
          }
          switch (this_.optional_inject_prefetch_case()) {
            // bool inject_prefetch = 19;
            case kInjectPrefetch: {
              total_size += 3;
              break;
            }
            case OPTIONAL_INJECT_PREFETCH_NOT_SET: {
              break;
            }
          }
          switch (this_.optional_seq_interleave_prefetch_case()) {
            // bool seq_interleave_prefetch = 21;
            case kSeqInterleavePrefetch: {
              total_size += 3;
              break;
            }
            case OPTIONAL_SEQ_INTERLEAVE_PREFETCH_NOT_SET: {
              break;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void OptimizationOptions::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<OptimizationOptions*>(&to_msg);
  auto& from = static_cast<const OptimizationOptions&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.data.OptimizationOptions)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[0]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[0];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_optional_apply_default_optimizations();
      }
      _this->_impl_._oneof_case_[0] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kApplyDefaultOptimizations: {
        _this->_impl_.optional_apply_default_optimizations_.apply_default_optimizations_ = from._impl_.optional_apply_default_optimizations_.apply_default_optimizations_;
        break;
      }
      case OPTIONAL_APPLY_DEFAULT_OPTIMIZATIONS_NOT_SET:
        break;
    }
  }
  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[1]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[1];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_optional_filter_fusion();
      }
      _this->_impl_._oneof_case_[1] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kFilterFusion: {
        _this->_impl_.optional_filter_fusion_.filter_fusion_ = from._impl_.optional_filter_fusion_.filter_fusion_;
        break;
      }
      case OPTIONAL_FILTER_FUSION_NOT_SET:
        break;
    }
  }
  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[2]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[2];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_optional_map_and_batch_fusion();
      }
      _this->_impl_._oneof_case_[2] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kMapAndBatchFusion: {
        _this->_impl_.optional_map_and_batch_fusion_.map_and_batch_fusion_ = from._impl_.optional_map_and_batch_fusion_.map_and_batch_fusion_;
        break;
      }
      case OPTIONAL_MAP_AND_BATCH_FUSION_NOT_SET:
        break;
    }
  }
  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[3]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[3];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_optional_map_and_filter_fusion();
      }
      _this->_impl_._oneof_case_[3] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kMapAndFilterFusion: {
        _this->_impl_.optional_map_and_filter_fusion_.map_and_filter_fusion_ = from._impl_.optional_map_and_filter_fusion_.map_and_filter_fusion_;
        break;
      }
      case OPTIONAL_MAP_AND_FILTER_FUSION_NOT_SET:
        break;
    }
  }
  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[4]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[4];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_optional_map_fusion();
      }
      _this->_impl_._oneof_case_[4] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kMapFusion: {
        _this->_impl_.optional_map_fusion_.map_fusion_ = from._impl_.optional_map_fusion_.map_fusion_;
        break;
      }
      case OPTIONAL_MAP_FUSION_NOT_SET:
        break;
    }
  }
  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[5]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[5];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_optional_map_parallelization();
      }
      _this->_impl_._oneof_case_[5] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kMapParallelization: {
        _this->_impl_.optional_map_parallelization_.map_parallelization_ = from._impl_.optional_map_parallelization_.map_parallelization_;
        break;
      }
      case OPTIONAL_MAP_PARALLELIZATION_NOT_SET:
        break;
    }
  }
  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[6]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[6];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_optional_noop_elimination();
      }
      _this->_impl_._oneof_case_[6] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kNoopElimination: {
        _this->_impl_.optional_noop_elimination_.noop_elimination_ = from._impl_.optional_noop_elimination_.noop_elimination_;
        break;
      }
      case OPTIONAL_NOOP_ELIMINATION_NOT_SET:
        break;
    }
  }
  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[7]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[7];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_optional_parallel_batch();
      }
      _this->_impl_._oneof_case_[7] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kParallelBatch: {
        _this->_impl_.optional_parallel_batch_.parallel_batch_ = from._impl_.optional_parallel_batch_.parallel_batch_;
        break;
      }
      case OPTIONAL_PARALLEL_BATCH_NOT_SET:
        break;
    }
  }
  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[8]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[8];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_optional_shuffle_and_repeat_fusion();
      }
      _this->_impl_._oneof_case_[8] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kShuffleAndRepeatFusion: {
        _this->_impl_.optional_shuffle_and_repeat_fusion_.shuffle_and_repeat_fusion_ = from._impl_.optional_shuffle_and_repeat_fusion_.shuffle_and_repeat_fusion_;
        break;
      }
      case OPTIONAL_SHUFFLE_AND_REPEAT_FUSION_NOT_SET:
        break;
    }
  }
  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[9]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[9];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_optional_filter_parallelization();
      }
      _this->_impl_._oneof_case_[9] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kFilterParallelization: {
        _this->_impl_.optional_filter_parallelization_.filter_parallelization_ = from._impl_.optional_filter_parallelization_.filter_parallelization_;
        break;
      }
      case OPTIONAL_FILTER_PARALLELIZATION_NOT_SET:
        break;
    }
  }
  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[10]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[10];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_optional_inject_prefetch();
      }
      _this->_impl_._oneof_case_[10] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kInjectPrefetch: {
        _this->_impl_.optional_inject_prefetch_.inject_prefetch_ = from._impl_.optional_inject_prefetch_.inject_prefetch_;
        break;
      }
      case OPTIONAL_INJECT_PREFETCH_NOT_SET:
        break;
    }
  }
  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[11]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[11];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_optional_seq_interleave_prefetch();
      }
      _this->_impl_._oneof_case_[11] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kSeqInterleavePrefetch: {
        _this->_impl_.optional_seq_interleave_prefetch_.seq_interleave_prefetch_ = from._impl_.optional_seq_interleave_prefetch_.seq_interleave_prefetch_;
        break;
      }
      case OPTIONAL_SEQ_INTERLEAVE_PREFETCH_NOT_SET:
        break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void OptimizationOptions::CopyFrom(const OptimizationOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.data.OptimizationOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void OptimizationOptions::InternalSwap(OptimizationOptions* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.optional_apply_default_optimizations_, other->_impl_.optional_apply_default_optimizations_);
  swap(_impl_.optional_filter_fusion_, other->_impl_.optional_filter_fusion_);
  swap(_impl_.optional_map_and_batch_fusion_, other->_impl_.optional_map_and_batch_fusion_);
  swap(_impl_.optional_map_and_filter_fusion_, other->_impl_.optional_map_and_filter_fusion_);
  swap(_impl_.optional_map_fusion_, other->_impl_.optional_map_fusion_);
  swap(_impl_.optional_map_parallelization_, other->_impl_.optional_map_parallelization_);
  swap(_impl_.optional_noop_elimination_, other->_impl_.optional_noop_elimination_);
  swap(_impl_.optional_parallel_batch_, other->_impl_.optional_parallel_batch_);
  swap(_impl_.optional_shuffle_and_repeat_fusion_, other->_impl_.optional_shuffle_and_repeat_fusion_);
  swap(_impl_.optional_filter_parallelization_, other->_impl_.optional_filter_parallelization_);
  swap(_impl_.optional_inject_prefetch_, other->_impl_.optional_inject_prefetch_);
  swap(_impl_.optional_seq_interleave_prefetch_, other->_impl_.optional_seq_interleave_prefetch_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
  swap(_impl_._oneof_case_[1], other->_impl_._oneof_case_[1]);
  swap(_impl_._oneof_case_[2], other->_impl_._oneof_case_[2]);
  swap(_impl_._oneof_case_[3], other->_impl_._oneof_case_[3]);
  swap(_impl_._oneof_case_[4], other->_impl_._oneof_case_[4]);
  swap(_impl_._oneof_case_[5], other->_impl_._oneof_case_[5]);
  swap(_impl_._oneof_case_[6], other->_impl_._oneof_case_[6]);
  swap(_impl_._oneof_case_[7], other->_impl_._oneof_case_[7]);
  swap(_impl_._oneof_case_[8], other->_impl_._oneof_case_[8]);
  swap(_impl_._oneof_case_[9], other->_impl_._oneof_case_[9]);
  swap(_impl_._oneof_case_[10], other->_impl_._oneof_case_[10]);
  swap(_impl_._oneof_case_[11], other->_impl_._oneof_case_[11]);
}

::google::protobuf::Metadata OptimizationOptions::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ServiceOptions::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
      PROTOBUF_FIELD_OFFSET(::tensorflow::data::ServiceOptions, _impl_._oneof_case_);
};

ServiceOptions::ServiceOptions(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.data.ServiceOptions)
}
inline PROTOBUF_NDEBUG_INLINE ServiceOptions::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::tensorflow::data::ServiceOptions& from_msg)
      : optional_pinned_{},
        _cached_size_{0},
        _oneof_case_{from._oneof_case_[0]} {}

ServiceOptions::ServiceOptions(
    ::google::protobuf::Arena* arena,
    const ServiceOptions& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ServiceOptions* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  switch (optional_pinned_case()) {
    case OPTIONAL_PINNED_NOT_SET:
      break;
      case kPinned:
        _impl_.optional_pinned_.pinned_ = from._impl_.optional_pinned_.pinned_;
        break;
  }

  // @@protoc_insertion_point(copy_constructor:tensorflow.data.ServiceOptions)
}
inline PROTOBUF_NDEBUG_INLINE ServiceOptions::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : optional_pinned_{},
        _cached_size_{0},
        _oneof_case_{} {}

inline void ServiceOptions::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
ServiceOptions::~ServiceOptions() {
  // @@protoc_insertion_point(destructor:tensorflow.data.ServiceOptions)
  SharedDtor(*this);
}
inline void ServiceOptions::SharedDtor(MessageLite& self) {
  ServiceOptions& this_ = static_cast<ServiceOptions&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  if (this_.has_optional_pinned()) {
    this_.clear_optional_pinned();
  }
  this_._impl_.~Impl_();
}

void ServiceOptions::clear_optional_pinned() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.data.ServiceOptions)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  switch (optional_pinned_case()) {
    case kPinned: {
      // No need to clear
      break;
    }
    case OPTIONAL_PINNED_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = OPTIONAL_PINNED_NOT_SET;
}


inline void* ServiceOptions::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) ServiceOptions(arena);
}
constexpr auto ServiceOptions::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(ServiceOptions),
                                            alignof(ServiceOptions));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull ServiceOptions::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_ServiceOptions_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &ServiceOptions::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<ServiceOptions>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &ServiceOptions::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<ServiceOptions>(), &ServiceOptions::ByteSizeLong,
            &ServiceOptions::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(ServiceOptions, _impl_._cached_size_),
        false,
    },
    &ServiceOptions::kDescriptorMethods,
    &descriptor_table_tensorflow_2fcore_2fframework_2fdataset_5foptions_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* ServiceOptions::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> ServiceOptions::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tensorflow::data::ServiceOptions>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // bool pinned = 1;
    {PROTOBUF_FIELD_OFFSET(ServiceOptions, _impl_.optional_pinned_.pinned_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void ServiceOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.data.ServiceOptions)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_optional_pinned();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* ServiceOptions::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const ServiceOptions& this_ = static_cast<const ServiceOptions&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* ServiceOptions::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const ServiceOptions& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:tensorflow.data.ServiceOptions)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // bool pinned = 1;
          if (this_.optional_pinned_case() == kPinned) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                1, this_._internal_pinned(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:tensorflow.data.ServiceOptions)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t ServiceOptions::ByteSizeLong(const MessageLite& base) {
          const ServiceOptions& this_ = static_cast<const ServiceOptions&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t ServiceOptions::ByteSizeLong() const {
          const ServiceOptions& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:tensorflow.data.ServiceOptions)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          switch (this_.optional_pinned_case()) {
            // bool pinned = 1;
            case kPinned: {
              total_size += 2;
              break;
            }
            case OPTIONAL_PINNED_NOT_SET: {
              break;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void ServiceOptions::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ServiceOptions*>(&to_msg);
  auto& from = static_cast<const ServiceOptions&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.data.ServiceOptions)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[0]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[0];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_optional_pinned();
      }
      _this->_impl_._oneof_case_[0] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kPinned: {
        _this->_impl_.optional_pinned_.pinned_ = from._impl_.optional_pinned_.pinned_;
        break;
      }
      case OPTIONAL_PINNED_NOT_SET:
        break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ServiceOptions::CopyFrom(const ServiceOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.data.ServiceOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ServiceOptions::InternalSwap(ServiceOptions* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.optional_pinned_, other->_impl_.optional_pinned_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata ServiceOptions::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ThreadingOptions::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
      PROTOBUF_FIELD_OFFSET(::tensorflow::data::ThreadingOptions, _impl_._oneof_case_);
};

ThreadingOptions::ThreadingOptions(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.data.ThreadingOptions)
}
inline PROTOBUF_NDEBUG_INLINE ThreadingOptions::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::tensorflow::data::ThreadingOptions& from_msg)
      : optional_max_intra_op_parallelism_{},
        optional_private_threadpool_size_{},
        _cached_size_{0},
        _oneof_case_{from._oneof_case_[0], from._oneof_case_[1]} {}

ThreadingOptions::ThreadingOptions(
    ::google::protobuf::Arena* arena,
    const ThreadingOptions& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ThreadingOptions* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  switch (optional_max_intra_op_parallelism_case()) {
    case OPTIONAL_MAX_INTRA_OP_PARALLELISM_NOT_SET:
      break;
      case kMaxIntraOpParallelism:
        _impl_.optional_max_intra_op_parallelism_.max_intra_op_parallelism_ = from._impl_.optional_max_intra_op_parallelism_.max_intra_op_parallelism_;
        break;
  }
  switch (optional_private_threadpool_size_case()) {
    case OPTIONAL_PRIVATE_THREADPOOL_SIZE_NOT_SET:
      break;
      case kPrivateThreadpoolSize:
        _impl_.optional_private_threadpool_size_.private_threadpool_size_ = from._impl_.optional_private_threadpool_size_.private_threadpool_size_;
        break;
  }

  // @@protoc_insertion_point(copy_constructor:tensorflow.data.ThreadingOptions)
}
inline PROTOBUF_NDEBUG_INLINE ThreadingOptions::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : optional_max_intra_op_parallelism_{},
        optional_private_threadpool_size_{},
        _cached_size_{0},
        _oneof_case_{} {}

inline void ThreadingOptions::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
ThreadingOptions::~ThreadingOptions() {
  // @@protoc_insertion_point(destructor:tensorflow.data.ThreadingOptions)
  SharedDtor(*this);
}
inline void ThreadingOptions::SharedDtor(MessageLite& self) {
  ThreadingOptions& this_ = static_cast<ThreadingOptions&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  if (this_.has_optional_max_intra_op_parallelism()) {
    this_.clear_optional_max_intra_op_parallelism();
  }
  if (this_.has_optional_private_threadpool_size()) {
    this_.clear_optional_private_threadpool_size();
  }
  this_._impl_.~Impl_();
}

void ThreadingOptions::clear_optional_max_intra_op_parallelism() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.data.ThreadingOptions)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  switch (optional_max_intra_op_parallelism_case()) {
    case kMaxIntraOpParallelism: {
      // No need to clear
      break;
    }
    case OPTIONAL_MAX_INTRA_OP_PARALLELISM_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = OPTIONAL_MAX_INTRA_OP_PARALLELISM_NOT_SET;
}

void ThreadingOptions::clear_optional_private_threadpool_size() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.data.ThreadingOptions)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  switch (optional_private_threadpool_size_case()) {
    case kPrivateThreadpoolSize: {
      // No need to clear
      break;
    }
    case OPTIONAL_PRIVATE_THREADPOOL_SIZE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[1] = OPTIONAL_PRIVATE_THREADPOOL_SIZE_NOT_SET;
}


inline void* ThreadingOptions::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) ThreadingOptions(arena);
}
constexpr auto ThreadingOptions::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(ThreadingOptions),
                                            alignof(ThreadingOptions));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull ThreadingOptions::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_ThreadingOptions_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &ThreadingOptions::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<ThreadingOptions>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &ThreadingOptions::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<ThreadingOptions>(), &ThreadingOptions::ByteSizeLong,
            &ThreadingOptions::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(ThreadingOptions, _impl_._cached_size_),
        false,
    },
    &ThreadingOptions::kDescriptorMethods,
    &descriptor_table_tensorflow_2fcore_2fframework_2fdataset_5foptions_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* ThreadingOptions::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 2, 0, 0, 2> ThreadingOptions::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tensorflow::data::ThreadingOptions>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 max_intra_op_parallelism = 1;
    {PROTOBUF_FIELD_OFFSET(ThreadingOptions, _impl_.optional_max_intra_op_parallelism_.max_intra_op_parallelism_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kInt32)},
    // int32 private_threadpool_size = 2;
    {PROTOBUF_FIELD_OFFSET(ThreadingOptions, _impl_.optional_private_threadpool_size_.private_threadpool_size_), _Internal::kOneofCaseOffset + 4, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void ThreadingOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.data.ThreadingOptions)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_optional_max_intra_op_parallelism();
  clear_optional_private_threadpool_size();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* ThreadingOptions::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const ThreadingOptions& this_ = static_cast<const ThreadingOptions&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* ThreadingOptions::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const ThreadingOptions& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:tensorflow.data.ThreadingOptions)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // int32 max_intra_op_parallelism = 1;
          if (this_.optional_max_intra_op_parallelism_case() == kMaxIntraOpParallelism) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<1>(
                    stream, this_._internal_max_intra_op_parallelism(), target);
          }

          // int32 private_threadpool_size = 2;
          if (this_.optional_private_threadpool_size_case() == kPrivateThreadpoolSize) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<2>(
                    stream, this_._internal_private_threadpool_size(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:tensorflow.data.ThreadingOptions)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t ThreadingOptions::ByteSizeLong(const MessageLite& base) {
          const ThreadingOptions& this_ = static_cast<const ThreadingOptions&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t ThreadingOptions::ByteSizeLong() const {
          const ThreadingOptions& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:tensorflow.data.ThreadingOptions)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          switch (this_.optional_max_intra_op_parallelism_case()) {
            // int32 max_intra_op_parallelism = 1;
            case kMaxIntraOpParallelism: {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_max_intra_op_parallelism());
              break;
            }
            case OPTIONAL_MAX_INTRA_OP_PARALLELISM_NOT_SET: {
              break;
            }
          }
          switch (this_.optional_private_threadpool_size_case()) {
            // int32 private_threadpool_size = 2;
            case kPrivateThreadpoolSize: {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_private_threadpool_size());
              break;
            }
            case OPTIONAL_PRIVATE_THREADPOOL_SIZE_NOT_SET: {
              break;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void ThreadingOptions::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ThreadingOptions*>(&to_msg);
  auto& from = static_cast<const ThreadingOptions&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.data.ThreadingOptions)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[0]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[0];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_optional_max_intra_op_parallelism();
      }
      _this->_impl_._oneof_case_[0] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kMaxIntraOpParallelism: {
        _this->_impl_.optional_max_intra_op_parallelism_.max_intra_op_parallelism_ = from._impl_.optional_max_intra_op_parallelism_.max_intra_op_parallelism_;
        break;
      }
      case OPTIONAL_MAX_INTRA_OP_PARALLELISM_NOT_SET:
        break;
    }
  }
  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[1]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[1];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_optional_private_threadpool_size();
      }
      _this->_impl_._oneof_case_[1] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kPrivateThreadpoolSize: {
        _this->_impl_.optional_private_threadpool_size_.private_threadpool_size_ = from._impl_.optional_private_threadpool_size_.private_threadpool_size_;
        break;
      }
      case OPTIONAL_PRIVATE_THREADPOOL_SIZE_NOT_SET:
        break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ThreadingOptions::CopyFrom(const ThreadingOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.data.ThreadingOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ThreadingOptions::InternalSwap(ThreadingOptions* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.optional_max_intra_op_parallelism_, other->_impl_.optional_max_intra_op_parallelism_);
  swap(_impl_.optional_private_threadpool_size_, other->_impl_.optional_private_threadpool_size_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
  swap(_impl_._oneof_case_[1], other->_impl_._oneof_case_[1]);
}

::google::protobuf::Metadata ThreadingOptions::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Options::_Internal {
 public:
  using HasBits =
      decltype(std::declval<Options>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(Options, _impl_._has_bits_);
  static constexpr ::int32_t kOneofCaseOffset =
      PROTOBUF_FIELD_OFFSET(::tensorflow::data::Options, _impl_._oneof_case_);
};

Options::Options(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.data.Options)
}
inline PROTOBUF_NDEBUG_INLINE Options::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::tensorflow::data::Options& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        framework_type_{visibility, arena, from.framework_type_},
        optional_dataset_name_{},
        optional_deterministic_{},
        optional_slack_{},
        optional_external_state_policy_{},
        optional_symbolic_checkpoint_{},
        optional_warm_start_{},
        _oneof_case_{from._oneof_case_[0], from._oneof_case_[1], from._oneof_case_[2], from._oneof_case_[3], from._oneof_case_[4], from._oneof_case_[5]} {}

Options::Options(
    ::google::protobuf::Arena* arena,
    const Options& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Options* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.distribute_options_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::tensorflow::data::DistributeOptions>(
                              arena, *from._impl_.distribute_options_)
                        : nullptr;
  _impl_.optimization_options_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::tensorflow::data::OptimizationOptions>(
                              arena, *from._impl_.optimization_options_)
                        : nullptr;
  _impl_.threading_options_ = (cached_has_bits & 0x00000004u) ? ::google::protobuf::Message::CopyConstruct<::tensorflow::data::ThreadingOptions>(
                              arena, *from._impl_.threading_options_)
                        : nullptr;
  _impl_.autotune_options_ = (cached_has_bits & 0x00000008u) ? ::google::protobuf::Message::CopyConstruct<::tensorflow::data::AutotuneOptions>(
                              arena, *from._impl_.autotune_options_)
                        : nullptr;
  _impl_.service_options_ = (cached_has_bits & 0x00000010u) ? ::google::protobuf::Message::CopyConstruct<::tensorflow::data::ServiceOptions>(
                              arena, *from._impl_.service_options_)
                        : nullptr;
  switch (optional_dataset_name_case()) {
    case OPTIONAL_DATASET_NAME_NOT_SET:
      break;
      case kDatasetName:
        new (&_impl_.optional_dataset_name_.dataset_name_) decltype(_impl_.optional_dataset_name_.dataset_name_){arena, from._impl_.optional_dataset_name_.dataset_name_};
        break;
  }
  switch (optional_deterministic_case()) {
    case OPTIONAL_DETERMINISTIC_NOT_SET:
      break;
      case kDeterministic:
        _impl_.optional_deterministic_.deterministic_ = from._impl_.optional_deterministic_.deterministic_;
        break;
  }
  switch (optional_slack_case()) {
    case OPTIONAL_SLACK_NOT_SET:
      break;
      case kSlack:
        _impl_.optional_slack_.slack_ = from._impl_.optional_slack_.slack_;
        break;
  }
  switch (optional_external_state_policy_case()) {
    case OPTIONAL_EXTERNAL_STATE_POLICY_NOT_SET:
      break;
      case kExternalStatePolicy:
        _impl_.optional_external_state_policy_.external_state_policy_ = from._impl_.optional_external_state_policy_.external_state_policy_;
        break;
  }
  switch (optional_symbolic_checkpoint_case()) {
    case OPTIONAL_SYMBOLIC_CHECKPOINT_NOT_SET:
      break;
      case kSymbolicCheckpoint:
        _impl_.optional_symbolic_checkpoint_.symbolic_checkpoint_ = from._impl_.optional_symbolic_checkpoint_.symbolic_checkpoint_;
        break;
  }
  switch (optional_warm_start_case()) {
    case OPTIONAL_WARM_START_NOT_SET:
      break;
      case kWarmStart:
        _impl_.optional_warm_start_.warm_start_ = from._impl_.optional_warm_start_.warm_start_;
        break;
  }

  // @@protoc_insertion_point(copy_constructor:tensorflow.data.Options)
}
inline PROTOBUF_NDEBUG_INLINE Options::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        framework_type_{visibility, arena},
        optional_dataset_name_{},
        optional_deterministic_{},
        optional_slack_{},
        optional_external_state_policy_{},
        optional_symbolic_checkpoint_{},
        optional_warm_start_{},
        _oneof_case_{} {}

inline void Options::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, distribute_options_),
           0,
           offsetof(Impl_, service_options_) -
               offsetof(Impl_, distribute_options_) +
               sizeof(Impl_::service_options_));
}
Options::~Options() {
  // @@protoc_insertion_point(destructor:tensorflow.data.Options)
  SharedDtor(*this);
}
inline void Options::SharedDtor(MessageLite& self) {
  Options& this_ = static_cast<Options&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.distribute_options_;
  delete this_._impl_.optimization_options_;
  delete this_._impl_.threading_options_;
  delete this_._impl_.autotune_options_;
  delete this_._impl_.service_options_;
  if (this_.has_optional_dataset_name()) {
    this_.clear_optional_dataset_name();
  }
  if (this_.has_optional_deterministic()) {
    this_.clear_optional_deterministic();
  }
  if (this_.has_optional_slack()) {
    this_.clear_optional_slack();
  }
  if (this_.has_optional_external_state_policy()) {
    this_.clear_optional_external_state_policy();
  }
  if (this_.has_optional_symbolic_checkpoint()) {
    this_.clear_optional_symbolic_checkpoint();
  }
  if (this_.has_optional_warm_start()) {
    this_.clear_optional_warm_start();
  }
  this_._impl_.~Impl_();
}

void Options::clear_optional_dataset_name() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.data.Options)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  switch (optional_dataset_name_case()) {
    case kDatasetName: {
      _impl_.optional_dataset_name_.dataset_name_.Destroy();
      break;
    }
    case OPTIONAL_DATASET_NAME_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = OPTIONAL_DATASET_NAME_NOT_SET;
}

void Options::clear_optional_deterministic() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.data.Options)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  switch (optional_deterministic_case()) {
    case kDeterministic: {
      // No need to clear
      break;
    }
    case OPTIONAL_DETERMINISTIC_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[1] = OPTIONAL_DETERMINISTIC_NOT_SET;
}

void Options::clear_optional_slack() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.data.Options)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  switch (optional_slack_case()) {
    case kSlack: {
      // No need to clear
      break;
    }
    case OPTIONAL_SLACK_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[2] = OPTIONAL_SLACK_NOT_SET;
}

void Options::clear_optional_external_state_policy() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.data.Options)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  switch (optional_external_state_policy_case()) {
    case kExternalStatePolicy: {
      // No need to clear
      break;
    }
    case OPTIONAL_EXTERNAL_STATE_POLICY_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[3] = OPTIONAL_EXTERNAL_STATE_POLICY_NOT_SET;
}

void Options::clear_optional_symbolic_checkpoint() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.data.Options)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  switch (optional_symbolic_checkpoint_case()) {
    case kSymbolicCheckpoint: {
      // No need to clear
      break;
    }
    case OPTIONAL_SYMBOLIC_CHECKPOINT_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[4] = OPTIONAL_SYMBOLIC_CHECKPOINT_NOT_SET;
}

void Options::clear_optional_warm_start() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.data.Options)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  switch (optional_warm_start_case()) {
    case kWarmStart: {
      // No need to clear
      break;
    }
    case OPTIONAL_WARM_START_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[5] = OPTIONAL_WARM_START_NOT_SET;
}


inline void* Options::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Options(arena);
}
constexpr auto Options::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(Options, _impl_.framework_type_) +
          decltype(Options::_impl_.framework_type_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(Options), alignof(Options), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&Options::PlacementNew_,
                                 sizeof(Options),
                                 alignof(Options));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull Options::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_Options_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &Options::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<Options>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &Options::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<Options>(), &Options::ByteSizeLong,
            &Options::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(Options, _impl_._cached_size_),
        false,
    },
    &Options::kDescriptorMethods,
    &descriptor_table_tensorflow_2fcore_2fframework_2fdataset_5foptions_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* Options::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 12, 5, 66, 2> Options::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Options, _impl_._has_bits_),
    0, // no _extensions_
    12, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294963200,  // skipmap
    offsetof(decltype(_table_), field_entries),
    12,  // num_field_entries
    5,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tensorflow::data::Options>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // .tensorflow.data.DistributeOptions distribute_options = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(Options, _impl_.distribute_options_)}},
    // .tensorflow.data.OptimizationOptions optimization_options = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 1, 1, PROTOBUF_FIELD_OFFSET(Options, _impl_.optimization_options_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // .tensorflow.data.ThreadingOptions threading_options = 5;
    {::_pbi::TcParser::FastMtS1,
     {42, 2, 2, PROTOBUF_FIELD_OFFSET(Options, _impl_.threading_options_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // .tensorflow.data.AutotuneOptions autotune_options = 7;
    {::_pbi::TcParser::FastMtS1,
     {58, 3, 3, PROTOBUF_FIELD_OFFSET(Options, _impl_.autotune_options_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // repeated string framework_type = 11;
    {::_pbi::TcParser::FastUR1,
     {90, 63, 0, PROTOBUF_FIELD_OFFSET(Options, _impl_.framework_type_)}},
    // .tensorflow.data.ServiceOptions service_options = 12;
    {::_pbi::TcParser::FastMtS1,
     {98, 4, 4, PROTOBUF_FIELD_OFFSET(Options, _impl_.service_options_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // bool deterministic = 1;
    {PROTOBUF_FIELD_OFFSET(Options, _impl_.optional_deterministic_.deterministic_), _Internal::kOneofCaseOffset + 4, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kBool)},
    // .tensorflow.data.DistributeOptions distribute_options = 2;
    {PROTOBUF_FIELD_OFFSET(Options, _impl_.distribute_options_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tensorflow.data.OptimizationOptions optimization_options = 3;
    {PROTOBUF_FIELD_OFFSET(Options, _impl_.optimization_options_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // bool slack = 4;
    {PROTOBUF_FIELD_OFFSET(Options, _impl_.optional_slack_.slack_), _Internal::kOneofCaseOffset + 8, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kBool)},
    // .tensorflow.data.ThreadingOptions threading_options = 5;
    {PROTOBUF_FIELD_OFFSET(Options, _impl_.threading_options_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tensorflow.data.ExternalStatePolicy external_state_policy = 6;
    {PROTOBUF_FIELD_OFFSET(Options, _impl_.optional_external_state_policy_.external_state_policy_), _Internal::kOneofCaseOffset + 12, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kOpenEnum)},
    // .tensorflow.data.AutotuneOptions autotune_options = 7;
    {PROTOBUF_FIELD_OFFSET(Options, _impl_.autotune_options_), _Internal::kHasBitsOffset + 3, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // bool symbolic_checkpoint = 8;
    {PROTOBUF_FIELD_OFFSET(Options, _impl_.optional_symbolic_checkpoint_.symbolic_checkpoint_), _Internal::kOneofCaseOffset + 16, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kBool)},
    // bool warm_start = 9;
    {PROTOBUF_FIELD_OFFSET(Options, _impl_.optional_warm_start_.warm_start_), _Internal::kOneofCaseOffset + 20, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kBool)},
    // string dataset_name = 10;
    {PROTOBUF_FIELD_OFFSET(Options, _impl_.optional_dataset_name_.dataset_name_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated string framework_type = 11;
    {PROTOBUF_FIELD_OFFSET(Options, _impl_.framework_type_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // .tensorflow.data.ServiceOptions service_options = 12;
    {PROTOBUF_FIELD_OFFSET(Options, _impl_.service_options_), _Internal::kHasBitsOffset + 4, 4,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tensorflow::data::DistributeOptions>()},
    {::_pbi::TcParser::GetTable<::tensorflow::data::OptimizationOptions>()},
    {::_pbi::TcParser::GetTable<::tensorflow::data::ThreadingOptions>()},
    {::_pbi::TcParser::GetTable<::tensorflow::data::AutotuneOptions>()},
    {::_pbi::TcParser::GetTable<::tensorflow::data::ServiceOptions>()},
  }}, {{
    "\27\0\0\0\0\0\0\0\0\0\14\16\0\0\0\0"
    "tensorflow.data.Options"
    "dataset_name"
    "framework_type"
  }},
};

PROTOBUF_NOINLINE void Options::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.data.Options)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.framework_type_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.distribute_options_ != nullptr);
      _impl_.distribute_options_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.optimization_options_ != nullptr);
      _impl_.optimization_options_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.threading_options_ != nullptr);
      _impl_.threading_options_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.autotune_options_ != nullptr);
      _impl_.autotune_options_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(_impl_.service_options_ != nullptr);
      _impl_.service_options_->Clear();
    }
  }
  clear_optional_dataset_name();
  clear_optional_deterministic();
  clear_optional_slack();
  clear_optional_external_state_policy();
  clear_optional_symbolic_checkpoint();
  clear_optional_warm_start();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Options::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Options& this_ = static_cast<const Options&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Options::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Options& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:tensorflow.data.Options)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // bool deterministic = 1;
          if (this_.optional_deterministic_case() == kDeterministic) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                1, this_._internal_deterministic(), target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .tensorflow.data.DistributeOptions distribute_options = 2;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.distribute_options_, this_._impl_.distribute_options_->GetCachedSize(), target,
                stream);
          }

          // .tensorflow.data.OptimizationOptions optimization_options = 3;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                3, *this_._impl_.optimization_options_, this_._impl_.optimization_options_->GetCachedSize(), target,
                stream);
          }

          // bool slack = 4;
          if (this_.optional_slack_case() == kSlack) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                4, this_._internal_slack(), target);
          }

          // .tensorflow.data.ThreadingOptions threading_options = 5;
          if (cached_has_bits & 0x00000004u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                5, *this_._impl_.threading_options_, this_._impl_.threading_options_->GetCachedSize(), target,
                stream);
          }

          // .tensorflow.data.ExternalStatePolicy external_state_policy = 6;
          if (this_.optional_external_state_policy_case() == kExternalStatePolicy) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                6, this_._internal_external_state_policy(), target);
          }

          // .tensorflow.data.AutotuneOptions autotune_options = 7;
          if (cached_has_bits & 0x00000008u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                7, *this_._impl_.autotune_options_, this_._impl_.autotune_options_->GetCachedSize(), target,
                stream);
          }

          // bool symbolic_checkpoint = 8;
          if (this_.optional_symbolic_checkpoint_case() == kSymbolicCheckpoint) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                8, this_._internal_symbolic_checkpoint(), target);
          }

          // bool warm_start = 9;
          if (this_.optional_warm_start_case() == kWarmStart) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                9, this_._internal_warm_start(), target);
          }

          // string dataset_name = 10;
          if (this_.optional_dataset_name_case() == kDatasetName) {
            const std::string& _s = this_._internal_dataset_name();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tensorflow.data.Options.dataset_name");
            target = stream->WriteStringMaybeAliased(10, _s, target);
          }

          // repeated string framework_type = 11;
          for (int i = 0, n = this_._internal_framework_type_size(); i < n; ++i) {
            const auto& s = this_._internal_framework_type().Get(i);
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tensorflow.data.Options.framework_type");
            target = stream->WriteString(11, s, target);
          }

          // .tensorflow.data.ServiceOptions service_options = 12;
          if (cached_has_bits & 0x00000010u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                12, *this_._impl_.service_options_, this_._impl_.service_options_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:tensorflow.data.Options)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Options::ByteSizeLong(const MessageLite& base) {
          const Options& this_ = static_cast<const Options&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Options::ByteSizeLong() const {
          const Options& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:tensorflow.data.Options)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated string framework_type = 11;
            {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_framework_type().size());
              for (int i = 0, n = this_._internal_framework_type().size(); i < n; ++i) {
                total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
                    this_._internal_framework_type().Get(i));
              }
            }
          }
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x0000001fu) {
            // .tensorflow.data.DistributeOptions distribute_options = 2;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.distribute_options_);
            }
            // .tensorflow.data.OptimizationOptions optimization_options = 3;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.optimization_options_);
            }
            // .tensorflow.data.ThreadingOptions threading_options = 5;
            if (cached_has_bits & 0x00000004u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.threading_options_);
            }
            // .tensorflow.data.AutotuneOptions autotune_options = 7;
            if (cached_has_bits & 0x00000008u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.autotune_options_);
            }
            // .tensorflow.data.ServiceOptions service_options = 12;
            if (cached_has_bits & 0x00000010u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.service_options_);
            }
          }
          switch (this_.optional_dataset_name_case()) {
            // string dataset_name = 10;
            case kDatasetName: {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_dataset_name());
              break;
            }
            case OPTIONAL_DATASET_NAME_NOT_SET: {
              break;
            }
          }
          switch (this_.optional_deterministic_case()) {
            // bool deterministic = 1;
            case kDeterministic: {
              total_size += 2;
              break;
            }
            case OPTIONAL_DETERMINISTIC_NOT_SET: {
              break;
            }
          }
          switch (this_.optional_slack_case()) {
            // bool slack = 4;
            case kSlack: {
              total_size += 2;
              break;
            }
            case OPTIONAL_SLACK_NOT_SET: {
              break;
            }
          }
          switch (this_.optional_external_state_policy_case()) {
            // .tensorflow.data.ExternalStatePolicy external_state_policy = 6;
            case kExternalStatePolicy: {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_external_state_policy());
              break;
            }
            case OPTIONAL_EXTERNAL_STATE_POLICY_NOT_SET: {
              break;
            }
          }
          switch (this_.optional_symbolic_checkpoint_case()) {
            // bool symbolic_checkpoint = 8;
            case kSymbolicCheckpoint: {
              total_size += 2;
              break;
            }
            case OPTIONAL_SYMBOLIC_CHECKPOINT_NOT_SET: {
              break;
            }
          }
          switch (this_.optional_warm_start_case()) {
            // bool warm_start = 9;
            case kWarmStart: {
              total_size += 2;
              break;
            }
            case OPTIONAL_WARM_START_NOT_SET: {
              break;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Options::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Options*>(&to_msg);
  auto& from = static_cast<const Options&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.data.Options)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_framework_type()->MergeFrom(from._internal_framework_type());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.distribute_options_ != nullptr);
      if (_this->_impl_.distribute_options_ == nullptr) {
        _this->_impl_.distribute_options_ =
            ::google::protobuf::Message::CopyConstruct<::tensorflow::data::DistributeOptions>(arena, *from._impl_.distribute_options_);
      } else {
        _this->_impl_.distribute_options_->MergeFrom(*from._impl_.distribute_options_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.optimization_options_ != nullptr);
      if (_this->_impl_.optimization_options_ == nullptr) {
        _this->_impl_.optimization_options_ =
            ::google::protobuf::Message::CopyConstruct<::tensorflow::data::OptimizationOptions>(arena, *from._impl_.optimization_options_);
      } else {
        _this->_impl_.optimization_options_->MergeFrom(*from._impl_.optimization_options_);
      }
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(from._impl_.threading_options_ != nullptr);
      if (_this->_impl_.threading_options_ == nullptr) {
        _this->_impl_.threading_options_ =
            ::google::protobuf::Message::CopyConstruct<::tensorflow::data::ThreadingOptions>(arena, *from._impl_.threading_options_);
      } else {
        _this->_impl_.threading_options_->MergeFrom(*from._impl_.threading_options_);
      }
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(from._impl_.autotune_options_ != nullptr);
      if (_this->_impl_.autotune_options_ == nullptr) {
        _this->_impl_.autotune_options_ =
            ::google::protobuf::Message::CopyConstruct<::tensorflow::data::AutotuneOptions>(arena, *from._impl_.autotune_options_);
      } else {
        _this->_impl_.autotune_options_->MergeFrom(*from._impl_.autotune_options_);
      }
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(from._impl_.service_options_ != nullptr);
      if (_this->_impl_.service_options_ == nullptr) {
        _this->_impl_.service_options_ =
            ::google::protobuf::Message::CopyConstruct<::tensorflow::data::ServiceOptions>(arena, *from._impl_.service_options_);
      } else {
        _this->_impl_.service_options_->MergeFrom(*from._impl_.service_options_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[0]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[0];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_optional_dataset_name();
      }
      _this->_impl_._oneof_case_[0] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kDatasetName: {
        if (oneof_needs_init) {
          _this->_impl_.optional_dataset_name_.dataset_name_.InitDefault();
        }
        _this->_impl_.optional_dataset_name_.dataset_name_.Set(from._internal_dataset_name(), arena);
        break;
      }
      case OPTIONAL_DATASET_NAME_NOT_SET:
        break;
    }
  }
  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[1]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[1];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_optional_deterministic();
      }
      _this->_impl_._oneof_case_[1] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kDeterministic: {
        _this->_impl_.optional_deterministic_.deterministic_ = from._impl_.optional_deterministic_.deterministic_;
        break;
      }
      case OPTIONAL_DETERMINISTIC_NOT_SET:
        break;
    }
  }
  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[2]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[2];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_optional_slack();
      }
      _this->_impl_._oneof_case_[2] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kSlack: {
        _this->_impl_.optional_slack_.slack_ = from._impl_.optional_slack_.slack_;
        break;
      }
      case OPTIONAL_SLACK_NOT_SET:
        break;
    }
  }
  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[3]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[3];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_optional_external_state_policy();
      }
      _this->_impl_._oneof_case_[3] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kExternalStatePolicy: {
        _this->_impl_.optional_external_state_policy_.external_state_policy_ = from._impl_.optional_external_state_policy_.external_state_policy_;
        break;
      }
      case OPTIONAL_EXTERNAL_STATE_POLICY_NOT_SET:
        break;
    }
  }
  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[4]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[4];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_optional_symbolic_checkpoint();
      }
      _this->_impl_._oneof_case_[4] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kSymbolicCheckpoint: {
        _this->_impl_.optional_symbolic_checkpoint_.symbolic_checkpoint_ = from._impl_.optional_symbolic_checkpoint_.symbolic_checkpoint_;
        break;
      }
      case OPTIONAL_SYMBOLIC_CHECKPOINT_NOT_SET:
        break;
    }
  }
  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[5]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[5];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_optional_warm_start();
      }
      _this->_impl_._oneof_case_[5] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kWarmStart: {
        _this->_impl_.optional_warm_start_.warm_start_ = from._impl_.optional_warm_start_.warm_start_;
        break;
      }
      case OPTIONAL_WARM_START_NOT_SET:
        break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Options::CopyFrom(const Options& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.data.Options)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Options::InternalSwap(Options* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.framework_type_.InternalSwap(&other->_impl_.framework_type_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Options, _impl_.service_options_)
      + sizeof(Options::_impl_.service_options_)
      - PROTOBUF_FIELD_OFFSET(Options, _impl_.distribute_options_)>(
          reinterpret_cast<char*>(&_impl_.distribute_options_),
          reinterpret_cast<char*>(&other->_impl_.distribute_options_));
  swap(_impl_.optional_dataset_name_, other->_impl_.optional_dataset_name_);
  swap(_impl_.optional_deterministic_, other->_impl_.optional_deterministic_);
  swap(_impl_.optional_slack_, other->_impl_.optional_slack_);
  swap(_impl_.optional_external_state_policy_, other->_impl_.optional_external_state_policy_);
  swap(_impl_.optional_symbolic_checkpoint_, other->_impl_.optional_symbolic_checkpoint_);
  swap(_impl_.optional_warm_start_, other->_impl_.optional_warm_start_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
  swap(_impl_._oneof_case_[1], other->_impl_._oneof_case_[1]);
  swap(_impl_._oneof_case_[2], other->_impl_._oneof_case_[2]);
  swap(_impl_._oneof_case_[3], other->_impl_._oneof_case_[3]);
  swap(_impl_._oneof_case_[4], other->_impl_._oneof_case_[4]);
  swap(_impl_._oneof_case_[5], other->_impl_._oneof_case_[5]);
}

::google::protobuf::Metadata Options::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace data
}  // namespace tensorflow
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_tensorflow_2fcore_2fframework_2fdataset_5foptions_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
