// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: tensorflow/core/framework/log_memory.proto
// Protobuf C++ Version: 5.29.0

#include "tensorflow/core/framework/log_memory.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace tensorflow {

inline constexpr MemoryLogTensorDeallocation::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : allocator_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        allocation_id_{::int64_t{0}},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR MemoryLogTensorDeallocation::MemoryLogTensorDeallocation(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct MemoryLogTensorDeallocationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MemoryLogTensorDeallocationDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MemoryLogTensorDeallocationDefaultTypeInternal() {}
  union {
    MemoryLogTensorDeallocation _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MemoryLogTensorDeallocationDefaultTypeInternal _MemoryLogTensorDeallocation_default_instance_;

inline constexpr MemoryLogStep::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : handle_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        step_id_{::int64_t{0}},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR MemoryLogStep::MemoryLogStep(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct MemoryLogStepDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MemoryLogStepDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MemoryLogStepDefaultTypeInternal() {}
  union {
    MemoryLogStep _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MemoryLogStepDefaultTypeInternal _MemoryLogStep_default_instance_;

inline constexpr MemoryLogRawDeallocation::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : operation_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        allocator_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        step_id_{::int64_t{0}},
        allocation_id_{::int64_t{0}},
        deferred_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR MemoryLogRawDeallocation::MemoryLogRawDeallocation(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct MemoryLogRawDeallocationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MemoryLogRawDeallocationDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MemoryLogRawDeallocationDefaultTypeInternal() {}
  union {
    MemoryLogRawDeallocation _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MemoryLogRawDeallocationDefaultTypeInternal _MemoryLogRawDeallocation_default_instance_;

inline constexpr MemoryLogRawAllocation::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : operation_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        allocator_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        step_id_{::int64_t{0}},
        num_bytes_{::int64_t{0}},
        ptr_{::uint64_t{0u}},
        allocation_id_{::int64_t{0}},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR MemoryLogRawAllocation::MemoryLogRawAllocation(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct MemoryLogRawAllocationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MemoryLogRawAllocationDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MemoryLogRawAllocationDefaultTypeInternal() {}
  union {
    MemoryLogRawAllocation _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MemoryLogRawAllocationDefaultTypeInternal _MemoryLogRawAllocation_default_instance_;

inline constexpr MemoryLogTensorOutput::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        kernel_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        tensor_{nullptr},
        step_id_{::int64_t{0}},
        index_{0} {}

template <typename>
PROTOBUF_CONSTEXPR MemoryLogTensorOutput::MemoryLogTensorOutput(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct MemoryLogTensorOutputDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MemoryLogTensorOutputDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MemoryLogTensorOutputDefaultTypeInternal() {}
  union {
    MemoryLogTensorOutput _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MemoryLogTensorOutputDefaultTypeInternal _MemoryLogTensorOutput_default_instance_;

inline constexpr MemoryLogTensorAllocation::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        kernel_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        tensor_{nullptr},
        step_id_{::int64_t{0}} {}

template <typename>
PROTOBUF_CONSTEXPR MemoryLogTensorAllocation::MemoryLogTensorAllocation(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct MemoryLogTensorAllocationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MemoryLogTensorAllocationDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MemoryLogTensorAllocationDefaultTypeInternal() {}
  union {
    MemoryLogTensorAllocation _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MemoryLogTensorAllocationDefaultTypeInternal _MemoryLogTensorAllocation_default_instance_;
}  // namespace tensorflow
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto = nullptr;
const ::uint32_t
    TableStruct_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::tensorflow::MemoryLogStep, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::tensorflow::MemoryLogStep, _impl_.step_id_),
        PROTOBUF_FIELD_OFFSET(::tensorflow::MemoryLogStep, _impl_.handle_),
        PROTOBUF_FIELD_OFFSET(::tensorflow::MemoryLogTensorAllocation, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::tensorflow::MemoryLogTensorAllocation, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::tensorflow::MemoryLogTensorAllocation, _impl_.step_id_),
        PROTOBUF_FIELD_OFFSET(::tensorflow::MemoryLogTensorAllocation, _impl_.kernel_name_),
        PROTOBUF_FIELD_OFFSET(::tensorflow::MemoryLogTensorAllocation, _impl_.tensor_),
        ~0u,
        ~0u,
        0,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::tensorflow::MemoryLogTensorDeallocation, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::tensorflow::MemoryLogTensorDeallocation, _impl_.allocation_id_),
        PROTOBUF_FIELD_OFFSET(::tensorflow::MemoryLogTensorDeallocation, _impl_.allocator_name_),
        PROTOBUF_FIELD_OFFSET(::tensorflow::MemoryLogTensorOutput, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::tensorflow::MemoryLogTensorOutput, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::tensorflow::MemoryLogTensorOutput, _impl_.step_id_),
        PROTOBUF_FIELD_OFFSET(::tensorflow::MemoryLogTensorOutput, _impl_.kernel_name_),
        PROTOBUF_FIELD_OFFSET(::tensorflow::MemoryLogTensorOutput, _impl_.index_),
        PROTOBUF_FIELD_OFFSET(::tensorflow::MemoryLogTensorOutput, _impl_.tensor_),
        ~0u,
        ~0u,
        ~0u,
        0,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::tensorflow::MemoryLogRawAllocation, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::tensorflow::MemoryLogRawAllocation, _impl_.step_id_),
        PROTOBUF_FIELD_OFFSET(::tensorflow::MemoryLogRawAllocation, _impl_.operation_),
        PROTOBUF_FIELD_OFFSET(::tensorflow::MemoryLogRawAllocation, _impl_.num_bytes_),
        PROTOBUF_FIELD_OFFSET(::tensorflow::MemoryLogRawAllocation, _impl_.ptr_),
        PROTOBUF_FIELD_OFFSET(::tensorflow::MemoryLogRawAllocation, _impl_.allocation_id_),
        PROTOBUF_FIELD_OFFSET(::tensorflow::MemoryLogRawAllocation, _impl_.allocator_name_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::tensorflow::MemoryLogRawDeallocation, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::tensorflow::MemoryLogRawDeallocation, _impl_.step_id_),
        PROTOBUF_FIELD_OFFSET(::tensorflow::MemoryLogRawDeallocation, _impl_.operation_),
        PROTOBUF_FIELD_OFFSET(::tensorflow::MemoryLogRawDeallocation, _impl_.allocation_id_),
        PROTOBUF_FIELD_OFFSET(::tensorflow::MemoryLogRawDeallocation, _impl_.allocator_name_),
        PROTOBUF_FIELD_OFFSET(::tensorflow::MemoryLogRawDeallocation, _impl_.deferred_),
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::tensorflow::MemoryLogStep)},
        {10, 21, -1, sizeof(::tensorflow::MemoryLogTensorAllocation)},
        {24, -1, -1, sizeof(::tensorflow::MemoryLogTensorDeallocation)},
        {34, 46, -1, sizeof(::tensorflow::MemoryLogTensorOutput)},
        {50, -1, -1, sizeof(::tensorflow::MemoryLogRawAllocation)},
        {64, -1, -1, sizeof(::tensorflow::MemoryLogRawDeallocation)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::tensorflow::_MemoryLogStep_default_instance_._instance,
    &::tensorflow::_MemoryLogTensorAllocation_default_instance_._instance,
    &::tensorflow::_MemoryLogTensorDeallocation_default_instance_._instance,
    &::tensorflow::_MemoryLogTensorOutput_default_instance_._instance,
    &::tensorflow::_MemoryLogRawAllocation_default_instance_._instance,
    &::tensorflow::_MemoryLogRawDeallocation_default_instance_._instance,
};
const char descriptor_table_protodef_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n*tensorflow/core/framework/log_memory.p"
    "roto\022\ntensorflow\0322tensorflow/core/framew"
    "ork/tensor_description.proto\"0\n\rMemoryLo"
    "gStep\022\017\n\007step_id\030\001 \001(\003\022\016\n\006handle\030\002 \001(\t\"p"
    "\n\031MemoryLogTensorAllocation\022\017\n\007step_id\030\001"
    " \001(\003\022\023\n\013kernel_name\030\002 \001(\t\022-\n\006tensor\030\003 \001("
    "\0132\035.tensorflow.TensorDescription\"L\n\033Memo"
    "ryLogTensorDeallocation\022\025\n\rallocation_id"
    "\030\001 \001(\003\022\026\n\016allocator_name\030\002 \001(\t\"{\n\025Memory"
    "LogTensorOutput\022\017\n\007step_id\030\001 \001(\003\022\023\n\013kern"
    "el_name\030\002 \001(\t\022\r\n\005index\030\003 \001(\005\022-\n\006tensor\030\004"
    " \001(\0132\035.tensorflow.TensorDescription\"\213\001\n\026"
    "MemoryLogRawAllocation\022\017\n\007step_id\030\001 \001(\003\022"
    "\021\n\toperation\030\002 \001(\t\022\021\n\tnum_bytes\030\003 \001(\003\022\013\n"
    "\003ptr\030\004 \001(\004\022\025\n\rallocation_id\030\005 \001(\003\022\026\n\016all"
    "ocator_name\030\006 \001(\t\"\177\n\030MemoryLogRawDealloc"
    "ation\022\017\n\007step_id\030\001 \001(\003\022\021\n\toperation\030\002 \001("
    "\t\022\025\n\rallocation_id\030\003 \001(\003\022\026\n\016allocator_na"
    "me\030\004 \001(\t\022\020\n\010deferred\030\005 \001(\010B\203\001\n\030org.tenso"
    "rflow.frameworkB\017LogMemoryProtosP\001ZQgith"
    "ub.com/tensorflow/tensorflow/tensorflow/"
    "go/core/framework/log_memory_go_proto\370\001\001"
    "b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto_deps[1] =
    {
        &::descriptor_table_tensorflow_2fcore_2fframework_2ftensor_5fdescription_2eproto,
};
static ::absl::once_flag descriptor_table_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto = {
    false,
    false,
    888,
    descriptor_table_protodef_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto,
    "tensorflow/core/framework/log_memory.proto",
    &descriptor_table_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto_once,
    descriptor_table_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto_deps,
    1,
    6,
    schemas,
    file_default_instances,
    TableStruct_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto::offsets,
    file_level_enum_descriptors_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto,
    file_level_service_descriptors_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto,
};
namespace tensorflow {
// ===================================================================

class MemoryLogStep::_Internal {
 public:
};

MemoryLogStep::MemoryLogStep(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.MemoryLogStep)
}
inline PROTOBUF_NDEBUG_INLINE MemoryLogStep::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::tensorflow::MemoryLogStep& from_msg)
      : handle_(arena, from.handle_),
        _cached_size_{0} {}

MemoryLogStep::MemoryLogStep(
    ::google::protobuf::Arena* arena,
    const MemoryLogStep& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  MemoryLogStep* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.step_id_ = from._impl_.step_id_;

  // @@protoc_insertion_point(copy_constructor:tensorflow.MemoryLogStep)
}
inline PROTOBUF_NDEBUG_INLINE MemoryLogStep::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : handle_(arena),
        _cached_size_{0} {}

inline void MemoryLogStep::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.step_id_ = {};
}
MemoryLogStep::~MemoryLogStep() {
  // @@protoc_insertion_point(destructor:tensorflow.MemoryLogStep)
  SharedDtor(*this);
}
inline void MemoryLogStep::SharedDtor(MessageLite& self) {
  MemoryLogStep& this_ = static_cast<MemoryLogStep&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.handle_.Destroy();
  this_._impl_.~Impl_();
}

inline void* MemoryLogStep::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) MemoryLogStep(arena);
}
constexpr auto MemoryLogStep::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(MemoryLogStep),
                                            alignof(MemoryLogStep));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull MemoryLogStep::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_MemoryLogStep_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &MemoryLogStep::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<MemoryLogStep>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &MemoryLogStep::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<MemoryLogStep>(), &MemoryLogStep::ByteSizeLong,
            &MemoryLogStep::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(MemoryLogStep, _impl_._cached_size_),
        false,
    },
    &MemoryLogStep::kDescriptorMethods,
    &descriptor_table_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* MemoryLogStep::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 39, 2> MemoryLogStep::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tensorflow::MemoryLogStep>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string handle = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(MemoryLogStep, _impl_.handle_)}},
    // int64 step_id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(MemoryLogStep, _impl_.step_id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(MemoryLogStep, _impl_.step_id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int64 step_id = 1;
    {PROTOBUF_FIELD_OFFSET(MemoryLogStep, _impl_.step_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // string handle = 2;
    {PROTOBUF_FIELD_OFFSET(MemoryLogStep, _impl_.handle_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\30\0\6\0\0\0\0\0"
    "tensorflow.MemoryLogStep"
    "handle"
  }},
};

PROTOBUF_NOINLINE void MemoryLogStep::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.MemoryLogStep)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.handle_.ClearToEmpty();
  _impl_.step_id_ = ::int64_t{0};
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* MemoryLogStep::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const MemoryLogStep& this_ = static_cast<const MemoryLogStep&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* MemoryLogStep::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const MemoryLogStep& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:tensorflow.MemoryLogStep)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // int64 step_id = 1;
          if (this_._internal_step_id() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt64ToArrayWithField<1>(
                    stream, this_._internal_step_id(), target);
          }

          // string handle = 2;
          if (!this_._internal_handle().empty()) {
            const std::string& _s = this_._internal_handle();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tensorflow.MemoryLogStep.handle");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:tensorflow.MemoryLogStep)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t MemoryLogStep::ByteSizeLong(const MessageLite& base) {
          const MemoryLogStep& this_ = static_cast<const MemoryLogStep&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t MemoryLogStep::ByteSizeLong() const {
          const MemoryLogStep& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:tensorflow.MemoryLogStep)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string handle = 2;
            if (!this_._internal_handle().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_handle());
            }
            // int64 step_id = 1;
            if (this_._internal_step_id() != 0) {
              total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
                  this_._internal_step_id());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void MemoryLogStep::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<MemoryLogStep*>(&to_msg);
  auto& from = static_cast<const MemoryLogStep&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.MemoryLogStep)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_handle().empty()) {
    _this->_internal_set_handle(from._internal_handle());
  }
  if (from._internal_step_id() != 0) {
    _this->_impl_.step_id_ = from._impl_.step_id_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MemoryLogStep::CopyFrom(const MemoryLogStep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.MemoryLogStep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void MemoryLogStep::InternalSwap(MemoryLogStep* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.handle_, &other->_impl_.handle_, arena);
        swap(_impl_.step_id_, other->_impl_.step_id_);
}

::google::protobuf::Metadata MemoryLogStep::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class MemoryLogTensorAllocation::_Internal {
 public:
  using HasBits =
      decltype(std::declval<MemoryLogTensorAllocation>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(MemoryLogTensorAllocation, _impl_._has_bits_);
};

void MemoryLogTensorAllocation::clear_tensor() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.tensor_ != nullptr) _impl_.tensor_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
MemoryLogTensorAllocation::MemoryLogTensorAllocation(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.MemoryLogTensorAllocation)
}
inline PROTOBUF_NDEBUG_INLINE MemoryLogTensorAllocation::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::tensorflow::MemoryLogTensorAllocation& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        kernel_name_(arena, from.kernel_name_) {}

MemoryLogTensorAllocation::MemoryLogTensorAllocation(
    ::google::protobuf::Arena* arena,
    const MemoryLogTensorAllocation& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  MemoryLogTensorAllocation* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.tensor_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::tensorflow::TensorDescription>(
                              arena, *from._impl_.tensor_)
                        : nullptr;
  _impl_.step_id_ = from._impl_.step_id_;

  // @@protoc_insertion_point(copy_constructor:tensorflow.MemoryLogTensorAllocation)
}
inline PROTOBUF_NDEBUG_INLINE MemoryLogTensorAllocation::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        kernel_name_(arena) {}

inline void MemoryLogTensorAllocation::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, tensor_),
           0,
           offsetof(Impl_, step_id_) -
               offsetof(Impl_, tensor_) +
               sizeof(Impl_::step_id_));
}
MemoryLogTensorAllocation::~MemoryLogTensorAllocation() {
  // @@protoc_insertion_point(destructor:tensorflow.MemoryLogTensorAllocation)
  SharedDtor(*this);
}
inline void MemoryLogTensorAllocation::SharedDtor(MessageLite& self) {
  MemoryLogTensorAllocation& this_ = static_cast<MemoryLogTensorAllocation&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.kernel_name_.Destroy();
  delete this_._impl_.tensor_;
  this_._impl_.~Impl_();
}

inline void* MemoryLogTensorAllocation::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) MemoryLogTensorAllocation(arena);
}
constexpr auto MemoryLogTensorAllocation::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(MemoryLogTensorAllocation),
                                            alignof(MemoryLogTensorAllocation));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull MemoryLogTensorAllocation::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_MemoryLogTensorAllocation_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &MemoryLogTensorAllocation::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<MemoryLogTensorAllocation>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &MemoryLogTensorAllocation::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<MemoryLogTensorAllocation>(), &MemoryLogTensorAllocation::ByteSizeLong,
            &MemoryLogTensorAllocation::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(MemoryLogTensorAllocation, _impl_._cached_size_),
        false,
    },
    &MemoryLogTensorAllocation::kDescriptorMethods,
    &descriptor_table_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* MemoryLogTensorAllocation::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 1, 56, 2> MemoryLogTensorAllocation::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(MemoryLogTensorAllocation, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tensorflow::MemoryLogTensorAllocation>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int64 step_id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(MemoryLogTensorAllocation, _impl_.step_id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(MemoryLogTensorAllocation, _impl_.step_id_)}},
    // string kernel_name = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(MemoryLogTensorAllocation, _impl_.kernel_name_)}},
    // .tensorflow.TensorDescription tensor = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 0, 0, PROTOBUF_FIELD_OFFSET(MemoryLogTensorAllocation, _impl_.tensor_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int64 step_id = 1;
    {PROTOBUF_FIELD_OFFSET(MemoryLogTensorAllocation, _impl_.step_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // string kernel_name = 2;
    {PROTOBUF_FIELD_OFFSET(MemoryLogTensorAllocation, _impl_.kernel_name_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .tensorflow.TensorDescription tensor = 3;
    {PROTOBUF_FIELD_OFFSET(MemoryLogTensorAllocation, _impl_.tensor_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tensorflow::TensorDescription>()},
  }}, {{
    "\44\0\13\0\0\0\0\0"
    "tensorflow.MemoryLogTensorAllocation"
    "kernel_name"
  }},
};

PROTOBUF_NOINLINE void MemoryLogTensorAllocation::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.MemoryLogTensorAllocation)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.kernel_name_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.tensor_ != nullptr);
    _impl_.tensor_->Clear();
  }
  _impl_.step_id_ = ::int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* MemoryLogTensorAllocation::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const MemoryLogTensorAllocation& this_ = static_cast<const MemoryLogTensorAllocation&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* MemoryLogTensorAllocation::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const MemoryLogTensorAllocation& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:tensorflow.MemoryLogTensorAllocation)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // int64 step_id = 1;
          if (this_._internal_step_id() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt64ToArrayWithField<1>(
                    stream, this_._internal_step_id(), target);
          }

          // string kernel_name = 2;
          if (!this_._internal_kernel_name().empty()) {
            const std::string& _s = this_._internal_kernel_name();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tensorflow.MemoryLogTensorAllocation.kernel_name");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .tensorflow.TensorDescription tensor = 3;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                3, *this_._impl_.tensor_, this_._impl_.tensor_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:tensorflow.MemoryLogTensorAllocation)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t MemoryLogTensorAllocation::ByteSizeLong(const MessageLite& base) {
          const MemoryLogTensorAllocation& this_ = static_cast<const MemoryLogTensorAllocation&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t MemoryLogTensorAllocation::ByteSizeLong() const {
          const MemoryLogTensorAllocation& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:tensorflow.MemoryLogTensorAllocation)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string kernel_name = 2;
            if (!this_._internal_kernel_name().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_kernel_name());
            }
          }
           {
            // .tensorflow.TensorDescription tensor = 3;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.tensor_);
            }
          }
           {
            // int64 step_id = 1;
            if (this_._internal_step_id() != 0) {
              total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
                  this_._internal_step_id());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void MemoryLogTensorAllocation::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<MemoryLogTensorAllocation*>(&to_msg);
  auto& from = static_cast<const MemoryLogTensorAllocation&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.MemoryLogTensorAllocation)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_kernel_name().empty()) {
    _this->_internal_set_kernel_name(from._internal_kernel_name());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.tensor_ != nullptr);
    if (_this->_impl_.tensor_ == nullptr) {
      _this->_impl_.tensor_ =
          ::google::protobuf::Message::CopyConstruct<::tensorflow::TensorDescription>(arena, *from._impl_.tensor_);
    } else {
      _this->_impl_.tensor_->MergeFrom(*from._impl_.tensor_);
    }
  }
  if (from._internal_step_id() != 0) {
    _this->_impl_.step_id_ = from._impl_.step_id_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MemoryLogTensorAllocation::CopyFrom(const MemoryLogTensorAllocation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.MemoryLogTensorAllocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void MemoryLogTensorAllocation::InternalSwap(MemoryLogTensorAllocation* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.kernel_name_, &other->_impl_.kernel_name_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MemoryLogTensorAllocation, _impl_.step_id_)
      + sizeof(MemoryLogTensorAllocation::_impl_.step_id_)
      - PROTOBUF_FIELD_OFFSET(MemoryLogTensorAllocation, _impl_.tensor_)>(
          reinterpret_cast<char*>(&_impl_.tensor_),
          reinterpret_cast<char*>(&other->_impl_.tensor_));
}

::google::protobuf::Metadata MemoryLogTensorAllocation::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class MemoryLogTensorDeallocation::_Internal {
 public:
};

MemoryLogTensorDeallocation::MemoryLogTensorDeallocation(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.MemoryLogTensorDeallocation)
}
inline PROTOBUF_NDEBUG_INLINE MemoryLogTensorDeallocation::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::tensorflow::MemoryLogTensorDeallocation& from_msg)
      : allocator_name_(arena, from.allocator_name_),
        _cached_size_{0} {}

MemoryLogTensorDeallocation::MemoryLogTensorDeallocation(
    ::google::protobuf::Arena* arena,
    const MemoryLogTensorDeallocation& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  MemoryLogTensorDeallocation* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.allocation_id_ = from._impl_.allocation_id_;

  // @@protoc_insertion_point(copy_constructor:tensorflow.MemoryLogTensorDeallocation)
}
inline PROTOBUF_NDEBUG_INLINE MemoryLogTensorDeallocation::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : allocator_name_(arena),
        _cached_size_{0} {}

inline void MemoryLogTensorDeallocation::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.allocation_id_ = {};
}
MemoryLogTensorDeallocation::~MemoryLogTensorDeallocation() {
  // @@protoc_insertion_point(destructor:tensorflow.MemoryLogTensorDeallocation)
  SharedDtor(*this);
}
inline void MemoryLogTensorDeallocation::SharedDtor(MessageLite& self) {
  MemoryLogTensorDeallocation& this_ = static_cast<MemoryLogTensorDeallocation&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.allocator_name_.Destroy();
  this_._impl_.~Impl_();
}

inline void* MemoryLogTensorDeallocation::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) MemoryLogTensorDeallocation(arena);
}
constexpr auto MemoryLogTensorDeallocation::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(MemoryLogTensorDeallocation),
                                            alignof(MemoryLogTensorDeallocation));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull MemoryLogTensorDeallocation::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_MemoryLogTensorDeallocation_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &MemoryLogTensorDeallocation::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<MemoryLogTensorDeallocation>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &MemoryLogTensorDeallocation::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<MemoryLogTensorDeallocation>(), &MemoryLogTensorDeallocation::ByteSizeLong,
            &MemoryLogTensorDeallocation::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(MemoryLogTensorDeallocation, _impl_._cached_size_),
        false,
    },
    &MemoryLogTensorDeallocation::kDescriptorMethods,
    &descriptor_table_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* MemoryLogTensorDeallocation::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 61, 2> MemoryLogTensorDeallocation::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tensorflow::MemoryLogTensorDeallocation>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string allocator_name = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(MemoryLogTensorDeallocation, _impl_.allocator_name_)}},
    // int64 allocation_id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(MemoryLogTensorDeallocation, _impl_.allocation_id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(MemoryLogTensorDeallocation, _impl_.allocation_id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int64 allocation_id = 1;
    {PROTOBUF_FIELD_OFFSET(MemoryLogTensorDeallocation, _impl_.allocation_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // string allocator_name = 2;
    {PROTOBUF_FIELD_OFFSET(MemoryLogTensorDeallocation, _impl_.allocator_name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\46\0\16\0\0\0\0\0"
    "tensorflow.MemoryLogTensorDeallocation"
    "allocator_name"
  }},
};

PROTOBUF_NOINLINE void MemoryLogTensorDeallocation::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.MemoryLogTensorDeallocation)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.allocator_name_.ClearToEmpty();
  _impl_.allocation_id_ = ::int64_t{0};
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* MemoryLogTensorDeallocation::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const MemoryLogTensorDeallocation& this_ = static_cast<const MemoryLogTensorDeallocation&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* MemoryLogTensorDeallocation::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const MemoryLogTensorDeallocation& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:tensorflow.MemoryLogTensorDeallocation)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // int64 allocation_id = 1;
          if (this_._internal_allocation_id() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt64ToArrayWithField<1>(
                    stream, this_._internal_allocation_id(), target);
          }

          // string allocator_name = 2;
          if (!this_._internal_allocator_name().empty()) {
            const std::string& _s = this_._internal_allocator_name();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tensorflow.MemoryLogTensorDeallocation.allocator_name");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:tensorflow.MemoryLogTensorDeallocation)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t MemoryLogTensorDeallocation::ByteSizeLong(const MessageLite& base) {
          const MemoryLogTensorDeallocation& this_ = static_cast<const MemoryLogTensorDeallocation&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t MemoryLogTensorDeallocation::ByteSizeLong() const {
          const MemoryLogTensorDeallocation& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:tensorflow.MemoryLogTensorDeallocation)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string allocator_name = 2;
            if (!this_._internal_allocator_name().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_allocator_name());
            }
            // int64 allocation_id = 1;
            if (this_._internal_allocation_id() != 0) {
              total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
                  this_._internal_allocation_id());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void MemoryLogTensorDeallocation::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<MemoryLogTensorDeallocation*>(&to_msg);
  auto& from = static_cast<const MemoryLogTensorDeallocation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.MemoryLogTensorDeallocation)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_allocator_name().empty()) {
    _this->_internal_set_allocator_name(from._internal_allocator_name());
  }
  if (from._internal_allocation_id() != 0) {
    _this->_impl_.allocation_id_ = from._impl_.allocation_id_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MemoryLogTensorDeallocation::CopyFrom(const MemoryLogTensorDeallocation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.MemoryLogTensorDeallocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void MemoryLogTensorDeallocation::InternalSwap(MemoryLogTensorDeallocation* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.allocator_name_, &other->_impl_.allocator_name_, arena);
        swap(_impl_.allocation_id_, other->_impl_.allocation_id_);
}

::google::protobuf::Metadata MemoryLogTensorDeallocation::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class MemoryLogTensorOutput::_Internal {
 public:
  using HasBits =
      decltype(std::declval<MemoryLogTensorOutput>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(MemoryLogTensorOutput, _impl_._has_bits_);
};

void MemoryLogTensorOutput::clear_tensor() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.tensor_ != nullptr) _impl_.tensor_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
MemoryLogTensorOutput::MemoryLogTensorOutput(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.MemoryLogTensorOutput)
}
inline PROTOBUF_NDEBUG_INLINE MemoryLogTensorOutput::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::tensorflow::MemoryLogTensorOutput& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        kernel_name_(arena, from.kernel_name_) {}

MemoryLogTensorOutput::MemoryLogTensorOutput(
    ::google::protobuf::Arena* arena,
    const MemoryLogTensorOutput& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  MemoryLogTensorOutput* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.tensor_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::tensorflow::TensorDescription>(
                              arena, *from._impl_.tensor_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, step_id_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, step_id_),
           offsetof(Impl_, index_) -
               offsetof(Impl_, step_id_) +
               sizeof(Impl_::index_));

  // @@protoc_insertion_point(copy_constructor:tensorflow.MemoryLogTensorOutput)
}
inline PROTOBUF_NDEBUG_INLINE MemoryLogTensorOutput::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        kernel_name_(arena) {}

inline void MemoryLogTensorOutput::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, tensor_),
           0,
           offsetof(Impl_, index_) -
               offsetof(Impl_, tensor_) +
               sizeof(Impl_::index_));
}
MemoryLogTensorOutput::~MemoryLogTensorOutput() {
  // @@protoc_insertion_point(destructor:tensorflow.MemoryLogTensorOutput)
  SharedDtor(*this);
}
inline void MemoryLogTensorOutput::SharedDtor(MessageLite& self) {
  MemoryLogTensorOutput& this_ = static_cast<MemoryLogTensorOutput&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.kernel_name_.Destroy();
  delete this_._impl_.tensor_;
  this_._impl_.~Impl_();
}

inline void* MemoryLogTensorOutput::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) MemoryLogTensorOutput(arena);
}
constexpr auto MemoryLogTensorOutput::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(MemoryLogTensorOutput),
                                            alignof(MemoryLogTensorOutput));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull MemoryLogTensorOutput::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_MemoryLogTensorOutput_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &MemoryLogTensorOutput::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<MemoryLogTensorOutput>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &MemoryLogTensorOutput::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<MemoryLogTensorOutput>(), &MemoryLogTensorOutput::ByteSizeLong,
            &MemoryLogTensorOutput::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(MemoryLogTensorOutput, _impl_._cached_size_),
        false,
    },
    &MemoryLogTensorOutput::kDescriptorMethods,
    &descriptor_table_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* MemoryLogTensorOutput::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 1, 52, 2> MemoryLogTensorOutput::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(MemoryLogTensorOutput, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tensorflow::MemoryLogTensorOutput>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .tensorflow.TensorDescription tensor = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 0, 0, PROTOBUF_FIELD_OFFSET(MemoryLogTensorOutput, _impl_.tensor_)}},
    // int64 step_id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(MemoryLogTensorOutput, _impl_.step_id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(MemoryLogTensorOutput, _impl_.step_id_)}},
    // string kernel_name = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(MemoryLogTensorOutput, _impl_.kernel_name_)}},
    // int32 index = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MemoryLogTensorOutput, _impl_.index_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(MemoryLogTensorOutput, _impl_.index_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int64 step_id = 1;
    {PROTOBUF_FIELD_OFFSET(MemoryLogTensorOutput, _impl_.step_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // string kernel_name = 2;
    {PROTOBUF_FIELD_OFFSET(MemoryLogTensorOutput, _impl_.kernel_name_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 index = 3;
    {PROTOBUF_FIELD_OFFSET(MemoryLogTensorOutput, _impl_.index_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .tensorflow.TensorDescription tensor = 4;
    {PROTOBUF_FIELD_OFFSET(MemoryLogTensorOutput, _impl_.tensor_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tensorflow::TensorDescription>()},
  }}, {{
    "\40\0\13\0\0\0\0\0"
    "tensorflow.MemoryLogTensorOutput"
    "kernel_name"
  }},
};

PROTOBUF_NOINLINE void MemoryLogTensorOutput::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.MemoryLogTensorOutput)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.kernel_name_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.tensor_ != nullptr);
    _impl_.tensor_->Clear();
  }
  ::memset(&_impl_.step_id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.index_) -
      reinterpret_cast<char*>(&_impl_.step_id_)) + sizeof(_impl_.index_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* MemoryLogTensorOutput::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const MemoryLogTensorOutput& this_ = static_cast<const MemoryLogTensorOutput&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* MemoryLogTensorOutput::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const MemoryLogTensorOutput& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:tensorflow.MemoryLogTensorOutput)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // int64 step_id = 1;
          if (this_._internal_step_id() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt64ToArrayWithField<1>(
                    stream, this_._internal_step_id(), target);
          }

          // string kernel_name = 2;
          if (!this_._internal_kernel_name().empty()) {
            const std::string& _s = this_._internal_kernel_name();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tensorflow.MemoryLogTensorOutput.kernel_name");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          // int32 index = 3;
          if (this_._internal_index() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<3>(
                    stream, this_._internal_index(), target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .tensorflow.TensorDescription tensor = 4;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                4, *this_._impl_.tensor_, this_._impl_.tensor_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:tensorflow.MemoryLogTensorOutput)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t MemoryLogTensorOutput::ByteSizeLong(const MessageLite& base) {
          const MemoryLogTensorOutput& this_ = static_cast<const MemoryLogTensorOutput&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t MemoryLogTensorOutput::ByteSizeLong() const {
          const MemoryLogTensorOutput& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:tensorflow.MemoryLogTensorOutput)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string kernel_name = 2;
            if (!this_._internal_kernel_name().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_kernel_name());
            }
          }
           {
            // .tensorflow.TensorDescription tensor = 4;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.tensor_);
            }
          }
           {
            // int64 step_id = 1;
            if (this_._internal_step_id() != 0) {
              total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
                  this_._internal_step_id());
            }
            // int32 index = 3;
            if (this_._internal_index() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_index());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void MemoryLogTensorOutput::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<MemoryLogTensorOutput*>(&to_msg);
  auto& from = static_cast<const MemoryLogTensorOutput&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.MemoryLogTensorOutput)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_kernel_name().empty()) {
    _this->_internal_set_kernel_name(from._internal_kernel_name());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.tensor_ != nullptr);
    if (_this->_impl_.tensor_ == nullptr) {
      _this->_impl_.tensor_ =
          ::google::protobuf::Message::CopyConstruct<::tensorflow::TensorDescription>(arena, *from._impl_.tensor_);
    } else {
      _this->_impl_.tensor_->MergeFrom(*from._impl_.tensor_);
    }
  }
  if (from._internal_step_id() != 0) {
    _this->_impl_.step_id_ = from._impl_.step_id_;
  }
  if (from._internal_index() != 0) {
    _this->_impl_.index_ = from._impl_.index_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MemoryLogTensorOutput::CopyFrom(const MemoryLogTensorOutput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.MemoryLogTensorOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void MemoryLogTensorOutput::InternalSwap(MemoryLogTensorOutput* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.kernel_name_, &other->_impl_.kernel_name_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MemoryLogTensorOutput, _impl_.index_)
      + sizeof(MemoryLogTensorOutput::_impl_.index_)
      - PROTOBUF_FIELD_OFFSET(MemoryLogTensorOutput, _impl_.tensor_)>(
          reinterpret_cast<char*>(&_impl_.tensor_),
          reinterpret_cast<char*>(&other->_impl_.tensor_));
}

::google::protobuf::Metadata MemoryLogTensorOutput::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class MemoryLogRawAllocation::_Internal {
 public:
};

MemoryLogRawAllocation::MemoryLogRawAllocation(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.MemoryLogRawAllocation)
}
inline PROTOBUF_NDEBUG_INLINE MemoryLogRawAllocation::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::tensorflow::MemoryLogRawAllocation& from_msg)
      : operation_(arena, from.operation_),
        allocator_name_(arena, from.allocator_name_),
        _cached_size_{0} {}

MemoryLogRawAllocation::MemoryLogRawAllocation(
    ::google::protobuf::Arena* arena,
    const MemoryLogRawAllocation& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  MemoryLogRawAllocation* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, step_id_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, step_id_),
           offsetof(Impl_, allocation_id_) -
               offsetof(Impl_, step_id_) +
               sizeof(Impl_::allocation_id_));

  // @@protoc_insertion_point(copy_constructor:tensorflow.MemoryLogRawAllocation)
}
inline PROTOBUF_NDEBUG_INLINE MemoryLogRawAllocation::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : operation_(arena),
        allocator_name_(arena),
        _cached_size_{0} {}

inline void MemoryLogRawAllocation::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, step_id_),
           0,
           offsetof(Impl_, allocation_id_) -
               offsetof(Impl_, step_id_) +
               sizeof(Impl_::allocation_id_));
}
MemoryLogRawAllocation::~MemoryLogRawAllocation() {
  // @@protoc_insertion_point(destructor:tensorflow.MemoryLogRawAllocation)
  SharedDtor(*this);
}
inline void MemoryLogRawAllocation::SharedDtor(MessageLite& self) {
  MemoryLogRawAllocation& this_ = static_cast<MemoryLogRawAllocation&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.operation_.Destroy();
  this_._impl_.allocator_name_.Destroy();
  this_._impl_.~Impl_();
}

inline void* MemoryLogRawAllocation::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) MemoryLogRawAllocation(arena);
}
constexpr auto MemoryLogRawAllocation::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(MemoryLogRawAllocation),
                                            alignof(MemoryLogRawAllocation));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull MemoryLogRawAllocation::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_MemoryLogRawAllocation_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &MemoryLogRawAllocation::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<MemoryLogRawAllocation>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &MemoryLogRawAllocation::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<MemoryLogRawAllocation>(), &MemoryLogRawAllocation::ByteSizeLong,
            &MemoryLogRawAllocation::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(MemoryLogRawAllocation, _impl_._cached_size_),
        false,
    },
    &MemoryLogRawAllocation::kDescriptorMethods,
    &descriptor_table_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* MemoryLogRawAllocation::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 0, 65, 2> MemoryLogRawAllocation::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tensorflow::MemoryLogRawAllocation>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int64 step_id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(MemoryLogRawAllocation, _impl_.step_id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(MemoryLogRawAllocation, _impl_.step_id_)}},
    // string operation = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(MemoryLogRawAllocation, _impl_.operation_)}},
    // int64 num_bytes = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(MemoryLogRawAllocation, _impl_.num_bytes_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(MemoryLogRawAllocation, _impl_.num_bytes_)}},
    // uint64 ptr = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(MemoryLogRawAllocation, _impl_.ptr_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(MemoryLogRawAllocation, _impl_.ptr_)}},
    // int64 allocation_id = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(MemoryLogRawAllocation, _impl_.allocation_id_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(MemoryLogRawAllocation, _impl_.allocation_id_)}},
    // string allocator_name = 6;
    {::_pbi::TcParser::FastUS1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(MemoryLogRawAllocation, _impl_.allocator_name_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // int64 step_id = 1;
    {PROTOBUF_FIELD_OFFSET(MemoryLogRawAllocation, _impl_.step_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // string operation = 2;
    {PROTOBUF_FIELD_OFFSET(MemoryLogRawAllocation, _impl_.operation_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int64 num_bytes = 3;
    {PROTOBUF_FIELD_OFFSET(MemoryLogRawAllocation, _impl_.num_bytes_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // uint64 ptr = 4;
    {PROTOBUF_FIELD_OFFSET(MemoryLogRawAllocation, _impl_.ptr_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
    // int64 allocation_id = 5;
    {PROTOBUF_FIELD_OFFSET(MemoryLogRawAllocation, _impl_.allocation_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // string allocator_name = 6;
    {PROTOBUF_FIELD_OFFSET(MemoryLogRawAllocation, _impl_.allocator_name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\41\0\11\0\0\0\16\0"
    "tensorflow.MemoryLogRawAllocation"
    "operation"
    "allocator_name"
  }},
};

PROTOBUF_NOINLINE void MemoryLogRawAllocation::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.MemoryLogRawAllocation)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.operation_.ClearToEmpty();
  _impl_.allocator_name_.ClearToEmpty();
  ::memset(&_impl_.step_id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.allocation_id_) -
      reinterpret_cast<char*>(&_impl_.step_id_)) + sizeof(_impl_.allocation_id_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* MemoryLogRawAllocation::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const MemoryLogRawAllocation& this_ = static_cast<const MemoryLogRawAllocation&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* MemoryLogRawAllocation::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const MemoryLogRawAllocation& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:tensorflow.MemoryLogRawAllocation)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // int64 step_id = 1;
          if (this_._internal_step_id() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt64ToArrayWithField<1>(
                    stream, this_._internal_step_id(), target);
          }

          // string operation = 2;
          if (!this_._internal_operation().empty()) {
            const std::string& _s = this_._internal_operation();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tensorflow.MemoryLogRawAllocation.operation");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          // int64 num_bytes = 3;
          if (this_._internal_num_bytes() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt64ToArrayWithField<3>(
                    stream, this_._internal_num_bytes(), target);
          }

          // uint64 ptr = 4;
          if (this_._internal_ptr() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
                4, this_._internal_ptr(), target);
          }

          // int64 allocation_id = 5;
          if (this_._internal_allocation_id() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt64ToArrayWithField<5>(
                    stream, this_._internal_allocation_id(), target);
          }

          // string allocator_name = 6;
          if (!this_._internal_allocator_name().empty()) {
            const std::string& _s = this_._internal_allocator_name();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tensorflow.MemoryLogRawAllocation.allocator_name");
            target = stream->WriteStringMaybeAliased(6, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:tensorflow.MemoryLogRawAllocation)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t MemoryLogRawAllocation::ByteSizeLong(const MessageLite& base) {
          const MemoryLogRawAllocation& this_ = static_cast<const MemoryLogRawAllocation&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t MemoryLogRawAllocation::ByteSizeLong() const {
          const MemoryLogRawAllocation& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:tensorflow.MemoryLogRawAllocation)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string operation = 2;
            if (!this_._internal_operation().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_operation());
            }
            // string allocator_name = 6;
            if (!this_._internal_allocator_name().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_allocator_name());
            }
            // int64 step_id = 1;
            if (this_._internal_step_id() != 0) {
              total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
                  this_._internal_step_id());
            }
            // int64 num_bytes = 3;
            if (this_._internal_num_bytes() != 0) {
              total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
                  this_._internal_num_bytes());
            }
            // uint64 ptr = 4;
            if (this_._internal_ptr() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
                  this_._internal_ptr());
            }
            // int64 allocation_id = 5;
            if (this_._internal_allocation_id() != 0) {
              total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
                  this_._internal_allocation_id());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void MemoryLogRawAllocation::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<MemoryLogRawAllocation*>(&to_msg);
  auto& from = static_cast<const MemoryLogRawAllocation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.MemoryLogRawAllocation)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_operation().empty()) {
    _this->_internal_set_operation(from._internal_operation());
  }
  if (!from._internal_allocator_name().empty()) {
    _this->_internal_set_allocator_name(from._internal_allocator_name());
  }
  if (from._internal_step_id() != 0) {
    _this->_impl_.step_id_ = from._impl_.step_id_;
  }
  if (from._internal_num_bytes() != 0) {
    _this->_impl_.num_bytes_ = from._impl_.num_bytes_;
  }
  if (from._internal_ptr() != 0) {
    _this->_impl_.ptr_ = from._impl_.ptr_;
  }
  if (from._internal_allocation_id() != 0) {
    _this->_impl_.allocation_id_ = from._impl_.allocation_id_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MemoryLogRawAllocation::CopyFrom(const MemoryLogRawAllocation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.MemoryLogRawAllocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void MemoryLogRawAllocation::InternalSwap(MemoryLogRawAllocation* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.operation_, &other->_impl_.operation_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.allocator_name_, &other->_impl_.allocator_name_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MemoryLogRawAllocation, _impl_.allocation_id_)
      + sizeof(MemoryLogRawAllocation::_impl_.allocation_id_)
      - PROTOBUF_FIELD_OFFSET(MemoryLogRawAllocation, _impl_.step_id_)>(
          reinterpret_cast<char*>(&_impl_.step_id_),
          reinterpret_cast<char*>(&other->_impl_.step_id_));
}

::google::protobuf::Metadata MemoryLogRawAllocation::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class MemoryLogRawDeallocation::_Internal {
 public:
};

MemoryLogRawDeallocation::MemoryLogRawDeallocation(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.MemoryLogRawDeallocation)
}
inline PROTOBUF_NDEBUG_INLINE MemoryLogRawDeallocation::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::tensorflow::MemoryLogRawDeallocation& from_msg)
      : operation_(arena, from.operation_),
        allocator_name_(arena, from.allocator_name_),
        _cached_size_{0} {}

MemoryLogRawDeallocation::MemoryLogRawDeallocation(
    ::google::protobuf::Arena* arena,
    const MemoryLogRawDeallocation& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  MemoryLogRawDeallocation* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, step_id_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, step_id_),
           offsetof(Impl_, deferred_) -
               offsetof(Impl_, step_id_) +
               sizeof(Impl_::deferred_));

  // @@protoc_insertion_point(copy_constructor:tensorflow.MemoryLogRawDeallocation)
}
inline PROTOBUF_NDEBUG_INLINE MemoryLogRawDeallocation::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : operation_(arena),
        allocator_name_(arena),
        _cached_size_{0} {}

inline void MemoryLogRawDeallocation::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, step_id_),
           0,
           offsetof(Impl_, deferred_) -
               offsetof(Impl_, step_id_) +
               sizeof(Impl_::deferred_));
}
MemoryLogRawDeallocation::~MemoryLogRawDeallocation() {
  // @@protoc_insertion_point(destructor:tensorflow.MemoryLogRawDeallocation)
  SharedDtor(*this);
}
inline void MemoryLogRawDeallocation::SharedDtor(MessageLite& self) {
  MemoryLogRawDeallocation& this_ = static_cast<MemoryLogRawDeallocation&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.operation_.Destroy();
  this_._impl_.allocator_name_.Destroy();
  this_._impl_.~Impl_();
}

inline void* MemoryLogRawDeallocation::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) MemoryLogRawDeallocation(arena);
}
constexpr auto MemoryLogRawDeallocation::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(MemoryLogRawDeallocation),
                                            alignof(MemoryLogRawDeallocation));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull MemoryLogRawDeallocation::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_MemoryLogRawDeallocation_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &MemoryLogRawDeallocation::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<MemoryLogRawDeallocation>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &MemoryLogRawDeallocation::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<MemoryLogRawDeallocation>(), &MemoryLogRawDeallocation::ByteSizeLong,
            &MemoryLogRawDeallocation::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(MemoryLogRawDeallocation, _impl_._cached_size_),
        false,
    },
    &MemoryLogRawDeallocation::kDescriptorMethods,
    &descriptor_table_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* MemoryLogRawDeallocation::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 0, 67, 2> MemoryLogRawDeallocation::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tensorflow::MemoryLogRawDeallocation>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int64 step_id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(MemoryLogRawDeallocation, _impl_.step_id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(MemoryLogRawDeallocation, _impl_.step_id_)}},
    // string operation = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(MemoryLogRawDeallocation, _impl_.operation_)}},
    // int64 allocation_id = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(MemoryLogRawDeallocation, _impl_.allocation_id_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(MemoryLogRawDeallocation, _impl_.allocation_id_)}},
    // string allocator_name = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(MemoryLogRawDeallocation, _impl_.allocator_name_)}},
    // bool deferred = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(MemoryLogRawDeallocation, _impl_.deferred_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(MemoryLogRawDeallocation, _impl_.deferred_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // int64 step_id = 1;
    {PROTOBUF_FIELD_OFFSET(MemoryLogRawDeallocation, _impl_.step_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // string operation = 2;
    {PROTOBUF_FIELD_OFFSET(MemoryLogRawDeallocation, _impl_.operation_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int64 allocation_id = 3;
    {PROTOBUF_FIELD_OFFSET(MemoryLogRawDeallocation, _impl_.allocation_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // string allocator_name = 4;
    {PROTOBUF_FIELD_OFFSET(MemoryLogRawDeallocation, _impl_.allocator_name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bool deferred = 5;
    {PROTOBUF_FIELD_OFFSET(MemoryLogRawDeallocation, _impl_.deferred_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
    "\43\0\11\0\16\0\0\0"
    "tensorflow.MemoryLogRawDeallocation"
    "operation"
    "allocator_name"
  }},
};

PROTOBUF_NOINLINE void MemoryLogRawDeallocation::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.MemoryLogRawDeallocation)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.operation_.ClearToEmpty();
  _impl_.allocator_name_.ClearToEmpty();
  ::memset(&_impl_.step_id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.deferred_) -
      reinterpret_cast<char*>(&_impl_.step_id_)) + sizeof(_impl_.deferred_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* MemoryLogRawDeallocation::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const MemoryLogRawDeallocation& this_ = static_cast<const MemoryLogRawDeallocation&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* MemoryLogRawDeallocation::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const MemoryLogRawDeallocation& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:tensorflow.MemoryLogRawDeallocation)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // int64 step_id = 1;
          if (this_._internal_step_id() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt64ToArrayWithField<1>(
                    stream, this_._internal_step_id(), target);
          }

          // string operation = 2;
          if (!this_._internal_operation().empty()) {
            const std::string& _s = this_._internal_operation();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tensorflow.MemoryLogRawDeallocation.operation");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          // int64 allocation_id = 3;
          if (this_._internal_allocation_id() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt64ToArrayWithField<3>(
                    stream, this_._internal_allocation_id(), target);
          }

          // string allocator_name = 4;
          if (!this_._internal_allocator_name().empty()) {
            const std::string& _s = this_._internal_allocator_name();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tensorflow.MemoryLogRawDeallocation.allocator_name");
            target = stream->WriteStringMaybeAliased(4, _s, target);
          }

          // bool deferred = 5;
          if (this_._internal_deferred() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                5, this_._internal_deferred(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:tensorflow.MemoryLogRawDeallocation)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t MemoryLogRawDeallocation::ByteSizeLong(const MessageLite& base) {
          const MemoryLogRawDeallocation& this_ = static_cast<const MemoryLogRawDeallocation&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t MemoryLogRawDeallocation::ByteSizeLong() const {
          const MemoryLogRawDeallocation& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:tensorflow.MemoryLogRawDeallocation)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string operation = 2;
            if (!this_._internal_operation().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_operation());
            }
            // string allocator_name = 4;
            if (!this_._internal_allocator_name().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_allocator_name());
            }
            // int64 step_id = 1;
            if (this_._internal_step_id() != 0) {
              total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
                  this_._internal_step_id());
            }
            // int64 allocation_id = 3;
            if (this_._internal_allocation_id() != 0) {
              total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
                  this_._internal_allocation_id());
            }
            // bool deferred = 5;
            if (this_._internal_deferred() != 0) {
              total_size += 2;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void MemoryLogRawDeallocation::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<MemoryLogRawDeallocation*>(&to_msg);
  auto& from = static_cast<const MemoryLogRawDeallocation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.MemoryLogRawDeallocation)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_operation().empty()) {
    _this->_internal_set_operation(from._internal_operation());
  }
  if (!from._internal_allocator_name().empty()) {
    _this->_internal_set_allocator_name(from._internal_allocator_name());
  }
  if (from._internal_step_id() != 0) {
    _this->_impl_.step_id_ = from._impl_.step_id_;
  }
  if (from._internal_allocation_id() != 0) {
    _this->_impl_.allocation_id_ = from._impl_.allocation_id_;
  }
  if (from._internal_deferred() != 0) {
    _this->_impl_.deferred_ = from._impl_.deferred_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MemoryLogRawDeallocation::CopyFrom(const MemoryLogRawDeallocation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.MemoryLogRawDeallocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void MemoryLogRawDeallocation::InternalSwap(MemoryLogRawDeallocation* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.operation_, &other->_impl_.operation_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.allocator_name_, &other->_impl_.allocator_name_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MemoryLogRawDeallocation, _impl_.deferred_)
      + sizeof(MemoryLogRawDeallocation::_impl_.deferred_)
      - PROTOBUF_FIELD_OFFSET(MemoryLogRawDeallocation, _impl_.step_id_)>(
          reinterpret_cast<char*>(&_impl_.step_id_),
          reinterpret_cast<char*>(&other->_impl_.step_id_));
}

::google::protobuf::Metadata MemoryLogRawDeallocation::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace tensorflow
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
